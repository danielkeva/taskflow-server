{"version":3,"sources":["pages/HomePage.jsx","components/MainNav.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/generalReducer.js","store/index.js","index.js"],"names":["HomePage","console","log","process","style","paddingTop","fontSize","MainNav","className","to","exact","activeClassName","BoardDetails","lazy","BoardsPage","App","fallback","path","component","Boolean","window","location","hostname","match","initialState","boards","currBoard","currTask","isExpanded","isInitialAddition","store","createStore","combineReducers","board","state","action","type","JSON","parse","stringify","taskToUpdate","taskLists","forEach","taskList","tasks","find","task","id","general","isInitial","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAYeA,EAVE,WAGb,OAFJC,QAAQC,IAAI,uBAAuBC,cAG3B,6BACI,wBAAIC,MAAO,CAACC,WAAY,OAAQC,SAAS,UAAzC,eCMGC,EAXC,WACZ,OACI,yBAAKC,UAAU,eACX,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,uBAAuBE,OAAK,EAACC,gBAAgB,UAAvE,SADJ,KAGU,kBAAC,IAAD,CAASF,GAAG,UAAUD,UAAU,uBAAuBE,OAAK,EAACC,gBAAgB,UAA7E,aCCZC,EAAeC,gBAAK,kBAAM,8DAC1BC,EAAaD,gBAAK,kBAAM,uDAoBfE,MAjBf,WACE,OACE,8BACI,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACJ,kBAAC,WAAD,CAAUC,SAAU,wBAAIZ,MAAO,CAAEC,WAAY,OAAQC,SAAU,UAA3C,wBACd,kBAAC,IAAD,CAAOW,KAAK,IAAIC,UAAWlB,EAAUU,OAAK,IAC1C,kBAAC,IAAD,CAAOO,KAAK,UAAUC,UAAWJ,EAAYJ,OAAK,IAClD,kBAAC,IAAD,CAAOO,KAAK,kBAAkBC,UAAWN,S,MCTjCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BClBAC,EAAe,CACjBC,OAAQ,KACRC,UAAW,KACXC,SAAU,KACVC,YAAY,GCJVJ,EAAe,CAClBK,mBAAkB,GCUNC,EALDC,YAAYC,YAAgB,CACtCC,MFAwB,WAAmC,IAAlCC,EAAiC,uDAAzBV,EAAcW,EAAW,uCAC1D,OAAQA,EAAOC,MACX,IAAK,aACD,OAAO,2BACAF,GADP,IAEIT,OAAQY,KAAKC,MAAMD,KAAKE,UAAUJ,EAAOV,WAEjD,IAAK,YACD,OAAO,2BACAS,GADP,IAGIR,UAAU,eAAMS,EAAOT,aAE/B,IAAK,WACD,IAAIc,EAMJ,OALAN,EAAMR,UAAUe,UAAUC,SAAQ,SAAAC,GAC9BA,EAASC,MAAMC,MAAK,SAAAC,GACZA,EAAKC,KAAOZ,EAAOY,KAAIP,EAAeM,SAG3C,2BACAZ,GADP,IAEIP,SAAUa,EAAY,eAAQA,GAAiB,OAEvD,IAAK,cACD,OAAO,2BACAN,GADP,IAEIP,SAAS,eAAMQ,EAAOR,YAE9B,IAAK,gBACD,OAAO,2BACAO,GADP,IAEIN,YAAaM,EAAMN,aAE3B,QACI,OAAOM,IElCfc,QDJ0B,WAAmC,IAAlCd,EAAiC,uDAAzBV,EAAcW,EAAW,uCAC5D,OAAQA,EAAOC,MACX,IAAK,0BACD,OAAO,2BACAF,GADP,IAEIL,kBAAmBM,EAAOc,YAElC,QACI,OAAOf,MCHfgB,YAAgBC,MCEpBC,IAASC,OACP,kBAAC,IAAD,CAAUvB,MAAOA,GAEf,kBAAC,EAAD,OAGFwB,SAASC,eAAe,SJkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.1e7eb086.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => {\nconsole.log('process.env.NODE_ENV',process.env.NODE_ENV)\n\n    return (\n        <div>\n            <h1 style={{paddingTop: '50px', fontSize:'100px'}}>Home Page</h1>\n        </div>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nconst MainNav = () => {\n    return (\n        <nav className=\"main-navbar\">\n            <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Home </NavLink>\n                | <NavLink to=\"/boards\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Boards </NavLink>\n        </nav>\n    )\n}\n\nexport default MainNav","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport HomePage from './pages/HomePage';\nimport MainNav from './components/MainNav';\n// import BoardDetails from './pages/BoardDetails';\n\n// import BoardsPage from './pages/BoardsPage';\nconst BoardDetails = lazy(() => import('./pages/BoardDetails'));\nconst BoardsPage = lazy(() => import('./pages/BoardsPage'));\n\n\nfunction App() {\n  return (\n    <main>\n        <Router>\n          <MainNav />\n          <Switch>\n      <Suspense fallback={<h1 style={{ paddingTop: '50px', fontSize: '100px' }}>Still Loadingâ€¦</h1>}>\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/boards\" component={BoardsPage} exact />\n            <Route path=\"/board/:boardId\" component={BoardDetails}  />\n      </Suspense>\n          </Switch>\n        </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    boards: null,\n    currBoard: null,\n    currTask: null,\n    isExpanded: false\n};\n\nexport const boardReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_BOARDS':\n            return {\n                ...state,\n                boards: JSON.parse(JSON.stringify(action.boards))\n            };\n        case 'SET_BOARD':\n            return {\n                ...state,\n                // currBoard: action.currBoard\n                currBoard: { ...action.currBoard }\n            };\n        case 'SET_TASK':\n            let taskToUpdate;\n            state.currBoard.taskLists.forEach(taskList => {\n                taskList.tasks.find(task => {\n                    if (task.id === action.id) taskToUpdate = task\n                })\n            })\n            return {\n                ...state,\n                currTask: taskToUpdate ? { ...taskToUpdate } : null\n            };\n        case 'UPDATE_TASK':\n            return {\n                ...state,\n                currTask: { ...action.currTask }\n            }\n        case 'TOGGLE_LABELS':\n            return {\n                ...state,\n                isExpanded: !state.isExpanded\n            }\n        default:\n            return state\n    }\n}\n","const initialState = {\n   isInitialAddition:false\n};\n\nexport const generalReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_INITIAL_ADDITION':\n            return {\n                ...state,\n                isInitialAddition: action.isInitial\n            };\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { boardReducer } from './reducers/boardReducer';\nimport { generalReducer } from './reducers/generalReducer';\n\nconst store = createStore(combineReducers({\n    board: boardReducer,\n    general: generalReducer\n}), applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport App from './App.jsx';\nimport './styles/global.scss'\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n  {/* <React.StrictMode> */}\n    <App />\n  {/* </React.StrictMode> */}\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["pages/HomePage.jsx","components/MainNav.jsx","selectors/boardSelector.js","services/http.service.js","services/util.service.js","services/board.service.js","services/socket.service.js","store/actions/boardActions.js","components/task-cmps/task-actions/LabelList.jsx","components/task-cmps/TaskPreview.jsx","hooks/useKeypress.jsx","hooks/useOnClickOutSide.js","components/TextEditor.jsx","components/task-cmps/ListMenu.jsx","components/task-cmps/TaskList.jsx","components/task-cmps/task-actions/LabelPicker.jsx","components/task-cmps/task-actions/DatePicker.jsx","store/actions/generalAction.js","components/task-cmps/task-actions/checklist-cmps/ChecklistPicker.jsx","services/cloudinary.service.js","components/task-cmps/task-actions/CoverPicker.jsx","components/task-cmps/task-actions/TaskActions.jsx","components/task-cmps/task-actions/checklist-cmps/ChecklistItem.jsx","components/task-cmps/task-actions/checklist-cmps/TaskChecklist.jsx","components/ActivityLog.jsx","pages/TaskDetails.jsx","components/task-cmps/AddTaskList.jsx","components/board-menu-cmps/BoardBgPicker.jsx","components/board-menu-cmps/BoardMenu.jsx","pages/BoardDetails.jsx","pages/BoardsPage.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/generalReducer.js","store/index.js","index.js"],"names":["HomePage","MainNav","className","to","exact","activeClassName","selectCurrBoard","createSelector","state","board","currBoard","axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","response","status","console","log","utilService","makeId","length","txt","possible","i","charAt","Math","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","reorder","list","startIndex","endIndex","Array","from","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","boardService","query","HttpService","getById","update","getEmptyList","id","title","theme","tasks","getEmptyTask","description","creatorId","membersId","comments","dueDate","labels","isDone","images","checklists","cover","background","isFull","type","getEmptyCheckList","listItems","getEmptyListItem","newActivity","cardTxt","boardTxt","taskId","date","Date","now","_id","socket","socketService","setup","io","terminate","on","eventName","cb","off","emit","getBoardById","dispatch","warn","saveBoard","boardCopy","savedBoard","loadTask","getState","currTask","updateTask","task","LabelList","onLabelClicked","expandMode","useDispatch","isExpanded","useSelector","handleClick","ev","preventDefault","map","label","onClick","key","style","backgroundColor","color","Container","styled","div","props","backgroundImage","minHeight","backgroundSize","display","fontSize","fontFamily","calendarStrings","lastDay","sameDay","nextDay","sameElse","TaskPreview","useRouteMatch","doneCount","useMemo","reduce","totalCount","checklist","acc","item","checklistItemsAmount","isDue","setHours","setDate","getDate","getTime","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","draggable","src","dir","calendar","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","window","addEventListener","removeEventListener","useOnClickOutside","handler","exceptionalRef","listener","event","current","contains","target","document","TextEditor","text","name","onInputBlur","isWide","isFocused","onChange","onSubmit","onEscape","placeholder","isEditing","setIsEditing","initialText","setInitialText","inputEl","useRef","enter","esc","focus","value","ModuleText","React","createElement","updateText","autoFocus","rows","defaultValue","onBlur","inputVal","test","ListMenu","onCloseMenu","onRemoveList","onAddTask","TaskList","taskList","taskListIdx","onListUpdated","taskListCopy","setTaskListCopy","newTask","setNewTask","isMenuOpen","setIsMenuOpen","wrapperRef","emptyTask","handleTaskChange","updateList","updatedTaskList","addTask","clickSource","JSON","parse","stringify","push","stopEditing","LabelPicker","onCloseModal","onTaskUpdated","labelsUpdated","bounds","exceptionRef","selectedLabel","setSelectedLabel","handleChange","updateLabel","labelsCopy","labelIdx","findIndex","taskCopy","taskLabelIdx","labelToEdit","find","idx","toggleLabels","selectLabelToEdit","DatePicker","createActivity","timestamp","isRemoveActivity","moment","format","submitDate","toggleInitialAddition","isInitial","ChecklistPicker","sidebarRef","setChecklist","emptyChecklist","addChecklist","checklistCopy","uploadImg","UPLOAD_URL","formData","FormData","append","files","fetch","body","then","json","catch","err","error","HalfBgcWrapper","FullBgcWrapper","backgroundPosition","CoverPicker","selectedCover","setSelectedCover","loading","setLoading","handleSelected","handleLayout","handleThemeChange","handleUpload","cloudinaryService","img","isCover","htmlFor","height","width","TaskActions","onUpdateTask","onLabelsUpdated","onAddActivity","currAction","setCurrAction","setBounds","toggle","isActive","getBoundingClientRect","top","left","innerWidth","updateWidthAndHeight","useCallback","getElementById","right","closeModal","ChecklistItem","onRemoveItem","itemCopy","setItem","displayMsg","setDisplayMsg","unSavedTitle","setUnsavedTitle","editorRef","initialRender","prevState","updateItem","checked","handleClose","activity","TaskChecklist","newItem","setNewItem","checklistTitle","setChecklistTitle","progress","setProgress","isInitialAddition","general","addItem","donePrecent","round","emptyItem","removeItem","itemId","updateChecklist","currItem","updatedChecklist","currChecklist","filter","percent","lastWeek","nextWeek","ActivityLog","filteredActivities","activities","showContent","setShowContent","showMore","setShowMore","slice","setList","setIndex","dangerouslySetInnerHTML","__html","newIndex","newShowMore","newList","concat","TaskDetails","activeAction","setActiveAction","setTask","modalHeaderRef","useParams","history","useHistory","load","overflowX","updateBoard","unshift","taskLists","forEach","updateBoardLabels","updatedLabels","editedLabel","currLabel","addActivity","handleActiveAction","action","class","crossOrigin","stopPropagation","updatedTask","AddTaskList","onBoardUpdated","newTaskList","setTaskList","addTaskList","emptyTaskList","override","css","BoardBgPicker","onGoBack","bgType","setBgType","handleStyle","size","BoardMenu","closeMenu","menuBtnRef","wrapperReff","selectedAction","setAction","selectAction","listen","location","classList","BoardDetails","boardId","path","loadBoard","updateCurrBoard","currList","updatedBoard","setCurrBoard","removeList","taskListId","toggleMenu","onDragEnd","tasklists","newState","items","sIndex","dIndex","fromList","toList","direction","snapshot","droppableProps","component","paddingTop","BoardsPage","boards","getBoards","App","fallback","Boolean","hostname","match","initialState","store","createStore","combineReducers","taskToUpdate","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.379311d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <h1>Home Page</h1>\n        </div>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nconst MainNav = () => {\n    return (\n        <nav className=\"main-navbar\">\n            <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Home </NavLink>\n                | <NavLink to=\"/boards\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Boards </NavLink>\n        </nav>\n    )\n}\n\nexport default MainNav","import { createSelector } from \"reselect\";\n\nconst currBoard = state => state.board.currBoard;\n\nexport const selectCurrBoard = createSelector(\n    currBoard,\n    board => board\n);\n","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyTask,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    // save\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     taskLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             tasks: [\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task1',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task2',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task3',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task4',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\nfunction query() {\n    return HttpService.get('board')\n}\n\nasync function stall(stallTime = 3000) {\n    await new Promise(resolve => setTimeout(resolve, stallTime));\n  }\n\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\n// function save(newBoard) {\n//     board = newBoard\n//     return JSON.parse(JSON.stringify(board))\n// }\n\n\nasync function update(board) {\n    // console.log('board');\n    // await stall(3000)\n    return HttpService.put(`board/${board._id}`, board)\n}\n\n\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        tasks: []\n    }\n}\n\nfunction getEmptyTask() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        images: [],\n        checklists: [],\n        cover: {\n            background: '',\n            isFull: null,\n            type: null\n        }\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: [],\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, taskId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        taskId,\n        date: Date.now()\n    }\n}\n\n// function getTaskById(taskId) {\n//     for (let i = 0; i < board.taskLists.length; i++) {\n//         var task = board.taskLists[i].tasks.find(task => task.id === taskId)\n//         if (task) {\n//             return task\n//         }\n//     }\n// }\n","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    if (socket) {\r\n        socket.off(eventName, cb)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    if (socket) {\r\n        socket.emit(eventName, data);\r\n    }\r\n}","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n\n    }\n\n}\n\nexport function saveBoard(boardCopy) {\n    return async dispatch => {\n        // const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n        // dispatch({ type: 'SET_BOARD', currBoard: boardCopy })\n        const savedBoard = await boardService.update(boardCopy)\n        console.log('afte boarrd saved', savedBoard);\n        dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n        socketService.emit('update board', savedBoard);\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadTask(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currTask\n    }\n}\n\nexport function updateTask(task) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currTask: task });\n    }\n}\n\nexport function toggleLabels() {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_LABELS' });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadTask(taskId) {\n    //     state.board.taskLists.forEach(taskList => {\n    //         const task = taskList.tasks.find(task => task.id === taskId)\n    //         if (task) {\n    //             dispatch({ type: 'SET_TASK', currTask: task })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateTaskList(taskList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n    //     boardCopy.taskLists.splice(idx, 1, taskList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeTaskList(taskListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n    //     boardCopy.taskLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateTask(task) {\n    //     dispatch({ type: 'SET_TASK', currTask: task })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.taskLists.forEach(taskList => {\n    //       let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //       if (idx !== -1) {\n    //         taskList.tasks.splice(idx, 1, task)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","import React, { useState } from 'react';\nimport { IoMdAdd } from 'react-icons/io';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleLabels } from '../../../store/actions/boardActions';\n\n\nconst LabelList = ({ labels, onLabelClicked = null, expandMode }) => {\n    const dispatch = useDispatch()\n    const isExpanded = useSelector(state => state.board.isExpanded)\n\n    const handleClick = (ev) => {\n        ev.preventDefault();\n        if (onLabelClicked !== null) {\n            onLabelClicked(ev)\n        } else {\n            dispatch(toggleLabels()) // Using the store here to toggle all the labels in the board\n        }\n    }\n    return (\n\n        <div className=\"labels-list\">\n            {labels.map(label => (\n                <span\n                    onClick={handleClick}\n                    key={label.id}\n                    className={`label  ${isExpanded || expandMode ? 'label-expand' : ''}`}\n                    style={{ backgroundColor: label.color }}>\n                    <span className=\"label-title\">{label.title}</span>\n                </span>\n            ))}\n            {expandMode &&\n                <button className='modal-btn'  onClick={handleClick} >\n                    <IoMdAdd className=\"icon-md\" />\n                </button>}\n        </div>\n    )\n}\n\nexport default LabelList\n","import React, { useMemo } from 'react'\nimport { NavLink, useRouteMatch } from 'react-router-dom'\nimport LabelList from './task-actions/LabelList'\nimport Moment from 'react-moment';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components'\nimport { createSelector } from 'reselect'\nimport { IoMdCheckboxOutline } from \"react-icons/io\";\nimport { GrTextAlignFull } from \"react-icons/gr\";\nimport { RiTimeLine } from \"react-icons/ri\";\n\n\nconst Container = styled.div`\n    ${props => props.cover.isFull ?\n        (props.cover.type === 'color' ?\n            { backgroundColor: props.cover.isFull ? props.cover.background : '' } :\n            { backgroundImage: 'url(' + props.cover.background + ')', minHeight: 235, backgroundSize: 'cover' }) : ''}\n            font-size:${props => props.cover.isFull ? '16px' : ''};\n            font-family:${props => props.cover.isFull ? 'LatoBold' : ''};\n\n            ${props => props.cover.isFull ?\n        {\n            display: 'flex',\n            fontSize: '16px',\n            fontFamily: 'LatoBold'\n        } :\n        ''}\n    `;\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday]',\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    sameElse: 'MMMM D'\n};\n\nconst TaskPreview = ({ task, index }) => {\n    let { url } = useRouteMatch();\n\n    const doneCount = useMemo(\n        () =>\n            task.checklists.reduce((totalCount, checklist) => {\n                if (checklist.listItems.length > 0) {\n                    let checklistSum = checklist.listItems.reduce((acc, item) => {\n                        if (item.isDone) acc++\n                        return acc\n                    }, 0)\n                    totalCount += checklistSum\n                }\n                return totalCount\n            }, 0),\n        [task.checklists]\n    );\n    const checklistItemsAmount = useMemo(\n        () =>\n            task.checklists.reduce((acc, checklist) => {\n                if (checklist.listItems.length > 0) {\n                    acc += checklist.listItems.length\n                }\n                return acc\n            }, 0),\n        [task.checklists]\n    );\n\n    const isDue = useMemo(() => {\n        console.log('isdue')\n        let date = new Date()\n        date.setHours(0, 0, 0, 0)\n        date.setDate(date.getDate() + 1)\n        if (date.getTime() === task.dueDate) {\n            return 'due-soon'\n        } else if (task.dueDate <= Date.now()) {\n            return 'over-due'\n        } else return ''\n    }, [task.dueDate]);\n\n    return (\n\n        <Draggable draggableId={task.id} index={index} type=\"task\">\n\n            {provided => (\n                <div\n                    className='task-preview'\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}>\n                    <NavLink to={`${url}/${task.id}`} className='task-link' activeClassName='active' draggable='false'>\n                        <Container cover={task.cover}>\n                            {(task.cover.background && !task.cover.isFull) &&\n                                <div>\n                                    {task.cover.type === 'color' ?\n                                        <div\n                                            className={task.cover.background ? 'task-cover' : ''}\n                                            style={{ backgroundColor: task.cover.background }}\n                                        ></div> :\n                                        <img src={task.cover.background} className='task-img-cover ratio-square ' />}\n                                </div>}\n                            <div className={`task-preview-content \n                                    ${(task.cover.type === 'img' && task.cover.isFull) ?\n                                    (task.cover.theme === 'dark' ? 'content-wrapper dark' : 'content-wrapper light') : ''}`}>\n\n                                {task.labels && <LabelList labels={task.labels} />}\n                                <div className='task-preview-title' dir='auto'>{task.title}</div>\n                                <div className='badges'>\n                                    {task.dueDate &&\n                                        <div className={'badge ' + isDue}>\n                                            <RiTimeLine className=\"icon-sm\" />\n                                            <Moment className='badge-text' calendar={calendarStrings} date={task.dueDate} />\n                                        </div>\n                                    }\n                                    {task.description &&\n                                        <div className=\"badge\">\n                                            <GrTextAlignFull className=\"icon-md\" />\n                                        </div>\n                                    }\n                                    {task.checklists.length > 0 && checklistItemsAmount > 0 &&\n                                        <div className={'badge checklist-items-badge ' + (doneCount === checklistItemsAmount ? 'task-complete' : '')}>\n\n                                            <IoMdCheckboxOutline className=\"icon-sm\" />\n                                            <span className='badge-text'>{doneCount}/{checklistItemsAmount}</span>\n                                        </div>}\n\n                                </div>\n\n                            </div>\n                        </Container>\n                    </NavLink>\n\n                </div>\n\n            )}\n\n        </Draggable>\n    )\n}\nexport default TaskPreview\n","import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","// hook from https://usehooks.com/useOnClickOutside/\nimport { useEffect } from \"react\";\n\n// Hook\nfunction useOnClickOutside(ref, handler, exceptionalRef = null) {\n\n  useEffect(\n    () => {\n      const listener = event => {\n        if (!ref) return;\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          // console.log('Refsdasd')\n          return;\n        }\n        // Do nothing if  ANOTHER clicking ref's element or descendent elements \n        if (exceptionalRef !== null) {\n          if (!exceptionalRef.current || exceptionalRef.current.contains(event.target)) {\n            console.log('exceptionalRef', exceptionalRef)\n            return\n          }\n        }\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, exceptionalRef, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import React, { useState, useEffect, useRef } from 'react'\nimport useKeyPress from '../hooks/useKeypress'\nimport useOnClickOutside from '../hooks/useOnClickOutSide'\n\nconst TextEditor = (props) => {\n    const {\n        type,\n        text,\n        name,\n        onInputBlur,\n        isWide,\n        isFocused,\n        onChange,\n        onSubmit,\n        onEscape,\n        placeholder = null,\n    } = props\n    // const [textCopy, setText] = useState(text)\n    const [isEditing, setIsEditing] = useState(false)\n    const [initialText, setInitialText] = useState('')\n    const inputEl = useRef(null)\n\n    const enter = useKeyPress(\"Enter\");\n    const esc = useKeyPress(\"Escape\");\n\n\n    useEffect(() => {\n        if (isEditing) {\n            inputEl.current.focus()\n        }\n    }, [isEditing])\n\n\n\n    useEffect(() => {\n        if (isFocused) {\n            setIsEditing(true)\n        }\n        // Check whether or not to change the isEditing state from the parent component (for bluring the input)\n        if (isFocused === false) {\n\n            setIsEditing(false)\n        }\n    }, [isFocused, isEditing]);\n\n    useEffect(() => {\n        if (isEditing) {\n            setInitialText(text)\n        }\n    }, [isEditing]) // when input is focused save the initial text\n\n\n    useEffect(() => {\n        if (isEditing && !isWide) { // if input is focused and not textarea\n            // if Enter is pressed, save the text and case the editor\n            if (enter) {\n                if (onInputBlur) {\n                    onInputBlur()\n                } else {\n                    onSubmit()\n                }\n                setIsEditing(false);\n            }\n            // if Escape is pressed, revert the text and close the editor\n            if (esc) {\n                const customEv = {\n                    target: {\n                        name: name,\n                        value: initialText\n                    },\n                }\n                onChange(customEv)\n                setIsEditing(false);\n                if (onEscape) {\n                    onEscape()\n                }\n            }\n        }\n    }, [enter, esc]); // watch the Enter and Escape key presses\n\n    const ModuleText = React.createElement(\n        type,\n        {\n            className: `module-text  ${text ? '' : 'placeholder'}`,\n            dir: 'auto',\n            onClick: () => { setIsEditing(true) }\n        },\n        text ? text : placeholder\n    );\n\n\n    const updateText = () => {\n        if (onInputBlur) {\n            console.log('blur');\n            setIsEditing(false)\n            onInputBlur()\n        }\n    }\n    const test = (ev) => {\n        const reg = /^\\s+$/; // check for whitespace \n        const inputVal = ev.target.value;\n        if (reg.test(inputVal) || inputVal === '') {\n            return\n        } else {\n            onChange(ev)\n        }\n    }\n    const handleTextareaChange = (ev) => {\n        onChange(ev)\n    }\n    const focusInput = () => {\n        if (!isEditing) {\n            setIsEditing(true)\n            setTimeout(() => {\n                inputEl.current.focus();\n            }, 0)\n\n        }\n    }\n    return (\n        <div className=\"text-editor-wrapper\">\n            {\n                isEditing ?\n                    (!isWide ?\n                        <input dir=\"auto\" type=\"text\" ref={inputEl} autoFocus className=\"focusClass\" name={name} defaultValue={text} onChange={test} onBlur={updateText} /> :\n                        <textarea ref={inputEl} className=\"focusClass\" autoFocus rows=\"5\" name={name} defaultValue={text} onChange={handleTextareaChange} onBlur={updateText} placeholder={placeholder} />) :\n                    ModuleText\n            }\n\n        </div>\n    )\n}\n\nexport default TextEditor\n","import React from 'react'\nimport { RiCloseLine } from \"react-icons/ri\";\n\nconst ListMenu = ({ onCloseMenu, onRemoveList,onAddTask }) => {\n    return (\n        <div className=\"pop-up list-menu\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={() => onCloseMenu()}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <div onClick={onAddTask} >Add card</div>\n            <div>Change list color</div>\n            <div>Sort list by</div>\n            <div onClick={onRemoveList}>Delete list</div>\n        </div>\n    )\n}\n\nexport default ListMenu\n","import React, { useEffect, useState, useRef } from 'react'\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\n\n// import 'simplebar/dist/simplebar.min.css';\nimport TaskPreview from './TaskPreview'\nimport TextEditor from '../TextEditor'\nimport ListMenu from './ListMenu';\nimport { boardService } from '../../services/board.service';\nimport useOnClickOutside from '../../hooks/useOnClickOutSide';\nimport { RiCloseLine, RiAddLine } from 'react-icons/ri';\nimport { useRouteMatch } from 'react-router-dom';\n\n\n\n\nconst TaskList = ({ provided, innerRef, taskList, taskListIdx, onListUpdated, onRemoveList }) => {\n\n    const [taskListCopy, setTaskListCopy] = useState({ ...taskList })\n    const [newTask, setNewTask] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    let { url } = useRouteMatch();\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        setTaskListCopy({ ...taskList })\n    }, [taskList])\n\n\n    const getEmptyTask = () => {\n        setIsMenuOpen(false)\n        const emptyTask = boardService.getEmptyTask()\n        setNewTask(emptyTask)\n        setIsEditing(true)\n    }\n\n    const handleListChange = (ev) => {\n        setTaskListCopy({ ...taskListCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const handleTaskChange = (ev) => {\n        setNewTask({ ...newTask, [ev.target.name]: ev.target.value })\n\n    }\n    const handleListRemove = () => {\n        onRemoveList(taskList.id)\n    }\n    const updateList = (updatedTaskList, newActivity) => {\n        if (updatedTaskList) {\n            onListUpdated(updatedTaskList, newActivity)\n        } else {\n            if (taskListCopy.title === taskList.title) return;\n            onListUpdated(taskListCopy)\n        }\n        setIsEditing(false)\n        setNewTask(null)\n    }\n\n    const addTask = async (clickSource = null) => {\n        if (newTask && newTask.title) {\n            const updatedTaskList = JSON.parse(JSON.stringify(taskListCopy));\n            updatedTaskList.tasks.push(newTask)\n            const newActivity = boardService.newActivity(\n                `Added this card to ${updatedTaskList.title}`,\n                `Added  <a href=\"#${url}/${newTask.id}\">${newTask.title}</a> to ${updatedTaskList.title}`,\n                newTask.id\n            )\n            await updateList(updatedTaskList, newActivity)\n            if (clickSource === 'clickedOutside') return; // if click is outside the ref wrapper end editing\n            setNewTask(null)\n            getEmptyTask()\n        }\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing && newTask && newTask.title) {\n            addTask('clickedOutside') // passing this string to add the current task and end the editing\n        } else {\n            stopEditing()\n        }\n    });\n    const stopEditing = () => {\n        setNewTask(null)\n        setIsEditing(false)\n    }\n\n\n\n    return (\n        taskListCopy &&\n        <div className=\"list-wrapper\"\n            ref={innerRef}\n            {...provided.draggableProps}\n        >\n            <div className=\"list\">\n                <div className=\"list-header\" {...provided.dragHandleProps}>\n                    {taskListCopy.title &&\n                        <TextEditor\n                            name=\"title\"\n                            type=\"h3\"\n                            text={taskListCopy.title}\n                            onChange={handleListChange}\n                            onInputBlur={updateList}\n                        />}\n                    <button className=\"list-menu-btn clear-btn\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n                        <BsThreeDots />\n                    </button>\n                    {isMenuOpen && !isEditing && <ListMenu onRemoveList={handleListRemove} onAddTask={getEmptyTask} onCloseMenu={() => setIsMenuOpen(false)} />}\n                </div>\n                <div className=\"overs\">\n                    <Droppable type=\"task\" droppableId={`${taskListIdx}`}>\n                        {provided => (\n\n\n                            <div className=\"list-content custom-scrollbar\" ref={provided.innerRef} >\n                                {taskList.tasks.map((task, index) => (\n                                    <TaskPreview key={task.id} task={task} index={index} />\n                                ))}\n                                {(isEditing && newTask) && <div className=\"add-task-wrapper \" ref={wrapperRef}>\n                                    <TextEditor\n                                        name=\"title\"\n                                        type=\"p\"\n                                        text={newTask.title}\n                                        onChange={handleTaskChange}\n                                        isFocused={isEditing}\n                                        onSubmit={addTask}\n                                        onEscape={stopEditing}\n                                    />\n\n                                    <div className=\"add-task-controls\">\n                                        <button onClick={addTask} className=\"submit-btn\">Add task</button>\n                                        <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n                                            <RiCloseLine />\n                                        </button>\n                                    </div>\n\n                                </div>}\n                                {/* </div> */}\n                                {provided.placeholder}\n\n                            </div>\n                        )}\n                    </Droppable>\n                </div>\n\n                <div className=\"list-footer\">\n                    {(!isEditing && !newTask) &&\n                        <a className=\"clear-btn list-footer-btn\" onClick={getEmptyTask}  >\n                            <span className=\"icon-lg add-icon\"><RiAddLine /></span> <span>Add new task</span>\n                        </a >\n                    }\n                </div>\n            </div>\n        </div >\n\n    )\n}\n\nexport default TaskList\n","import React, { useRef, useState } from 'react'\n\nimport { RiCloseLine } from \"react-icons/ri\";\nimport { GoPencil } from \"react-icons/go\";\n\nimport TextEditor from '../../TextEditor';\nimport { useEffect } from 'react';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\n\nconst LabelPicker = ({ task, labels, onCloseModal, onTaskUpdated, labelsUpdated, bounds, exceptionRef }) => {\n    const [selectedLabel, setSelectedLabel] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const selectLabelToEdit = (label) => {\n        if (selectedLabel !== null && selectedLabel.id === label.id) {\n            setIsEditing(false)\n        } else {\n            setSelectedLabel({ ...label })\n            setIsEditing(true)\n        }\n    }\n\n    const handleChange = (ev) => {\n        setSelectedLabel({ ...selectedLabel, [ev.target.name]: ev.target.value })\n    }\n    const updateLabel = () => {\n        const labelsCopy = [...labels];\n        const labelIdx = labelsCopy.findIndex(label => label.id === selectedLabel.id)\n        labelsCopy.splice(labelIdx, 1, selectedLabel)\n        labelsUpdated([...labelsCopy], selectedLabel)\n        setIsEditing(false);\n        setSelectedLabel(null)\n    }\n\n    useEffect(() => {\n        if (!isEditing && selectedLabel) {\n            const taskCopy = JSON.parse(JSON.stringify(task));\n            const taskLabelIdx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            if (taskLabelIdx !== -1) {\n                taskCopy.labels.splice(taskLabelIdx, 1, selectedLabel)\n                onTaskUpdated(taskCopy)\n            }\n        }\n\n    }, [isEditing])\n\n\n    const toggleLabels = (selectedLabel) => {\n        let labelExist;\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        labelExist = taskCopy.labels.find(label => label.id === selectedLabel.id)\n        if (!labelExist) {\n            taskCopy.labels.push(selectedLabel)\n        } else {\n            const idx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            taskCopy.labels.splice(idx, 1)\n        }\n        onTaskUpdated(taskCopy)\n    }\n\n    const labelToEdit = (label) => {\n        if (selectedLabel) {\n            // console.log(label.id === selectedLabel.id)\n            return label.id === selectedLabel.id\n        }\n    }\n    return (\n\n        <div className=\"pop-up labels\" ref={wrapperRef} style={bounds}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <ul>\n                {labels.map(label => (\n                    <li className=\"label-container\" key={label.id}>\n                        <span\n                            className=\"card-label\"\n                            style={{ backgroundColor: label.color }}\n                            onClick={() => toggleLabels(label)}\n                        >\n                            {!labelToEdit(label) && <span className=\"label-title\">{label.title}</span>}\n                            {labelToEdit(label) && isEditing && <TextEditor\n                                type=\"p\"\n                                name=\"title\"\n                                isFocused={isEditing}\n                                text={label.title}\n                                onChange={handleChange}\n                                onInputBlur={updateLabel}\n                            />}\n                            <span className=\"label-selected\">\n                            </span>\n                        </span>\n                        <button className=\"clear-btn\" onClick={() => selectLabelToEdit(label)}>\n                            <GoPencil />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LabelPicker\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport moment from 'moment'\nimport { RiCloseLine } from 'react-icons/ri'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n\nimport { boardService } from '../../../services/board.service';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\nconst DatePicker = ({ task, onTaskUpdated, onCloseModal, bounds, exceptionRef }) => {\n    const [value, setDate] = useState(new Date());\n    let { url } = useRouteMatch();\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        if (task.dueDate) {\n            const date = new Date(task.dueDate)\n            setDate(date)\n        }\n    }, [])\n\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const createActivity = (timestamp, isRemoveActivity = null) => {\n        const dueDate = moment(new Date(timestamp)).format(\"MMM Do\");\n        if (task.dueDate) {\n            return boardService.newActivity(\n                `Changed the due date of this card to  ${dueDate}`,\n                `Changed <a href=\"#${url}\">${task.title}</a> to be due at ${dueDate}`,\n                task.id\n            )\n        } else if (isRemoveActivity) {\n            return boardService.newActivity(\n                `Removed the due date from this card`,\n                `Removed <a href=\"${url}\">${task.title}</a> due date`,\n                task.id\n            )\n        } else {\n            return boardService.newActivity(\n                `Set this card to be due at ${dueDate}`,\n                `Set <a href=\"${url}\">${task.title}</a> to be due at ${dueDate} `,\n                task.id\n            )\n        }\n    }\n\n\n\n    const submitDate = async () => {\n        const timestamp = value.getTime();\n        if (timestamp === task.dueDate) return;\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        taskCopy.dueDate = timestamp\n        const newActivity = createActivity(timestamp)\n        await onTaskUpdated(taskCopy, newActivity)\n        onCloseModal()\n    }\n\n\n    const onChangeDate = (date) => {\n        setDate(date)\n    }\n    return (\n        <div className=\"pop-up\" style={bounds} ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Date</span>\n                <button onClick={onCloseModal} className=\"pop-up-close-btn clear-btn icon-lg\">\n                    <RiCloseLine />\n                </button>\n            </div>\n            <Calendar\n                onChange={onChangeDate}\n                value={value}\n            />\n            <button onClick={submitDate} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default DatePicker\n","\n\n// Dispatching this action to determine wether or not to start editing in TaskChecklist cmp on initial render\nexport function toggleInitialAddition(isInitial) {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_INITIAL_ADDITION', isInitial });\n    }\n}","import React, { useEffect, useState } from 'react'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide'\nimport { useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { toggleInitialAddition } from '../../../../store/actions/generalAction';\nimport { useRouteMatch } from 'react-router-dom'\nconst ChecklistPicker = ({ task, onTaskUpdated, onCloseModal, bounds, sidebarRef }) => {\n    const [checklist, setChecklist] = useState({})\n    const wrapperRef = useRef(null)\n    const { url } = useRouteMatch();\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const emptyChecklist = boardService.getEmptyCheckList();\n        setChecklist({ ...emptyChecklist })\n    }, [])\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, sidebarRef);\n\n    const handleChange = (ev) => {\n        setChecklist({ ...checklist, [ev.target.name]: ev.target.value })\n    }\n    const addChecklist = () => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        const checklistCopy = { ...checklist }\n        taskCopy.checklists.push(checklistCopy)\n        const newActivity = boardService.newActivity(\n            `Added ${checklist.title}  on this card`,\n            `Added ${checklist.title} on <a href=\"#${url}\">${task.title}</a>`,\n            task.id\n        )\n        onTaskUpdated(taskCopy, newActivity)\n        dispatch(toggleInitialAddition(true)) // Dispatching this action to start editing on TaskChecklist cmp \n        onCloseModal()\n    }\n    return (\n        <div className=\"pop-up\" style={bounds} ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Add checklist</span>\n                <button className=\"pop-up-close-btn clear-btn\">\n                </button>\n            </div>\n            <TextEditor\n                isFocused={true}\n                onChange={handleChange}\n                onSubmit={addChecklist}\n                type=\"p\"\n                name=\"title\"\n            />\n            <button onClick={addChecklist} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default ChecklistPicker\n","export default {\r\n    uploadImg\r\n}\r\n\r\nfunction uploadImg(ev) {\r\n    console.log('yes');\r\n    const CLOUD_NAME = \"dhz1jk4k6\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0])\r\n    formData.append('upload_preset', 'jtim2mm3');\r\n\r\n    return fetch(UPLOAD_URL, {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => console.error(err))\r\n}\r\n\r\n","import React, { useRef } from 'react'\nimport { RiCloseLine } from 'react-icons/ri'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport Color, { Palette } from \"color-thief-react\";\n\nimport cloudinaryService from '../../../services/cloudinary.service';\nimport { utilService } from '../../../services/util.service';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\n\nconst HalfBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        { backgroundImage: \"url(\" + props.cover.background + \")\", backgroundSize: 'cover' }}\n`;\n\n\nconst FullBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        {\n            backgroundImage: props.cover.theme === 'light' ?\n                'linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(' + props.cover.background + ')'\n                : 'linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(' + props.cover.background + ')', backgroundSize: 'cover', backgroundPosition: '50%'\n        }\n\n    }\n`;\n\nconst CoverPicker = ({ task, onCloseModal, onTaskUpdated, bounds, exceptionRef }) => {\n    const [selectedCover, setSelectedCover] = useState(task.cover)\n    const [loading, setLoading] = useState(false);\n\n    const wrapperRef = useRef(null)\n    \n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const handleSelected = (cover) => {\n        const taskCopy = { ...task }\n        if (cover.id) {\n            setSelectedCover({ ...selectedCover, background: cover.url, type: 'img' })\n            taskCopy.cover.type = 'img'\n            taskCopy.cover.background = cover.url\n        } else {\n            setSelectedCover({ ...selectedCover, background: cover, type: 'color' })\n            taskCopy.cover.type = 'color'\n            taskCopy.cover.background = cover\n        }\n        onTaskUpdated(taskCopy)\n    }\n    const handleLayout = (isFull) => {\n        if (!task.cover.background) return;\n        setSelectedCover({ ...selectedCover, isFull: isFull })\n        const taskCopy = { ...task }\n        taskCopy.cover.isFull = isFull\n        onTaskUpdated(taskCopy)\n    }\n    const handleThemeChange = (theme) => {\n        if (theme === selectedCover.theme) return;\n        setSelectedCover({ ...selectedCover, theme: theme })\n        const taskCopy = { ...task }\n        taskCopy.cover.theme = theme\n        onTaskUpdated(taskCopy)\n    }\n    const handleUpload = async (ev) => {\n        console.log('yes mame');\n        setLoading(true);\n        const res = await cloudinaryService.uploadImg(ev);\n        const { url } = res;\n        setSelectedCover({ ...selectedCover, background: url, type: 'img' })\n        const taskCopy = { ...task }\n        const img = { id: utilService.makeId(), url: url, isCover: true }\n        taskCopy.images.push(img)\n        taskCopy.cover.background = url\n        taskCopy.cover.type = 'img'\n        onTaskUpdated(taskCopy)\n        setLoading(false);\n    }\n    const handleRemove = () => {\n        setSelectedCover({ ...selectedCover, background: null, type: null, isFull: null, theme: null })\n        const taskCopy = { ...task }\n        taskCopy.cover = { ...taskCopy.cover, background: null, type: null, isFull: null, theme: null }\n        // console.log('task', taskCopy);\n        onTaskUpdated(taskCopy)\n        onCloseModal()\n    }\n    return (\n\n        <div className={`pop-up cover-picker ${bounds ? '' : 'absolute'}`} ref={wrapperRef} style={bounds}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Cover</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <span className=\"pop-up-title\">Size</span>\n            <div className=\"cover-size-picker\">\n                <FullBgcWrapper\n                    cover={selectedCover}\n                    className={'cover-size ' + (task.cover.background ? (selectedCover.isFull ? 'selected' : '') : 'disabled')}\n                    onClick={() => handleLayout(true)}\n                >\n                    <div className={`line-wrapper ${task.cover.type === 'img' ? (task.cover.theme === 'dark' ? 'dark' : '') : ''}`}>\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </FullBgcWrapper>\n                <div\n                    className={'cover-size half ' + (task.cover.background ? (selectedCover.isFull ? '' : 'selected') : 'disabled')}\n                    onClick={() => handleLayout(false)}>\n                    <HalfBgcWrapper className=\"half\" cover={selectedCover}></HalfBgcWrapper>\n                    <div className=\"line-wrapper\">\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </div>\n            </div>\n            {task.cover.background && <button className=\"modal-btn\" onClick={handleRemove}>Remove Cover</button>}\n            {(selectedCover.type === 'img' && selectedCover.isFull) &&\n                <div className=\"cover-txt-color\">\n                    <span className=\"pop-up-title\">Text color</span>\n                    <div className=\"flex justify-center\">\n                        <div\n                            onClick={() => handleThemeChange('light')}\n                            className=\"cover-txt light\"\n                            style={{ backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{task.title}</h3>\n                        </div>\n                        <div\n                            onClick={() => handleThemeChange('dark')}\n                            className=\"cover-txt dark\"\n                            style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{task.title}</h3>\n                        </div>\n                    </div>\n                </div>}\n\n            <span className=\"pop-up-title\">Colors</span>\n            <div className=\"cover-palette\">\n                {coverColors.map((color, idx) => (\n                    <span\n                        className={'cover-color ' + (color === selectedCover.background ? 'selected' : '')}\n                        style={{ backgroundColor: color }}\n                        key={idx}\n                        onClick={() => handleSelected(color)}\n                    ></span>\n                ))}\n            </div>\n            {task.images.length > 0 && <span className=\"pop-up-title\">Images</span>}\n            {task.images.length > 0 &&\n                <div className=\"cover-img-wrapper\">\n                    {task.images.map(img => (\n                        <span\n                            // check id in case the same img has been uploaded\n                            className={'cover-img-preview ' + ((img.url + img.id) === (selectedCover.background + img.id) ? 'selected' : '')}\n                            style={{ backgroundImage: `url(${img.url})` }}\n                            onClick={() => handleSelected(img)}\n                            key={img.id}></span>\n                    ))}\n                </div>}\n            <div className=\"upload-img-container flex space-between align-center\">\n                <p>Upload image:</p>\n                <input onChange={handleUpload} id=\"file\" type=\"file\" title=\"Upload Image\" />\n                <label className=\"btn-3\" htmlFor=\"file\">\n                    {!loading ? <span>Upload</span> : <ScaleLoader height={9} width={5} color={\"#2c3e50\"} loading={loading} />}\n                </label>\n            </div>\n            <hr className=\"divider\" />\n        </div>\n    )\n}\n\nexport default CoverPicker\n","import React, { useRef } from 'react'\nimport { useState } from 'react'\nimport LabelPicker from './LabelPicker'\nimport DatePicker from './DatePicker'\nimport ChecklistPicker from './checklist-cmps/ChecklistPicker'\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide'\nimport CoverPicker from './CoverPicker'\nimport { useEffect } from 'react'\nimport { BsLockFill } from 'react-icons/bs'\nimport { useCallback } from 'react'\n\nconst TaskActions = ({ task, labels, onUpdateTask, onLabelsUpdated, onAddActivity }) => {\n    const sidebarRef = useRef(null)\n    const [currAction, setCurrAction] = useState(null)\n\n    // useOnClickOutside(wrapperRef, () => {\n    //     console.log('yes');\n\n    //     if (currAction) {\n    //         closeModal()\n    //     }\n    // });\n\n    const [bounds, setBounds] = useState(null)\n    const ref = useRef(null)\n\n    const toggle = (ev, isActive) => {\n        ref.current = ev.target.id\n        const { top, left, height } = ev.target.getBoundingClientRect();\n        const res = window.innerWidth - left - 304\n\n        if (res < 50 && window.innerWidth > 770) {\n            setBounds({ top: top + height, left: left - 100 })\n        } else {\n            setBounds({ top: top + height, left: left - 50 })\n        }\n        if (isActive === currAction) {\n            setCurrAction(null)\n            setBounds(null)\n            ref.current = null\n        } else {\n            setCurrAction(isActive)\n        }\n    }\n\n    const updateWidthAndHeight = useCallback(() => {\n        if (ref.current) {\n            const activeEl = document.getElementById(ref.current)\n            const { top, left, height } = activeEl.getBoundingClientRect();\n            const res = window.innerWidth - left - 304\n            if (res < 50) {\n                setBounds({ top: top + height, right: 0 })\n            }\n            else {\n                setBounds({ top: top + height, left: left })\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        if (currAction) {\n            window.addEventListener(\"resize\", updateWidthAndHeight);\n        } else {\n            window.removeEventListener(\"resize\", updateWidthAndHeight)\n        }\n    }, [currAction])\n\n\n\n    const closeModal = () => {\n        setCurrAction(null)\n        ref.current = null\n    }\n\n    return (\n        <div className=\"modal-sidebar\" ref={sidebarRef}>\n            <h3>Add to card</h3>\n            <button id=\"sidebar-labels\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isLabelActive')}>Labels</button>\n            {currAction === 'isLabelActive' &&\n                <LabelPicker\n                    bounds={bounds}\n                    task={task}\n                    labels={labels}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask}\n                    labelsUpdated={onLabelsUpdated}\n                    exceptionRef={sidebarRef}\n                />}\n            <button className=\"modal-btn\" >Members</button>\n            <button id=\"sidebar-checklist\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isChecklistActive')}>Checklist</button>\n            {currAction === 'isChecklistActive' &&\n                <ChecklistPicker\n                    task={task}\n                    bounds={bounds}\n                    onTaskUpdated={onUpdateTask}\n                    onCloseModal={closeModal}\n                    exceptionRef={sidebarRef}\n                />}\n            <button id=\"sidebar-date\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isDueDateActive')}>Due date</button>\n            {currAction === 'isDueDateActive' &&\n                <DatePicker\n                    bounds={bounds}\n                    task={task}\n                    onTaskUpdated={onUpdateTask}\n                    onAddActivity={onAddActivity}\n                    onCloseModal={closeModal}\n                    exceptionRef={sidebarRef}\n                />}\n            {/* Show the cover button only when cover is not set (displayed in header otherwise) */}\n            {!task.cover.background && <button id=\"sidebar-cover\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isCoverActive')}>Cover</button>}\n            {currAction === 'isCoverActive' &&\n                <CoverPicker\n                    bounds={bounds}\n                    exceptionRef={sidebarRef}\n                    task={task}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask}\n                     />}\n        </div>\n    )\n}\n\nexport default TaskActions\n","import React, { useState, useEffect } from 'react'\nimport TextEditor from '../../../TextEditor';\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport { useRef } from 'react';\nimport { BsTrash } from \"react-icons/bs\";\nimport { RiCloseLine } from 'react-icons/ri';\nimport { boardService } from '../../../../services/board.service';\nimport { useRouteMatch } from 'react-router-dom';\n\n\nconst ChecklistItem = ({ item, onSubmit, onRemoveItem, task }) => {\n    const [itemCopy, setItem] = useState({ ...item });\n    const [isEditing, setIsEditing] = useState(false);\n    const [displayMsg, setDisplayMsg] = useState(false);\n    const [unSavedTitle, setUnsavedTitle] = useState('');\n    const editorRef = useRef(null)\n    const initialRender = useRef(true)\n    const { url } = useRouteMatch();\n\n    useOnClickOutside(editorRef, () => {\n        if (isEditing) {\n            console.log('imhere', isEditing);\n            if (item.title !== itemCopy.title) {\n                setUnsavedTitle(itemCopy.title)\n                setItem(prevState => ({\n                    ...prevState,\n                    title: item.title,\n                }));\n                setDisplayMsg(true)\n            }\n            setIsEditing(false)\n            // setNewItem(null)\n        }\n    });\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            const newActivity = boardService.newActivity(\n                `${itemCopy.isDone ? `Completed  ${item.title} on this card` : `Marked ${item.title} incomplete on this card`}`,\n                `${itemCopy.isDone ? `Completed  ${item.title} on <a href=\"#${url}\">${task.title}</a>` : `Marked ${item.title} incomplete on <a href=\"#${url}\">${task.title}</a>`}`,\n                task.id\n            )\n            updateItem(newActivity)\n        } else {\n            initialRender.current = false\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [itemCopy.isDone])\n\n    const handleChange = (ev) => {\n        const target = ev.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name; setItem({ ...itemCopy, [name]: value });\n    }\n    const handleClose = () => {\n        // when escape is pressed on 'TextEditor.jsx'\n        setIsEditing(false)\n    }\n\n    const updateItem = (activity) => {\n        // if (itemCopy.title === item.title) return;\n        if (!itemCopy.title) {\n            setIsEditing(true)\n            return;\n        }\n        // console.log('dasdasds');\n        setIsEditing(false)\n        setDisplayMsg(false)\n        onSubmit({ ...itemCopy }, activity)\n    }\n\n    const handleRemove = () => {\n        onRemoveItem(itemCopy.id)\n    }\n    const startEditing = () => {\n        setItem(prevState => ({\n            ...prevState,\n            title: unSavedTitle,\n        }));\n        setIsEditing(true)\n    }\n    const discardUnsaved = () => {\n        setDisplayMsg(false)\n    }\n    return (\n        <div className=\"checklist-item\" >\n            <div className={'checklist-item-editor  ' + (itemCopy.isDone ? 'done' : '')}>\n                {itemCopy && !isEditing &&\n                    // <label for=\"checkbox-1\">\n                    <input type=\"checkbox\"  name=\"isDone\" checked={itemCopy.isDone} onChange={handleChange} />\n                    // </label>\n                }\n                <div className=\"item-title\" onClick={() => setIsEditing(true)} ref={editorRef}>\n                    <TextEditor\n                        text={itemCopy.title}\n                        onChange={handleChange}\n                        onSubmit={updateItem}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n                    {isEditing &&\n                        <div className=\"add-item-controls\">\n                            <button className=\"submit-btn\">Save</button>\n                            <button className=\"clear-btn icon-lg\" onClick={handleClose}>\n                                <RiCloseLine />\n                            </button>\n                            <div className=\"spacer\" onClick={handleClose}></div>\n                        </div>}\n                </div>\n                {!isEditing &&\n                    <button className=\"remove-item-btn clear-btn\" onClick={handleRemove}>\n                        <BsTrash />\n                    </button>}\n            </div>\n            {displayMsg && !isEditing &&\n                <p className=\"checklist-user-msg\">\n                    <span>You have unsaved edits on this field.</span>\n                    <button className=\"clear-btn\" onClick={startEditing}>View edits</button>\n                    <button className=\"clear-btn\" onClick={discardUnsaved}>Discard</button>\n                </p>}\n\n        </div>\n    )\n}\n\nexport default ChecklistItem\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport ChecklistItem from './ChecklistItem';\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\nimport { toggleInitialAddition } from '../../../../store/actions/generalAction';\nimport { RiCloseLine } from 'react-icons/ri';\nimport { useRouteMatch } from 'react-router-dom';\n\nconst TaskChecklist = ({ task, checklist, onUpdateTask }) => {\n    const [newItem, setNewItem] = useState(null);\n    const [checklistTitle, setChecklistTitle] = useState(checklist.title);\n    const [progress, setProgress] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n    const { url } = useRouteMatch();\n    const dispatch = useDispatch()\n    const isInitialAddition = useSelector(state => state.general.isInitialAddition)\n\n    useEffect(() => {\n        // Checking wether or not to start editing in TaskChecklist cmp on initial render\n        if (isInitialAddition) {\n            addItem()\n        }\n    }, [])\n\n\n    useEffect(() => {\n        const doneCount = checklist.listItems.reduce((acc, item) => {\n            if (item.isDone) acc++\n            return acc\n        }, 0)\n        let donePrecent = Math.round((doneCount * 100) / checklist.listItems.length)\n        setProgress(donePrecent)\n    }, [checklist])\n\n    const addItem = () => {\n        const emptyItem = boardService.getEmptyListItem();\n        setNewItem(emptyItem)\n        setIsEditing(true);\n        if (isInitialAddition) {\n            dispatch(toggleInitialAddition(false))\n        }\n    }\n\n    const handleClose = () => {\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    const handleChange = (ev) => {\n        setNewItem({ ...newItem, [ev.target.name]: ev.target.value });\n    }\n    const handleChecklistChange = (ev) => {\n        setChecklistTitle(ev.target.value);\n    }\n\n    const updateChecklistTitle = () => {\n        const checklistCopy = { ...checklist };\n        checklistCopy.title = checklistTitle\n        const newActivity = boardService.newActivity(\n            `Renamed ${checklistCopy.title} from (${checklist.title})`,\n            `Renamed ${checklistCopy.title} from (${checklist.title}) on <a href=\"#${url}\">${task.title}</a>`,\n            task.id\n        )\n        updateTask(checklistCopy, newActivity);\n    }\n\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            setNewItem(null)\n        }\n    });\n\n    const removeItem = (itemId) => {\n        const checklistCopy = { ...checklist };\n        const idx = checklistCopy.listItems.findIndex(item => item.id === itemId)\n        if (idx !== -1) {\n            checklistCopy.listItems.splice(idx, 1)\n        }\n        updateTask(checklistCopy)\n    }\n\n    const updateChecklist = async (item, activity) => {\n        const checklistCopy = { ...checklist };\n        if (item) {\n            const idx = checklistCopy.listItems.findIndex(currItem => currItem.id === item.id)\n            if (idx !== -1) {\n                checklistCopy.listItems.splice(idx, 1, item) // update an item \n                await updateTask(checklistCopy, activity);\n            }\n        } else { // Add  item\n            if (!newItem.title) {\n                handleClose()\n                return;\n            }\n            // const newActivity = boardService.newActivity(\n            //     `Added ${newItem.title}  to ${checklist.title} on this card`,\n            //     `Added  ${newItem.title} to ${checklist.title} on <a href=\"#${url}/${task.id}\">${task.title}</a>`,\n            //     task.id\n            // )\n            checklistCopy.listItems.push(newItem)\n            await updateTask(checklistCopy);\n            addItem()\n        }\n    }\n\n    const updateTask = (updatedChecklist, activity) => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n\n        if (updatedChecklist) {\n            const idx = taskCopy.checklists.findIndex(currChecklist => currChecklist.id === updatedChecklist.id)\n            taskCopy.checklists.splice(idx, 1, updatedChecklist)\n        } else {\n            taskCopy.checklists = taskCopy.checklists.filter(currChecklist => currChecklist.id !== checklist.id) // Delete checklist\n            activity = boardService.newActivity(\n                `Removed ${checklist.title}  on this card`,\n                `Removed ${checklist.title} on <a href=\"#${url}\">${task.title}</a>`,\n                task.id\n            )\n        }\n        onUpdateTask(taskCopy, activity)\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    return (\n        <div className=\"task-checklist\">\n            <div className=\"section-title flex align-center\">\n                <TextEditor\n                    text={checklistTitle}\n                    onChange={handleChecklistChange}\n                    onInputBlur={updateChecklistTitle}\n                    type=\"h3\"\n                />\n                <button className=\"modal-btn\" onClick={() => updateTask()}>Delete</button>\n            </div>\n\n            {checklist.listItems.length > 0 &&\n                <Progress\n                    percent={progress}\n                />}\n            {checklist && checklist.listItems.map(item => (\n                <ChecklistItem\n                    key={item.id}\n                    onSubmit={updateChecklist}\n                    onRemoveItem={removeItem}\n                    item={item}\n                    task={task}\n                />\n            ))\n            }\n            {newItem && isEditing &&\n                <div className=\"add-item\" ref={wrapperRef}>\n                    <TextEditor\n                        onChange={handleChange}\n                        onSubmit={updateChecklist}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n\n                    <div className=\"add-item-controls\" >\n                        <button className=\"submit-btn\" onClick={() => updateChecklist()}>Save</button>\n                        <button className=\"clear-btn icon-lg\" onClick={handleClose}>\n                            <RiCloseLine />\n                        </button>\n                        <div className=\"spacer\" onClick={handleClose}></div>\n                    </div>\n                </div>\n\n            }\n            {!isEditing && <button className=\"modal-btn\" onClick={addItem} >Add an item</button>}\n        </div>\n    )\n}\n\nexport default TaskChecklist\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport Moment from 'react-moment';\nimport { useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst calendarStrings = {\n    lastDay: '[Yesterday at] LT',\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    lastWeek: '[last] dddd [at] LT',\n    nextWeek: 'dddd [at] LT',\n    sameElse: 'MMMM D [at] LT'\n};\n\nconst LIMIT = 5;\n\nconst ActivityLog = ({ taskId = null }) => {\n    const filteredActivities = createSelector(\n        state => (\n            state.board.currBoard.activities\n        ),\n        activities => taskId ? activities.filter(activity => activity.taskId === taskId) : activities\n    );\n    const activities = useSelector(filteredActivities)\n\n    const [showContent, setShowContent] = useState(true);\n    const [showMore, setShowMore] = useState(true);\n    const [list, setList] = useState(activities.slice(0, LIMIT));\n    const [index, setIndex] = useState(LIMIT);\n\n    useEffect(() => {\n        setList(activities.slice(0, LIMIT))\n        setShowMore(true)\n        setIndex(LIMIT)\n    }, [activities.length])\n\n    const loadMore = () => {\n        console.log('firstinDEX:', index)\n        const newIndex = index + LIMIT;\n        const newShowMore = newIndex <= (activities.length - 1);\n        console.log('activities: ', activities, ' index: ', index, ' newIndex: ', newIndex);\n        const newList = list.concat(activities.slice(index, newIndex));\n        setIndex(newIndex);\n        setList(newList);\n        setShowMore(newShowMore);\n    }\n    const toggleContent = () => {\n        setShowContent(prevState => (!prevState));\n    }\n\n    return (\n        <div className=\"activity-log\">\n            {taskId && <button className=\"modal-btn\" onClick={toggleContent}>{showContent ? 'Hide details' : 'Show details'}</button>}\n            {showContent && list.length > 0 && list.map(activity => (\n                <div className='activity-content' key={activity.id}>\n                    {taskId ?\n                        <p className=\"activity-desc\" dangerouslySetInnerHTML={{ __html: activity.cardTxt }}></p> :\n                        <p className=\"activity-desc\" dangerouslySetInnerHTML={{ __html: activity.boardTxt }}></p>}\n                    <Moment calendar={calendarStrings}>{activity.date}</Moment>\n                </div>\n            ))}\n            {showContent && showMore && activities.length > LIMIT && <button className=\"clear-btn show-more-btn\" onClick={loadMore}> Load More </button>}\n        </div>\n    )\n}\n\nexport default ActivityLog\n","import React, { useState, useContext, useEffect, useRef, useMemo } from 'react'\nimport { useParams, useHistory, useRouteMatch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loadTask, saveBoard, updateTask } from '../store/actions/boardActions';\nimport Color from 'color-thief-react';\nimport { boardService } from '../services/board.service';\nimport Moment from 'react-moment';\n\nimport TextEditor from '../components/TextEditor';\nimport TaskActions from '../components/task-cmps/task-actions/TaskActions';\nimport TaskChecklist from '../components/task-cmps/task-actions/checklist-cmps/TaskChecklist';\nimport LabelList from '../components/task-cmps/task-actions/LabelList';\nimport ActivityLog from '../components/ActivityLog';\nimport useOnClickOutside from '../hooks/useOnClickOutSide';\nimport { RiAddCircleLine, RiArrowDownSLine, RiArrowDropDownLine, RiCloseLine } from 'react-icons/ri';\n\nimport CoverPicker from '../components/task-cmps/task-actions/CoverPicker';\nimport LabelPicker from '../components/task-cmps/task-actions/LabelPicker';\nimport DatePicker from '../components/task-cmps/task-actions/DatePicker';\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday]',\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    sameElse: 'MMMM D'\n};\nconst TaskDetails = () => {\n\n    const dispatch = useDispatch()\n    const currTask = useSelector(state => state.board.currTask)\n    const board = useSelector(state => state.board.currBoard)\n\n    const [activeAction, setActiveAction] = useState(null)\n    const [taskCopy, setTask] = useState(null)\n\n    const wrapperRef = useRef(null)\n    const modalHeaderRef = useRef(null)\n    const exceptionRef = useRef(null)\n\n    const { taskId } = useParams();\n    const history = useHistory();\n    const { url } = useRouteMatch();\n\n    useEffect(() => {\n        const load = async () => {\n            const res = await dispatch(loadTask(taskId))\n            if (!res) {\n                history.push(`/board/${board._id}`)\n            }\n        }\n        load()\n    }, [])\n\n\n\n    useEffect(() => {\n\n        document.body.style.overflowX = 'hidden'\n        return () => {\n            // document.body.style.overflowX = 'unset'\n            document.body.style.overflowX = 'unset'\n\n        }\n    }, [])\n\n\n    useEffect(() => {\n        const setTaskCopy = () => {\n            if (currTask) {\n                setTask({ ...currTask })\n            }\n        }\n        setTaskCopy()\n    }, [currTask])\n\n\n\n\n    const closeModal = () => {\n        history.push(`/board/${board._id}`)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        console.log('paam ahat')\n        closeModal()\n    });\n    useOnClickOutside(modalHeaderRef, () => {\n        console.log('paam ahat')\n        setActiveAction(null)\n    });\n\n    const handleChange = (ev) => {\n        setTask({ ...taskCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const onUpdateTask = async (task, activity = null) => {\n        if (task) {\n            await updateBoard({ ...task }, activity)\n        } else {\n            updateBoard({ ...taskCopy })\n        }\n    }\n\n    const updateBoard = async (task, activity) => {\n        dispatch(updateTask(task))\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        if (activity) {\n            boardCopy.activities.unshift(activity)\n            // boardCopy.activities = []\n        }\n        boardCopy.taskLists.forEach(taskList => {\n            let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n            if (idx !== -1) {\n                taskList.tasks.splice(idx, 1, task)\n            }\n        })\n        await dispatch(saveBoard(boardCopy))\n    }\n\n    const updateBoardLabels = (updatedLabels, editedLabel) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.labels = updatedLabels\n        boardCopy.taskLists.forEach(taskList => {\n            taskList.tasks.forEach(task => {\n                let currLabel = task.labels.find(label => label.id === editedLabel.id)\n                if (currLabel) {\n                    currLabel.title = editedLabel.title\n                }\n            })\n        })\n        dispatch(saveBoard(boardCopy))\n    }\n\n    const addActivity = async (activity) => {\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.activities.unshift(activity)\n        await dispatch(saveBoard(boardCopy))\n    }\n    const handleIsDone = (ev) => {\n        ev.stopPropagation()\n        ev.preventDefault()\n        const { checked } = ev.target\n        const updatedTask = { ...taskCopy }\n        updatedTask.isDone = checked\n        const newActivity = boardService.newActivity(\n            `Marked the due date ${updatedTask.isDone ? 'complete' : 'incomplete'}`,\n            `Marked the due date ${updatedTask.isDone ? 'complete' : 'incomplete'} on <a href='#${url}'>${updatedTask.title}</a>`,\n            updatedTask.id\n        )\n        updateBoard(updatedTask, newActivity)\n    }\n    const handleActiveAction = (ev, action) => {\n        const { target } = ev\n        exceptionRef.current = target\n        if (action === activeAction) {\n            setActiveAction(null)\n            console.log('yes same');\n            return\n        } else {\n            setActiveAction(action)\n        }\n    }\n    const isDue = useMemo(() => {\n        if (currTask) {\n            console.log('hi');\n            let date = new Date()\n            date.setHours(0, 0, 0, 0)\n            date.setDate(date.getDate() + 1)\n            if (currTask.isDone) {\n                return { class: 'task-complete', txt: 'Complete' }\n            }\n            if (date.getTime() === currTask.dueDate) {\n                return { class: 'due-soon', txt: 'Due soon' }\n            } if (currTask.dueDate <= Date.now()) {\n                return { class: 'over-due', txt: 'Over due' }\n            } else return ''\n\n        }\n\n    }, [currTask]);\n    return (\n        // <section className='task-details-wrapper'>\n        <div className='task-details'>\n            <div className={'cover'} ></div>\n            {taskCopy && currTask &&\n                <div className='task-modal' ref={wrapperRef}>\n                    {taskCopy.cover.background &&\n                        <Color src={taskCopy.cover.background} crossOrigin='anonymous' format='hex'>\n                            {({ data }) => {\n                                return (\n                                    <div\n                                        className='modal-header '\n                                        style={{ backgroundImage: `url(${taskCopy.cover.background})`, backgroundColor: data ? data : taskCopy.cover.background }}\n                                    >\n                                        {taskCopy.cover.background &&\n                                            <button className='modal-btn' onClick={(ev) => handleActiveAction(ev, 'coverPicker')}>\n                                                Cover</button>}\n\n                                        {activeAction === 'coverPicker' &&\n                                            <CoverPicker // outside TaskActions\n                                                task={taskCopy}\n                                                onTaskUpdated={onUpdateTask}\n                                                onCloseModal={() => handleActiveAction('coverPicker')}\n                                                wrapperRef={modalHeaderRef}\n                                                exceptionRef={exceptionRef}\n                                            />}\n                                    </div>\n                                )\n                            }}\n                        </Color>\n                    }\n                    <a onClick={closeModal} className='modal-close-btn icon-lg' >\n                        <RiCloseLine />\n                    </a>\n                    <div className='modal-module'>\n                        <div className='task-title'>\n                            <TextEditor type='h3' name='title' text={taskCopy.title} onChange={handleChange} onInputBlur={onUpdateTask} />\n                        </div>\n                    </div>\n                    <div className='task-content'>\n                        <div className='left-side'>\n                            <div className='modal-module'>\n                                <div className='task-labels-date'>\n                                    {taskCopy.labels.length > 0 &&\n                                        <div className=\"task-labels\">\n                                            <h3 className='task-item-title'>Labels</h3>\n                                            <div className='task-labels-list' >\n                                                <LabelList\n                                                    expandMode={true}\n                                                    onLabelClicked={(ev) => handleActiveAction(ev, 'labelPicker')}\n                                                    labels={taskCopy.labels} />\n                                            </div>\n                                            {activeAction === 'labelPicker' &&\n                                                <LabelPicker // outside TaskActions\n                                                    task={taskCopy}\n                                                    onTaskUpdated={onUpdateTask}\n                                                    labelsUpdated={updateBoardLabels}\n                                                    onCloseModal={() => handleActiveAction('labelPicker')}\n                                                    labels={board.labels}\n                                                    exceptionRef={exceptionRef}\n                                                />}\n                                        </div>}\n                                    {taskCopy.dueDate &&\n                                        <div className='task-due-date'>\n                                            <h3 className='task-item-title'>Due date</h3>\n                                            <div className='modal-btn' onClick={(ev) => handleActiveAction(ev, 'datePicker')}>\n                                                <label>\n                                                    <input className='css-checkbox' type='checkbox' name='isDone' checked={taskCopy.isDone} onChange={handleIsDone} />\n                                                    <i></i>\n                                                </label>\n                                                <Moment calendar={calendarStrings} date={taskCopy.dueDate} />\n                                                <span className={'task-badge ' + (isDue ? isDue.class : '')}>{isDue.txt}</span>\n                                                <RiArrowDownSLine className=\"icon-lg\" />\n\n                                            </div>\n\n                                            {activeAction === 'datePicker' &&\n                                                <DatePicker\n                                                    task={taskCopy}\n                                                    onTaskUpdated={onUpdateTask}\n                                                    exceptionRef={exceptionRef}\n                                                    onCloseModal={() => handleActiveAction('datePicker')}\n                                                />}\n                                        </div>}\n                                </div>\n                            </div>\n                            <div className='modal-module'>\n                                <div className='task-description'>\n                                    <h3 className='section-title'>Description</h3>\n                                    <TextEditor type='p' name='description' text={taskCopy.description} onChange={handleChange} onInputBlur={onUpdateTask} isWide={true} placeholder='Add a more detailed description…' />\n                                </div>\n                            </div>\n                            {taskCopy.checklists.length > 0 && <div className='modal-module'>\n                                {taskCopy.checklists.map(checklist => (\n                                    <TaskChecklist\n                                        checklist={checklist}\n                                        key={checklist.id}\n                                        task={taskCopy}\n                                        onUpdateTask={onUpdateTask}\n                                    />\n\n                                ))}\n                            </div>}\n                            <div className='modal-module'>\n                                <h3 className='section-title'>Activity</h3>\n                                <ActivityLog taskId={taskCopy.id} />\n                            </div>\n                        </div>\n                        <div className='right-side'>\n                            {board && <TaskActions\n                                task={taskCopy}\n                                labels={board.labels}\n                                onUpdateTask={onUpdateTask}\n                                onLabelsUpdated={updateBoardLabels}\n                                onAddActivity={addActivity}\n                            />}\n                        </div>\n                    </div>\n                </div>\n            }\n        </div >\n        // </section>\n    )\n}\n\nexport default TaskDetails\n","import React, { useState, useRef } from 'react'\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\n\nimport { boardService } from '../../services/board.service'\n\nimport { RiCloseLine } from 'react-icons/ri'\nimport TextEditor from '../TextEditor'\n\n\nconst AddTaskList = ({ board, onBoardUpdated }) => {\n    const [newTaskList, setTaskList] = useState(null)\n    const wrapperRef = useRef(null)\n\n    const getEmptyTaskList = () => {\n        const emptyTaskList = boardService.getEmptyList()\n        setTaskList(emptyTaskList)\n    }\n    const handleChange = (ev) => {\n        setTaskList({ ...newTaskList, [ev.target.name]: ev.target.value })\n    }\n\n    const addTaskList = () => {\n        if (!newTaskList.title) return\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.taskLists.push(newTaskList);\n        onBoardUpdated(boardCopy)\n        setTaskList(null)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        setTaskList(null)\n    });\n\n    return (\n        <div className=\"list-wrapper \">\n            {newTaskList ?\n                <div className=\"list add-list\" ref={wrapperRef}>\n                    <TextEditor\n                        isFocused={true}\n                        onChange={handleChange}\n                        onSubmit={addTaskList}\n                        name=\"title\"\n                        type=\"p\"\n                    />\n                    <div className=\"add-list-controls\">\n                        <button className=\"submit-btn\" onClick={addTaskList}>Add List</button>\n                        <button onClick={() => setTaskList(null)} className=\"clear-btn icon-lg\">\n                            <RiCloseLine />\n                        </button>\n                    </div>\n                </div>\n                :\n                <button className=\"modal-btn\" onClick={getEmptyTaskList}>Add another list </button>\n            }\n        </div>\n    )\n}\n\nexport default AddTaskList\n","import React, { useCallback, useEffect, useMemo } from 'react'\nimport { useState } from 'react'\nimport { RiArrowLeftSLine } from 'react-icons/ri'\nimport RiseLoader from \"react-spinners/RiseLoader\";\nimport { css } from \"@emotion/core\";\nconst override = css`\n  position: fixed;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n`;\n\nconst BoardBgPicker = ({ onGoBack, board, onBoardUpdated }) => {\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const imgs = [\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389449/Taskflow%20backgrounds/cacjncpn6qp4qivznyaj.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389449/Taskflow%20backgrounds/jukyghlsvncbyovcqvce.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389422/Taskflow%20backgrounds/2.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389420/Taskflow%20backgrounds/itjhqv6u26jigvxmzwsi.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389420/Taskflow%20backgrounds/sltgv2lrkmcbivdxxmb3.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389410/Taskflow%20backgrounds/yeozivyoaywjmj4hciwp.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389409/Taskflow%20backgrounds/idhd2wg760g7xa8vsze2.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389400/Taskflow%20backgrounds/t9jpmstlb7oaijmbynmw.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389394/Taskflow%20backgrounds/ponbl1heu65x22wus4ui.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389391/Taskflow%20backgrounds/nnobztxqgr82swa61ne4.jpg'\n    ]\n    const [bgType, setBgType] = useState(null)\n\n    const handleGoBack = () => {\n        if (bgType) {\n            setBgType(null)\n        } else {\n            onGoBack()\n        }\n    }\n    const [loading, setLoading] = useState(false);\n\n\n    const handleStyle = (background, type) => {\n        if (background === board.style.background) return;\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.style = { background: background, type: type }\n        // // setLoading(true)\n        onBoardUpdated(boardCopy)\n    }\n\n    return (\n        <div className=\"board-menu-bg-picker\">\n            {console.log('rednered')}\n\n            <button className=\"pop-up-back-btn clear-btn icon-lg\" onClick={handleGoBack} >\n                <RiArrowLeftSLine />\n            </button>\n            {!bgType && <div className=\"bg-picker-controls\">\n                <div className=\"bg-picker-btn\" onClick={() => setBgType('photos')}>\n                    <span className=\"photos image\"></span>\n                    <span className=\"bg-btn-title\">Photos</span>\n                </div>\n                <div className=\"bg-picker-btn\" onClick={() => setBgType('colors')}>\n                    <span className=\"colors image\"></span>\n                    <span className=\"bg-btn-title\">Colors</span>\n                </div>\n                {/* <button className=\"clear-btn bg-picker-btn photos\" onClick={() => setBgType('photos')}><span className=\"bg-btn-title\">Photos</span></button>\n                <button className=\"clear-btn bg-picker-btn colors\" onClick={() => setBgType('colors')}><span className=\"bg-btn-title\">Colors</span></button> */}\n            </div>}\n            <RiseLoader\n                css={override}\n                size={15} color={\"#2c3e50\"} loading={loading} />\n\n            { bgType === 'photos' &&\n                <div className=\"bg-section-wrapper\">\n                    {imgs.map((img, index) => (\n                        <span\n                            style={{ backgroundImage: `url(${img})` }}\n                            className={'bg-item'}\n                            key={index}\n                            onClick={() => handleStyle(img, 'img')}\n                        >\n                        </span>\n                    ))}\n                </div>}\n            {bgType === 'colors' &&\n                <div className=\"bg-section-wrapper\">\n                    {coverColors.map((color, idx) => (\n                        <span\n                            className={'bg-item'}\n                            style={{ backgroundColor: color }}\n                            key={idx}\n                            onClick={() => handleStyle(color, 'color')}\n                        >\n                        </span>\n                    ))}\n                </div>}\n            {/* {loading && <div className=\"loading\">         */}\n\n            {/* </div>} */}\n        </div >\n    )\n}\n\nexport default BoardBgPicker\n","import React, { useEffect, useState } from 'react'\nimport { useRef } from 'react'\nimport { RiArrowLeftSLine, RiCloseLine } from 'react-icons/ri'\nimport { FaListUl } from \"react-icons/fa\";\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\nimport ActivityLog from '../ActivityLog'\nimport BoardBgPicker from './BoardBgPicker'\nimport { useHistory, } from 'react-router-dom';\n\nconst BoardMenu = ({ isMenuOpen, closeMenu, menuBtnRef, board, onBoardUpdated }) => {\n    const history = useHistory();\n    const wrapperReff = useRef(null)\n    const [selectedAction, setAction] = useState(null)\n\n    const selectAction = (action) => {\n        switch (action) {\n            case 'backgroundPicker':\n                setAction({ ...selectedAction, type: action, title: 'Background' })\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleGoBack = () => {\n        setAction(null)\n    }\n    useOnClickOutside(wrapperReff, () => {\n        if (isMenuOpen) {\n            closeMenu()\n        }\n    }, menuBtnRef);\n\n    useEffect(() => {\n        if (isMenuOpen) {\n            setAction(null)\n        }\n    }, [isMenuOpen])\n\n    useEffect(() => {\n        return history.listen((location) => {\n            if (wrapperReff.current.classList.contains('menu-open')) {\n                closeMenu()\n            }\n        })\n    }, [history])\n\n\n\n    return (\n        <div className={`board-menu ${isMenuOpen ? 'menu-open' : '  '}`} ref={wrapperReff}>\n            <div className=\"pop-up-header\">\n                <h3>{selectedAction ? selectedAction.title : 'Menu'}</h3>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={closeMenu}>\n                    <RiCloseLine />\n                </button>\n\n            </div>\n            { !selectedAction ?\n                <div className=\"board-menu-content\">\n                    <div className=\"board-menu-nav\">\n                        <button className=\"clear-btn board-menu-nav-btn\" onClick={() => selectAction('backgroundPicker')}>Change background</button>\n                        <button className=\"clear-btn board-menu-nav-btn\" onClick={() => selectAction('boardName')}>Change board name</button>\n                        <button className=\"clear-btn board-menu-nav-btn\">Delete board</button>\n                    </div>\n                    <div>\n                        <div className=\"section-title\">\n                            <FaListUl className=\"icon-sm\" />\n                            {/* <GrList className=\"icon-sm\"/> */}\n                            <h4 className=\"\">Activity</h4>\n                        </div>\n\n                        <ActivityLog />\n                    </div>\n                </div> :\n                <div className=\"board-menu-content\">\n                    {selectedAction.type === 'backgroundPicker' && <BoardBgPicker onGoBack={handleGoBack} board={board} onBoardUpdated={onBoardUpdated} />}\n                    {/* {selectedAction === 'boardName' && <div>name</div>} */}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default BoardMenu\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { selectCurrBoard } from '../selectors/boardSelector'\nimport { getBoardById, saveBoard, setCurrBoard } from '../store/actions/boardActions'\nimport { Route, useRouteMatch, useParams, useHistory } from 'react-router-dom'\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { utilService } from '../services/util.service'\nimport { socketService } from '../services/socket.service';\n\n\nimport TaskList from '../components/task-cmps/TaskList'\nimport TaskDetails from './TaskDetails'\nimport AddTaskList from '../components/task-cmps/AddTaskList'\nimport { RiCloseLine } from 'react-icons/ri';\nimport BoardMenu from '../components/board-menu-cmps/BoardMenu';\nimport { boardService } from '../services/board.service';\n\n\n\nconst BoardDetails = () => {\n    const { boardId } = useParams();\n    let { path } = useRouteMatch();\n    let history = useHistory();\n    let { url } = useRouteMatch();\n\n    const initialRender = useRef(true)\n    const menuBtnRef = useRef(null)\n\n    const dispatch = useDispatch()\n    // const board = useSelector(state => state.board.currBoard, shallowEqual)\n\n    const board = useSelector(selectCurrBoard)\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n    const queryAttr = \"data-rbd-draggable-id\";\n\n    useEffect(() => {\n        const loadBoard = async () => {\n            try {\n                await dispatch(getBoardById(boardId))\n                // setLoading(false);\n            } catch (e) {\n                // setLoading(false);\n                history.push('/boards')\n            }\n        }\n        loadBoard()\n    }, [])\n\n    useEffect(() => {\n        if (initialRender.current && board) {\n            console.log('board.', board._id);\n            socketService.setup()\n            socketService.emit('board topic', board._id)\n            socketService.on('update board', updateCurrBoard);\n            initialRender.current = false\n        }\n\n    }, [board])\n\n\n    useEffect(() => {\n        return () => {\n            socketService.off('update board', updateCurrBoard);\n            socketService.terminate();  // clean up\n        };\n    }, [])\n\n    const updateList = async (taskList, activity = null) => {\n        // setLoading(true);\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        if (activity) {\n            boardCopy.activities.unshift(activity)\n        }\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n        boardCopy.taskLists.splice(idx, 1, taskList)\n        await dispatch(saveBoard(boardCopy))\n        // setLoading(false);\n        console.log('adterupdatelist');\n        // dispatch(setCurrBoard(boardCopy))\n    }\n\n    const updateBoard = useCallback((updatedBoard) => {\n        dispatch(saveBoard(updatedBoard))\n    }, [dispatch]);\n\n    // const updateBoard = async (updatedBoard) => {\n    //     await dispatch(saveBoard(updatedBoard))\n    // }\n\n    const updateCurrBoard = (updatedBoard) => {\n        dispatch(setCurrBoard(updatedBoard))\n    }\n\n    const removeList = (taskListId) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n        boardCopy.taskLists.splice(idx, 1)\n        updateBoard(boardCopy)\n    }\n    const onDragEnd = (result) => {\n        // Dropped outside the list\n\n        const { source, destination } = result;\n\n        if (!destination) {\n            return;\n        }\n        if ((source.index === destination.index) &&\n            (source.droppableId === destination.droppableId)) { // Check if  update is required\n            return\n        }\n\n        let tasklists = [...board.taskLists];\n        const newState = JSON.parse(JSON.stringify(board));\n\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\n            const items = utilService.reorder(tasklists, source.index, destination.index);\n            newState.taskLists = items;\n        } else {\n            const sIndex = +source.droppableId;\n            const dIndex = +destination.droppableId;\n            if (sIndex === dIndex) {\n                const items = utilService.reorder(tasklists[sIndex].tasks, source.index, destination.index);\n                newState.taskLists[sIndex].tasks = items;\n            }\n            else {\n                const res = utilService.move(tasklists[sIndex].tasks, tasklists[dIndex].tasks, source, destination);\n                newState.taskLists[sIndex].tasks = res[sIndex];\n                newState.taskLists[dIndex].tasks = res[dIndex];\n\n                const { fromList, toList, task } = { fromList: tasklists[sIndex].title, toList: tasklists[dIndex].title, task: tasklists[sIndex].tasks[source.index] }\n                const newActivity = boardService.newActivity(\n                    `Moved this card from ${fromList} to ${toList}`,\n                    `Moved  <a href=\"#${url}/${task.id}\">${task.title}</a> from ${fromList} to ${toList}`,\n                    task.id\n                )\n                newState.activities.unshift(newActivity)\n            }\n        }\n        updateCurrBoard(newState)\n        updateBoard(newState)\n    }\n\n    const getDraggedDom = draggableId => {\n        const domQuery = `[${queryAttr}='${draggableId}']`;\n        const draggedDOM = document.querySelector(domQuery);\n\n        return draggedDOM;\n    };\n\n    const toggleMenu = () => {\n        setIsMenuOpen(prevState => (!prevState));\n    }\n\n    console.log('rendered')\n    if (!board) {\n        return (<div style={{ paddingTop: '50px' }}>baba\n        </div>)\n    }\n    else return (\n\n        <section className=\"board-details\" style={board.style.type === 'color' ? { backgroundColor: `${board.style.background}` } : { backgroundImage: `url(${board.style.background})` }}>\n\n            <div className=\"board-header\">\n                <button>button2</button>\n                <button className=\"clear-btn open-menu-btn\" onClick={toggleMenu} ref={menuBtnRef}>\n                    <span className=\"icon-sm\"><BsThreeDots /></span><span>Menu</span>\n                </button>\n            </div>\n            <BoardMenu isMenuOpen={isMenuOpen} closeMenu={toggleMenu} menuBtnRef={menuBtnRef} board={board} onBoardUpdated={updateBoard} />\n\n            {\n                board &&\n                <DragDropContext\n                    onDragEnd={onDragEnd}>\n                    <Droppable droppableId=\"board\" type=\"lists\" direction='horizontal' >\n                        {(provided, snapshot) => (\n                            <div className=\"list-container\" ref={provided.innerRef} {...provided.droppableProps}>\n                                {board.taskLists && board.taskLists.map((taskList, index) => (\n                                    <Draggable key={taskList.id} draggableId={taskList.id} index={index} type=\"lists\">\n                                        {(provided, snapshot) => (\n\n                                            <TaskList\n                                                taskListIdx={index}\n                                                taskList={taskList}\n                                                onRemoveList={removeList}\n                                                onListUpdated={updateList}\n                                                innerRef={provided.innerRef}\n                                                provided={provided}\n                                            />\n                                        )}\n\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                                {/* {placeholderProps && snapshot.isDraggingOver && (\n                                <div\n                                    className=\"placeholder\"\n                                    style={{\n                                        left: placeholderProps.clientX,\n                                        height: placeholderProps.clientHeight,\n                                        width: placeholderProps.clientWidth,\n                                    }}\n                                />\n\n                            )} */}\n                                <AddTaskList board={board} onBoardUpdated={updateBoard} />\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            }\n            { board && <Route exact path={`${path}/:taskId`} component={TaskDetails} />}\n            {/* <div className=\"board-underlay\"  style={board.style.type === 'color' ? { backgroundColor: `${board.style.background}` } : { backgroundImage: `url(${board.style.background})` }}></div> */}\n        </section >\n    )\n}\n\nexport default BoardDetails\n\n\n\n\n","import React, { useEffect } from 'react'\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadBoards } from '../store/actions/boardActions'\n\nconst BoardsPage = () => {\n    const history = useHistory();\n\n    console.log('history', history);\n    // const { loadBoards, boards } = useContext(BoardContext)\n    const boards = useSelector(state => state.board.boards);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const getBoards = async () => {\n            await dispatch(loadBoards())\n            console.log('adsasd')\n        }\n        getBoards()\n    }, [])\n\n    return (\n        <div>\n            <h1>Boards new</h1>\n            {boards && boards.length && boards.map(board => (\n                <div key={board._id}>\n                    <NavLink to={`board/${board._id}`}>{board._id}</NavLink>\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\n\nexport default BoardsPage\n// export default connect(mapStateToProps, mapDispatchToProps)(BoardsPage);\n","import React, { lazy, Suspense } from 'react';\nimport { HashRouter as Router, Switch, Route, useHistory } from \"react-router-dom\";\n\nimport HomePage from './pages/HomePage';\nimport MainNav from './components/MainNav';\nimport BoardDetails from './pages/BoardDetails';\n\nimport BoardsPage from './pages/BoardsPage';\nimport { createBrowserHistory } from 'history';\n// const {BoardDetails} = React.lazy(() => import('./pages/BoardDetails'));\n// const history = createBrowserHistory()\n\nfunction App() {\n \n  // console.log('d',process.env)\n\n  return (\n    <main>\n      <Router>\n        <MainNav />\n        <Switch>\n          <Route path=\"/boards\" component={BoardsPage} />\n          <Suspense fallback={<h1 style={{ paddingTop: '50px', fontSize:'100px' }}>Still Loading…</h1>}>\n            <Route path=\"/board/:boardId\" component={BoardDetails} />\n          </Suspense>\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    boards: null,\n    currBoard: null,\n    currTask: null,\n    isExpanded: false\n};\n\nexport const boardReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_BOARDS':\n            return {\n                ...state,\n                boards: JSON.parse(JSON.stringify(action.boards))\n            };\n        case 'SET_BOARD':\n            return {\n                ...state,\n                // currBoard: action.currBoard\n                currBoard: { ...action.currBoard }\n            };\n        case 'SET_TASK':\n            let taskToUpdate;\n            state.currBoard.taskLists.forEach(taskList => {\n                taskList.tasks.find(task => {\n                    if (task.id === action.id) taskToUpdate = task\n                })\n            })\n            return {\n                ...state,\n                currTask: taskToUpdate ? { ...taskToUpdate } : null\n            };\n        case 'UPDATE_TASK':\n            return {\n                ...state,\n                currTask: { ...action.currTask }\n            }\n        case 'TOGGLE_LABELS':\n            return {\n                ...state,\n                isExpanded: !state.isExpanded\n            }\n        default:\n            return state\n    }\n}\n","const initialState = {\n   isInitialAddition:false\n};\n\nexport const generalReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_INITIAL_ADDITION':\n            return {\n                ...state,\n                isInitialAddition: action.isInitial\n            };\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { boardReducer } from './reducers/boardReducer';\nimport { generalReducer } from './reducers/generalReducer';\n\nconst store = createStore(combineReducers({\n    board: boardReducer,\n    general: generalReducer\n}), applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport App from './App.jsx';\nimport './styles/global.scss'\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n  {/* <React.StrictMode> */}\n    <App />\n  {/* </React.StrictMode> */}\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
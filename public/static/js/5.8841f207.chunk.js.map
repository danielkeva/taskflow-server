{"version":3,"sources":["hooks/useOnClickOutSide.js","components/card-cmps/card-actions/LabelList.jsx","components/card-cmps/CardPreview.jsx","hooks/useKeypress.jsx","components/TextEditor.jsx","components/card-cmps/ListMenu.jsx","components/card-cmps/CardList.jsx","store/actions/activityActions.js","components/card-cmps/card-actions/LabelPicker.jsx","components/card-cmps/card-actions/DatePicker.jsx","store/actions/generalAction.js","components/card-cmps/card-actions/checklist-cmps/ChecklistPicker.jsx","services/cloudinary.service.js","components/card-cmps/card-actions/CoverPicker.jsx","components/card-cmps/card-actions/CardActions.jsx","components/card-cmps/card-actions/checklist-cmps/ChecklistItem.jsx","components/card-cmps/card-actions/checklist-cmps/CardChecklist.jsx","components/ActivityLog.jsx","pages/CardDetails.jsx","components/card-cmps/AddCardList.jsx","components/board-menu-cmps/BoardBgPicker.jsx","components/board-menu-cmps/BoardMenu.jsx","pages/BoardDetails.jsx","services/http.service.js","services/board.service.js","store/actions/boardActions.js","services/util.service.js","services/socket.service.js"],"names":["useOnClickOutside","ref","handler","exceptionalRef","useEffect","listener","event","current","contains","target","console","log","document","addEventListener","removeEventListener","LabelList","labels","onLabelClicked","expandMode","dispatch","useDispatch","isExpanded","useSelector","state","board","handleClick","ev","preventDefault","toggleLabels","className","map","label","onClick","key","id","style","backgroundColor","color","title","Container","styled","div","props","cover","isFull","type","background","backgroundImage","minHeight","backgroundSize","display","fontSize","fontFamily","calendarStrings","lastDay","sameDay","nextDay","sameElse","CardPreview","card","index","url","useRouteMatch","doneCount","useMemo","checklists","reduce","totalCount","checklist","listItems","length","acc","item","isDone","checklistItemsAmount","isDue","dueDate","date","Date","setHours","setDate","getDate","getTime","now","draggableId","provided","draggableProps","dragHandleProps","innerRef","to","activeClassName","draggable","src","theme","dir","calendar","description","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","window","TextEditor","text","name","onInputBlur","isWide","isFocused","onChange","onSubmit","onEscape","placeholder","isEditing","setIsEditing","initialText","setInitialText","inputEl","useRef","enter","esc","focus","value","ModuleText","React","createElement","updateText","autoFocus","rows","defaultValue","onBlur","inputVal","test","ListMenu","onCloseMenu","onRemoveList","onAddCard","CardList","cardList","cardListIdx","onListUpdated","cardListCopy","setCardListCopy","newCard","setNewCard","isMenuOpen","setIsMenuOpen","wrapperRef","getEmptyCard","emptyCard","boardService","handleCardChange","updateList","updatedCardList","newActivity","addCard","a","clickSource","JSON","parse","stringify","cards","push","stopEditing","droppableId","addActivity","activity","getState","boardId","LabelPicker","onCloseModal","onCardUpdated","labelsUpdated","bounds","exceptionRef","selectedLabel","setSelectedLabel","handleChange","updateLabel","labelsCopy","labelIdx","findIndex","splice","cardCopy","cardLabelIdx","labelToEdit","find","idx","selectLabelToEdit","DatePicker","createActivity","timestamp","isRemoveActivity","moment","format","submitDate","toggleInitialAddition","isInitial","ChecklistPicker","sidebarRef","setChecklist","emptyChecklist","getEmptyCheckList","addChecklist","checklistCopy","uploadImg","UPLOAD_URL","formData","FormData","append","files","fetch","method","body","then","res","json","catch","err","error","HalfBgcWrapper","FullBgcWrapper","backgroundPosition","CoverPicker","selectedCover","setSelectedCover","loading","setLoading","handleSelected","handleLayout","handleThemeChange","handleUpload","cloudinaryService","img","utilService","makeId","isCover","images","htmlFor","height","width","CardActions","onUpdateCard","onLabelsUpdated","onAddActivity","currAction","setCurrAction","setBounds","toggle","isActive","getBoundingClientRect","top","left","innerWidth","updateWidthAndHeight","useCallback","getElementById","right","closeModal","isEqual","require","memo","onRemoveItem","itemCopy","setItem","displayMsg","setDisplayMsg","unSavedTitle","setUnsavedTitle","editorRef","initialRender","prevState","updateItem","checked","handleClose","prev","next","CardChecklist","newItem","setNewItem","checklistTitle","setChecklistTitle","progress","setProgress","isInitialAddition","general","addItem","donePrecent","Math","round","emptyItem","getEmptyListItem","removeItem","itemId","updateCard","updateChecklist","currItem","updatedChecklist","currChecklist","filter","percent","lastWeek","nextWeek","filteredActivities","createSelector","activities","_","cardId","selectFilteredActivities","showContent","setShowContent","showMore","setShowMore","list","setList","setIndex","history","useHistory","slice","parentNode","childNodes","handleAnchorClick","stopPropagation","href","getAttribute","cardTxt","options","forceBlock","boardTxt","newIndex","newShowMore","newList","concat","CardDetails","currCard","currBoard","activeAction","setActiveAction","setCard","modalHeaderRef","useParams","loadCard","_id","load","overflowX","updateBoard","boardCopy","cardLists","forEach","saveBoard","updateBoardLabels","updatedLabels","editedLabel","currLabel","handleActiveAction","action","class","txt","crossOrigin","data","updatedCard","AddCardList","onBoardUpdated","newCardList","setCardList","addCardList","emptyCardList","getEmptyList","override","css","BoardBgPicker","onGoBack","bgType","setBgType","handleStyle","size","BoardMenu","closeMenu","menuBtnRef","wrapperReff","selectedAction","setAction","listen","location","classList","selectAction","BoardDetails","path","getBoardById","loadBoard","getActivities","warn","loadActivities","socketService","setup","emit","on","updateCurrBoard","off","terminate","currList","updatedBoard","setCurrBoard","removeList","cardListId","toggleMenu","onDragEnd","result","source","destination","cardlists","newState","items","reorder","sIndex","dIndex","move","fromList","toList","direction","snapshot","droppableProps","exact","component","paddingTop","axios","Axios","create","withCredentials","endpoint","ajax","response","status","query","HttpService","getById","update","creatorId","membersId","comments","loadBoards","boards","prevBoard","savedBoard","possible","i","charAt","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","itemToAdd","startIndex","endIndex","Array","from","removed","droppableSource","droppableDestination","sourceClone","destClone","socket","io","eventName","cb"],"mappings":"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","file":"static/js/5.8841f207.chunk.js","sourcesContent":["// hook from https://usehooks.com/useOnClickOutside/\nimport { useEffect } from \"react\";\n\n// Hook\nfunction useOnClickOutside(ref, handler, exceptionalRef = null) {\n\n  useEffect(\n    () => {\n      const listener = event => {\n        if (!ref) return;\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          // console.log('Refsdasd')\n          return;\n        }\n        // Do nothing if  ANOTHER clicking ref's element or descendent elements \n        if (exceptionalRef !== null) {\n          if (!exceptionalRef.current || exceptionalRef.current.contains(event.target)) {\n            console.log('exceptionalRef', exceptionalRef)\n            return\n          }\n        }\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, exceptionalRef, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import React, { useState } from 'react';\nimport { IoMdAdd } from 'react-icons/io';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleLabels } from '../../../store/actions/boardActions';\n\n\nconst LabelList = ({ labels, onLabelClicked = null, expandMode }) => {\n    const dispatch = useDispatch()\n    const isExpanded = useSelector(state => state.board.isExpanded)\n\n    const handleClick = (ev) => {\n        ev.preventDefault();\n        if (onLabelClicked !== null) {\n            onLabelClicked(ev)\n        } else {\n            dispatch(toggleLabels()) // Using the store here to toggle all the labels in the board\n        }\n    }\n    return (\n\n        <div className=\"labels-list\">\n            {labels.map(label => (\n                <span\n                    onClick={handleClick}\n                    key={label.id}\n                    className={`label  ${isExpanded || expandMode ? 'label-expand' : ''}`}\n                    style={{ backgroundColor: label.color }}>\n                    <span className=\"label-title\">{label.title}</span>\n                </span>\n            ))}\n            {expandMode &&\n                <button className='modal-btn'  onClick={handleClick} >\n                    <IoMdAdd className=\"icon-md\" />\n                </button>}\n        </div>\n    )\n}\n\nexport default LabelList\n","import React, { useMemo } from 'react'\nimport { NavLink, useRouteMatch } from 'react-router-dom'\n\nimport LabelList from './card-actions/LabelList'\n\nimport Moment from 'react-moment';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components'\n\nimport { IoMdCheckboxOutline } from \"react-icons/io\";\nimport { GrTextAlignFull } from \"react-icons/gr\";\nimport { RiTimeLine } from \"react-icons/ri\";\n\n\nconst Container = styled.div`\n    ${props => props.cover.isFull ?\n        (props.cover.type === 'color' ?\n            { backgroundColor: props.cover.isFull ? props.cover.background : '' } :\n            { backgroundImage: 'url(' + props.cover.background + ')', minHeight: 235, backgroundSize: 'cover' }) : ''}\n            font-size:${props => props.cover.isFull ? '16px' : ''};\n            font-family:${props => props.cover.isFull ? 'LatoBold' : ''};\n\n            ${props => props.cover.isFull ?\n        {\n            display: 'flex',\n            fontSize: '16px',\n            fontFamily: 'LatoBold'\n        } :\n        ''}\n    `;\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday]',\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    sameElse: 'MMMM D'\n};\n\nconst CardPreview = ({ card, index }) => {\n    let { url } = useRouteMatch();\n\n    const doneCount = useMemo(\n        () =>\n            card.checklists.reduce((totalCount, checklist) => {\n                if (checklist.listItems.length > 0) {\n                    let checklistSum = checklist.listItems.reduce((acc, item) => {\n                        if (item.isDone) acc++\n                        return acc\n                    }, 0)\n                    totalCount += checklistSum\n                }\n                return totalCount\n            }, 0),\n        [card.checklists]\n    );\n    const checklistItemsAmount = useMemo(\n        () =>\n            card.checklists.reduce((acc, checklist) => {\n                if (checklist.listItems.length > 0) {\n                    acc += checklist.listItems.length\n                }\n                return acc\n            }, 0),\n        [card.checklists]\n    );\n\n    const isDue = useMemo(() => {\n        if (!card.dueDate) return;\n        // console.log('is due')\n        let date = new Date()\n        date.setHours(0, 0, 0, 0)\n        date.setDate(date.getDate() + 1)\n        if (date.getTime() === card.dueDate) {\n            return 'due-soon'\n        } else if (card.dueDate <= Date.now()) {\n            return 'over-due'\n        } else return ''\n        // }\n    }, [card.dueDate]);\n\n    return (\n\n        <Draggable draggableId={card.id} index={index} type=\"card\">\n\n            {provided => (\n                <div\n                    className='card-preview'\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}>\n                    <NavLink to={`${url}/${card.id}`} className='card-link' activeClassName='active' draggable='false'>\n                        <Container cover={card.cover}>\n                            {(card.cover.background && !card.cover.isFull) &&\n                                <div>\n                                    {card.cover.type === 'color' ?\n                                        <div\n                                            className={card.cover.background ? 'card-cover' : ''}\n                                            style={{ backgroundColor: card.cover.background }}\n                                        ></div> :\n                                        <img src={card.cover.background} className='card-img-cover ratio-square ' />}\n                                </div>}\n                            <div className={`card-preview-content \n                                    ${(card.cover.type === 'img' && card.cover.isFull) ?\n                                    (card.cover.theme === 'dark' ? 'content-wrapper dark' : 'content-wrapper light') : ''}`}>\n\n                                {card.labels && <LabelList labels={card.labels} />}\n                                <div className='card-preview-title' dir='auto'>{card.title}</div>\n                                <div className='badges'>\n                                    {card.dueDate &&\n                                        <div className={'badge ' + isDue}>\n                                            <RiTimeLine className=\"icon-sm\" />\n                                            <Moment className='badge-text' calendar={calendarStrings} date={card.dueDate} />\n                                        </div>\n                                    }\n                                    {card.description &&\n                                        <div className=\"badge\">\n                                            <GrTextAlignFull className=\"icon-md\" />\n                                        </div>\n                                    }\n                                    {card.checklists.length > 0 && checklistItemsAmount > 0 &&\n                                        <div className={'badge checklist-items-badge ' + (doneCount === checklistItemsAmount ? 'card-complete' : '')}>\n\n                                            <IoMdCheckboxOutline className=\"icon-sm\" />\n                                            <span className='badge-text'>{doneCount}/{checklistItemsAmount}</span>\n                                        </div>}\n\n                                </div>\n\n                            </div>\n                        </Container>\n                    </NavLink>\n\n                </div>\n\n            )}\n\n        </Draggable>\n    )\n}\nexport default CardPreview\n","import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import React, { useState, useEffect, useRef } from 'react'\nimport useKeyPress from '../hooks/useKeypress'\nimport useOnClickOutside from '../hooks/useOnClickOutSide'\n\nconst TextEditor = (props) => {\n    const {\n        type,\n        text,\n        name,\n        onInputBlur,\n        isWide,\n        isFocused,\n        onChange,\n        onSubmit,\n        onEscape,\n        placeholder = null,\n    } = props\n    // const [textCopy, setText] = useState(text)\n    const [isEditing, setIsEditing] = useState(false)\n    const [initialText, setInitialText] = useState('')\n    const inputEl = useRef(null)\n\n    const enter = useKeyPress(\"Enter\");\n    const esc = useKeyPress(\"Escape\");\n\n\n    useEffect(() => {\n        if (isEditing) {\n            inputEl.current.focus()\n        }\n    }, [isEditing])\n\n\n\n    useEffect(() => {\n        if (isFocused) {\n            setIsEditing(true)\n        }\n        // Check whether or not to change the isEditing state from the parent component (for bluring the input)\n        if (isFocused === false) {\n\n            setIsEditing(false)\n        }\n    }, [isFocused, isEditing]);\n\n    useEffect(() => {\n        if (isEditing) {\n            setInitialText(text)\n        }\n    }, [isEditing]) // when input is focused save the initial text\n\n\n    useEffect(() => {\n        if (isEditing && !isWide) { // if input is focused and not textarea\n            // if Enter is pressed, save the text and case the editor\n            if (enter) {\n                if (onInputBlur) {\n                    onInputBlur()\n                } else {\n                    onSubmit()\n                }\n                setIsEditing(false);\n            }\n            // if Escape is pressed, revert the text and close the editor\n            if (esc) {\n                const customEv = {\n                    target: {\n                        name: name,\n                        value: initialText\n                    },\n                }\n                onChange(customEv)\n                setIsEditing(false);\n                if (onEscape) {\n                    onEscape()\n                }\n            }\n        }\n    }, [enter, esc]); // watch the Enter and Escape key presses\n\n    const ModuleText = React.createElement(\n        type,\n        {\n            className: `module-text  ${text ? '' : 'placeholder'}`,\n            dir: 'auto',\n            onClick: () => { setIsEditing(true) }\n        },\n        text ? text : placeholder\n    );\n\n\n    const updateText = () => {\n        if (onInputBlur) {\n            console.log('blur');\n            setIsEditing(false)\n            onInputBlur()\n        }\n    }\n    const test = (ev) => {\n        const reg = /^\\s+$/; // check for whitespace \n        const inputVal = ev.target.value;\n        if (reg.test(inputVal) || inputVal === '') {\n            return\n        } else {\n            onChange(ev)\n        }\n    }\n    const handleTextareaChange = (ev) => {\n        onChange(ev)\n    }\n    const focusInput = () => {\n        if (!isEditing) {\n            setIsEditing(true)\n            setTimeout(() => {\n                inputEl.current.focus();\n            }, 0)\n\n        }\n    }\n    return (\n        <div className=\"text-editor-wrapper\">\n            {\n                isEditing ?\n                    (!isWide ?\n                        <input dir=\"auto\" type=\"text\" ref={inputEl} autoFocus className=\"focusClass\" name={name} defaultValue={text} onChange={test} onBlur={updateText} /> :\n                        <textarea ref={inputEl} className=\"focusClass\" autoFocus rows=\"5\" name={name} defaultValue={text} onChange={handleTextareaChange} onBlur={updateText} placeholder={placeholder} />) :\n                    ModuleText\n            }\n\n        </div>\n    )\n}\n\nexport default TextEditor\n","import React from 'react'\nimport { RiCloseLine } from \"react-icons/ri\";\n\nconst ListMenu = ({ onCloseMenu, onRemoveList,onAddCard }) => {\n    return (\n        <div className=\"pop-up list-menu\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={() => onCloseMenu()}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <div onClick={onAddCard} >Add card</div>\n            <div>Change list color</div>\n            <div>Sort list by</div>\n            <div onClick={onRemoveList}>Delete list</div>\n        </div>\n    )\n}\n\nexport default ListMenu\n","import React, { useEffect, useState, useRef, memo } from 'react'\nimport { useRouteMatch } from 'react-router-dom';\nimport useOnClickOutside from '../../hooks/useOnClickOutSide';\n\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { boardService } from '../../services/board.service';\n\n\nimport { RiCloseLine, RiAddLine } from 'react-icons/ri';\nimport { BsThreeDots } from \"react-icons/bs\";\n\nimport CardPreview from './CardPreview'\nimport TextEditor from '../TextEditor'\nimport ListMenu from './ListMenu';\n\n\nconst CardList = ({ provided, innerRef, cardList, cardListIdx, onListUpdated, onRemoveList }) => {\n\n    const [cardListCopy, setCardListCopy] = useState({ ...cardList })\n    const [newCard, setNewCard] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    let { url } = useRouteMatch();\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        setCardListCopy({ ...cardList })\n    }, [cardList])\n\n    const getEmptyCard = () => {\n        setIsMenuOpen(false)\n        const emptyCard = boardService.getEmptyCard()\n        setNewCard(emptyCard)\n        setIsEditing(true)\n    }\n\n    const handleListChange = (ev) => {\n        setCardListCopy({ ...cardListCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const handleCardChange = (ev) => {\n        setNewCard({ ...newCard, [ev.target.name]: ev.target.value })\n\n    }\n    const handleListRemove = () => {\n        onRemoveList(cardList.id)\n    }\n    const updateList = (updatedCardList, newActivity) => {\n        if (updatedCardList) {\n            onListUpdated(updatedCardList, newActivity)\n        } else { // when card list title is edited\n            if (cardListCopy.title === cardList.title) return;\n            onListUpdated(cardListCopy) \n        }\n        setIsEditing(false)\n        setNewCard(null)\n    }\n\n    const addCard = async (clickSource = null) => {\n        if (newCard && newCard.title) {\n            const updatedCardList = JSON.parse(JSON.stringify(cardListCopy));\n            updatedCardList.cards.push(newCard)\n            const newActivity = boardService.newActivity(\n                `Added this card to ${updatedCardList.title}`,\n                `Added  [${newCard.title}](${url}/${newCard.id}) to ${updatedCardList.title}`,\n                newCard.id\n            )\n            await updateList(updatedCardList, newActivity)\n            if (clickSource === 'clickedOutside') return; // if click is outside the ref wrapper end editing\n            setNewCard(null)\n            getEmptyCard()\n        }\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing && newCard && newCard.title) {\n            addCard('clickedOutside') // passing this string to add the current card and end the editing\n        } else {\n            stopEditing()\n        }\n    });\n    const stopEditing = () => {\n        setNewCard(null)\n        setIsEditing(false)\n    }\n\n\n\n    return (\n        cardListCopy &&\n        <div className=\"list-wrapper\"\n            ref={innerRef}\n            {...provided.draggableProps}\n        >\n            <div className=\"list\">\n                <div className=\"list-header\" {...provided.dragHandleProps}>\n                    {cardListCopy.title &&\n                        <TextEditor\n                            name=\"title\"\n                            type=\"h3\"\n                            text={cardListCopy.title}\n                            onChange={handleListChange}\n                            onInputBlur={updateList}\n                        />}\n                    <button className=\"list-menu-btn clear-btn\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n                        <BsThreeDots />\n                    </button>\n                    {isMenuOpen && !isEditing && <ListMenu onRemoveList={handleListRemove} onAddCard={getEmptyCard} onCloseMenu={() => setIsMenuOpen(false)} />}\n                </div>\n                <div className=\"overs\">\n                    <Droppable type=\"card\" droppableId={`${cardListIdx}`}>\n                        {provided => (\n\n\n                            <div className=\"list-content custom-scrollbar\" ref={provided.innerRef} >\n                                {cardList.cards.map((card, index) => (\n                                    <CardPreview key={card.id} card={card} index={index} />\n                                ))}\n                                {(isEditing && newCard) && <div className=\"add-card-wrapper \" ref={wrapperRef}>\n                                    <TextEditor\n                                        name=\"title\"\n                                        type=\"p\"\n                                        text={newCard.title}\n                                        onChange={handleCardChange}\n                                        isFocused={isEditing}\n                                        onSubmit={addCard}\n                                        onEscape={stopEditing}\n                                    />\n\n                                    <div className=\"add-card-controls\">\n                                        <button onClick={addCard} className=\"submit-btn\">Add card</button>\n                                        <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n                                            <RiCloseLine />\n                                        </button>\n                                    </div>\n\n                                </div>}\n                                {/* </div> */}\n                                {provided.placeholder}\n\n                            </div>\n                        )}\n                    </Droppable>\n                </div>\n\n                <div className=\"list-footer\">\n                    {(!isEditing && !newCard) &&\n                        <a className=\"clear-btn list-footer-btn\" onClick={getEmptyCard}  >\n                            <span className=\"icon-lg add-icon\"><RiAddLine /></span> <span>Add new card</span>\n                        </a >\n                    }\n                </div>\n            </div>\n        </div >\n\n    )\n}\n\nexport default CardList;\n","import { boardService } from \"../../services/board.service\"\n\n\n// Dispatching this action to determine wether or not to start editing in CardChecklist cmp on initial render\n\nexport function loadActivities(boardId) {\n    return async dispatch => {\n        try {\n            const activities = await boardService.getActivities(boardId)\n            dispatch({ type: 'SET_ACTIVITIES', activities })\n            dispatch({ type: 'SET_BOARD_ID', boardId })\n        } catch (err) {\n            console.warn('cannot load activities', err)\n            throw err\n        }\n    }\n}\n\n\nexport function addActivity(activity) {\n    return async (dispatch, getState) => {\n        const boardId = getState().activity.boardId\n        try {\n            await boardService.addActivity(boardId, activity)\n            dispatch({ type: 'ADD_ACTIVITY', activity });\n        } catch (err) {\n            throw err\n        }\n    }\n}\n","import React, { useRef, useState,useEffect } from 'react'\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\nimport { RiCloseLine } from \"react-icons/ri\";\nimport { GoPencil } from \"react-icons/go\";\n\nimport TextEditor from '../../TextEditor';\n\n\nconst LabelPicker = ({ card, labels, onCloseModal, onCardUpdated, labelsUpdated, bounds, exceptionRef }) => {\n    const [selectedLabel, setSelectedLabel] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const selectLabelToEdit = (label) => {\n        if (selectedLabel !== null && selectedLabel.id === label.id) {\n            setIsEditing(false)\n        } else {\n            setSelectedLabel({ ...label })\n            setIsEditing(true)\n        }\n    }\n\n    const handleChange = (ev) => {\n        setSelectedLabel({ ...selectedLabel, [ev.target.name]: ev.target.value })\n    }\n    const updateLabel = () => {\n        const labelsCopy = [...labels];\n        const labelIdx = labelsCopy.findIndex(label => label.id === selectedLabel.id)\n        labelsCopy.splice(labelIdx, 1, selectedLabel)\n        labelsUpdated([...labelsCopy], selectedLabel)\n        setIsEditing(false);\n        setSelectedLabel(null)\n    }\n\n    useEffect(() => {\n        if (!isEditing && selectedLabel) {\n            const cardCopy = JSON.parse(JSON.stringify(card));\n            const cardLabelIdx = cardCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            if (cardLabelIdx !== -1) {\n                cardCopy.labels.splice(cardLabelIdx, 1, selectedLabel)\n                onCardUpdated(cardCopy)\n            }\n        }\n\n    }, [isEditing])\n\n\n    const toggleLabels = (selectedLabel) => {\n        let labelExist;\n        const cardCopy = JSON.parse(JSON.stringify(card));\n        labelExist = cardCopy.labels.find(label => label.id === selectedLabel.id)\n        if (!labelExist) {\n            cardCopy.labels.push(selectedLabel)\n        } else {\n            const idx = cardCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            cardCopy.labels.splice(idx, 1)\n        }\n        onCardUpdated(cardCopy)\n    }\n\n    const labelToEdit = (label) => {\n        if (selectedLabel) {\n            // console.log(label.id === selectedLabel.id)\n            return label.id === selectedLabel.id\n        }\n    }\n    return (\n\n        <div className=\"pop-up labels\" ref={wrapperRef} style={bounds}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <ul>\n                {labels.map(label => (\n                    <li className=\"label-container\" key={label.id}>\n                        <span\n                            className=\"card-label\"\n                            style={{ backgroundColor: label.color }}\n                            onClick={() => toggleLabels(label)}\n                        >\n                            {!labelToEdit(label) && <span className=\"label-title\">{label.title}</span>}\n                            {labelToEdit(label) && isEditing && <TextEditor\n                                type=\"p\"\n                                name=\"title\"\n                                isFocused={isEditing}\n                                text={label.title}\n                                onChange={handleChange}\n                                onInputBlur={updateLabel}\n                            />}\n                            <span className=\"label-selected\">\n                            </span>\n                        </span>\n                        <button className=\"clear-btn\" onClick={() => selectLabelToEdit(label)}>\n                            <GoPencil />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LabelPicker\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useRouteMatch } from 'react-router-dom';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\nimport { RiCloseLine } from 'react-icons/ri'\nimport moment from 'moment'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n\nimport { boardService } from '../../../services/board.service';\n\nconst DatePicker = ({ card, onCardUpdated, onCloseModal, bounds, exceptionRef }) => {\n    const [value, setDate] = useState(new Date());\n    let { url } = useRouteMatch();\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        if (card.dueDate) {\n            const date = new Date(card.dueDate)\n            setDate(date)\n        }\n    }, [])\n\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const createActivity = (timestamp, isRemoveActivity = null) => {\n        const dueDate = moment(new Date(timestamp)).format(\"MMM Do\");\n        if (card.dueDate) {\n            return boardService.newActivity(\n                `Changed the due date of this card to  ${dueDate}`,\n                `Changed [${card.title}](${url}) to be due at ${dueDate}`,\n                card.id\n            )\n        } else if (isRemoveActivity) {\n            return boardService.newActivity(\n                `Removed the due date from this card`,\n                `Removed [${card.title}](${url}) due date`,\n                card.id\n            )\n        } else {\n            return boardService.newActivity(\n                `Set this card to be due at ${dueDate}`,\n                `Set [${card.title}](${url}) to be due at ${dueDate} `,\n                card.id\n            )\n        }\n    }\n\n\n\n    const submitDate = async () => {\n        const timestamp = value.getTime();\n        if (timestamp === card.dueDate) return;\n        const cardCopy = JSON.parse(JSON.stringify(card));\n        cardCopy.dueDate = timestamp\n        const newActivity = createActivity(timestamp)\n        await onCardUpdated(cardCopy, newActivity)\n        onCloseModal()\n    }\n\n\n    const onChangeDate = (date) => {\n        setDate(date)\n    }\n    return (\n        <div className=\"pop-up\" style={bounds} ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Date</span>\n                <button onClick={onCloseModal} className=\"pop-up-close-btn clear-btn icon-lg\">\n                    <RiCloseLine />\n                </button>\n            </div>\n            <Calendar\n                onChange={onChangeDate}\n                value={value}\n            />\n            <button onClick={submitDate} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default DatePicker\n","\n\n// Dispatching this action to determine wether or not to start editing in CardChecklist cmp on initial render\nexport function toggleInitialAddition(isInitial) {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_INITIAL_ADDITION', isInitial });\n    }\n}","import React, { useEffect, useState,useRef } from 'react'\nimport { useRouteMatch } from 'react-router-dom'\nimport { toggleInitialAddition } from '../../../../store/actions/generalAction';\nimport { useDispatch } from 'react-redux'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide'\n\nimport { boardService } from '../../../../services/board.service'\n\nimport TextEditor from '../../../TextEditor'\n\nconst ChecklistPicker = ({ card, onCardUpdated, onCloseModal, bounds, sidebarRef }) => {\n    const [checklist, setChecklist] = useState({})\n    const wrapperRef = useRef(null)\n    const { url } = useRouteMatch();\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const emptyChecklist = boardService.getEmptyCheckList();\n        setChecklist({ ...emptyChecklist })\n    }, [])\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, sidebarRef);\n\n    const handleChange = (ev) => {\n        setChecklist({ ...checklist, [ev.target.name]: ev.target.value })\n    }\n    const addChecklist = () => {\n        const cardCopy = JSON.parse(JSON.stringify(card));\n        const checklistCopy = { ...checklist }\n        cardCopy.checklists.push(checklistCopy)\n        const newActivity = boardService.newActivity(\n            `Added ${checklist.title}  on this card`,\n            `Added ${checklist.title} on [${card.title}](${url})`,\n            card.id\n        )\n        onCardUpdated(cardCopy, newActivity)\n        dispatch(toggleInitialAddition(true)) // Dispatching this action to start editing on CardChecklist cmp \n        onCloseModal()\n    }\n    return (\n        <div className=\"pop-up\" style={bounds} ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Add checklist</span>\n                <button className=\"pop-up-close-btn clear-btn\">\n                </button>\n            </div>\n            <TextEditor\n                isFocused={true}\n                onChange={handleChange}\n                onSubmit={addChecklist}\n                type=\"p\"\n                name=\"title\"\n            />\n            <button onClick={addChecklist} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default ChecklistPicker\n","export default {\r\n    uploadImg\r\n}\r\n\r\nfunction uploadImg(ev) {\r\n    console.log('yes');\r\n    const CLOUD_NAME = \"dhz1jk4k6\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0])\r\n    formData.append('upload_preset', 'jtim2mm3');\r\n\r\n    return fetch(UPLOAD_URL, {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => console.error(err))\r\n}\r\n\r\n","import React, { useRef, useState } from 'react'\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\nimport cloudinaryService from '../../../services/cloudinary.service';\nimport { utilService } from '../../../services/util.service';\n\nimport styled from 'styled-components'\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport { RiCloseLine } from 'react-icons/ri'\n\n\n\n\nconst HalfBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        { backgroundImage: \"url(\" + props.cover.background + \")\", backgroundSize: 'cover' }}\n`;\n\n\nconst FullBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        {\n            backgroundImage: props.cover.theme === 'light' ?\n                'linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(' + props.cover.background + ')'\n                : 'linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(' + props.cover.background + ')', backgroundSize: 'cover', backgroundPosition: '50%'\n        }\n\n    }\n`;\n\nconst CoverPicker = ({ card, onCloseModal, onCardUpdated, bounds, exceptionRef }) => {\n    const [selectedCover, setSelectedCover] = useState(card.cover)\n    const [loading, setLoading] = useState(false);\n\n    const wrapperRef = useRef(null)\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const handleSelected = (cover) => {\n        const cardCopy = { ...card }\n        if (cover.id) {\n            setSelectedCover({ ...selectedCover, background: cover.url, type: 'img' })\n            cardCopy.cover.type = 'img'\n            cardCopy.cover.background = cover.url\n        } else {\n            setSelectedCover({ ...selectedCover, background: cover, type: 'color' })\n            cardCopy.cover.type = 'color'\n            cardCopy.cover.background = cover\n        }\n        onCardUpdated(cardCopy)\n    }\n    const handleLayout = (isFull) => {\n        if (!card.cover.background) return;\n        setSelectedCover({ ...selectedCover, isFull: isFull })\n        const cardCopy = { ...card }\n        cardCopy.cover.isFull = isFull\n        onCardUpdated(cardCopy)\n    }\n    const handleThemeChange = (theme) => {\n        if (theme === selectedCover.theme) return;\n        setSelectedCover({ ...selectedCover, theme: theme })\n        const cardCopy = { ...card }\n        cardCopy.cover.theme = theme\n        onCardUpdated(cardCopy)\n    }\n    const handleUpload = async (ev) => {\n        console.log('yes mame');\n        setLoading(true);\n        const res = await cloudinaryService.uploadImg(ev);\n        const { url } = res;\n        setSelectedCover({ ...selectedCover, background: url, type: 'img' })\n        const cardCopy = { ...card }\n        const img = { id: utilService.makeId(), url: url, isCover: true }\n        cardCopy.images.push(img)\n        cardCopy.cover.background = url\n        cardCopy.cover.type = 'img'\n        onCardUpdated(cardCopy)\n        setLoading(false);\n    }\n    const handleRemove = () => {\n        setSelectedCover({ ...selectedCover, background: null, type: null, isFull: null, theme: null })\n        const cardCopy = { ...card }\n        cardCopy.cover = { ...cardCopy.cover, background: null, type: null, isFull: null, theme: null }\n        // console.log('card', cardCopy);\n        onCardUpdated(cardCopy)\n        onCloseModal()\n    }\n    return (\n\n        <div className={`pop-up cover-picker ${bounds ? '' : 'absolute'}`} ref={wrapperRef} style={bounds}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Cover</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <span className=\"pop-up-title\">Size</span>\n            <div className=\"cover-size-picker\">\n                <FullBgcWrapper\n                    cover={selectedCover}\n                    className={'cover-size ' + (card.cover.background ? (selectedCover.isFull ? 'selected' : '') : 'disabled')}\n                    onClick={() => handleLayout(true)}\n                >\n                    <div className={`line-wrapper ${card.cover.type === 'img' ? (card.cover.theme === 'dark' ? 'dark' : '') : ''}`}>\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </FullBgcWrapper>\n                <div\n                    className={'cover-size half ' + (card.cover.background ? (selectedCover.isFull ? '' : 'selected') : 'disabled')}\n                    onClick={() => handleLayout(false)}>\n                    <HalfBgcWrapper className=\"half\" cover={selectedCover}></HalfBgcWrapper>\n                    <div className=\"line-wrapper\">\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </div>\n            </div>\n            {card.cover.background && <button className=\"modal-btn\" onClick={handleRemove}>Remove Cover</button>}\n            {(selectedCover.type === 'img' && selectedCover.isFull) &&\n                <div className=\"cover-txt-color\">\n                    <span className=\"pop-up-title\">Text color</span>\n                    <div className=\"flex justify-center\">\n                        <div\n                            onClick={() => handleThemeChange('light')}\n                            className=\"cover-txt light\"\n                            style={{ backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{card.title}</h3>\n                        </div>\n                        <div\n                            onClick={() => handleThemeChange('dark')}\n                            className=\"cover-txt dark\"\n                            style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{card.title}</h3>\n                        </div>\n                    </div>\n                </div>}\n\n            <span className=\"pop-up-title\">Colors</span>\n            <div className=\"cover-palette\">\n                {coverColors.map((color, idx) => (\n                    <span\n                        className={'cover-color ' + (color === selectedCover.background ? 'selected' : '')}\n                        style={{ backgroundColor: color }}\n                        key={idx}\n                        onClick={() => handleSelected(color)}\n                    ></span>\n                ))}\n            </div>\n            {card.images.length > 0 && <span className=\"pop-up-title\">Images</span>}\n            {card.images.length > 0 &&\n                <div className=\"cover-img-wrapper\">\n                    {card.images.map(img => (\n                        <span\n                            // check id in case the same img has been uploaded\n                            className={'cover-img-preview ' + ((img.url + img.id) === (selectedCover.background + img.id) ? 'selected' : '')}\n                            style={{ backgroundImage: `url(${img.url})` }}\n                            onClick={() => handleSelected(img)}\n                            key={img.id}></span>\n                    ))}\n                </div>}\n            <div className=\"upload-img-container flex space-between align-center\">\n                <p>Upload image:</p>\n                <input onChange={handleUpload} id=\"file\" type=\"file\" title=\"Upload Image\" />\n                <label className=\"btn-3\" htmlFor=\"file\">\n                    {!loading ? <span>Upload</span> : <ScaleLoader height={9} width={5} color={\"#2c3e50\"} loading={loading} />}\n                </label>\n            </div>\n            <hr className=\"divider\" />\n        </div>\n    )\n}\n\nexport default CoverPicker\n","import React, { useEffect, useCallback, useRef, useState } from 'react'\n\nimport LabelPicker from './LabelPicker'\nimport DatePicker from './DatePicker'\nimport ChecklistPicker from './checklist-cmps/ChecklistPicker'\nimport CoverPicker from './CoverPicker'\n\nconst CardActions = ({ card, labels, onUpdateCard, onLabelsUpdated, onAddActivity }) => {\n    const sidebarRef = useRef(null)\n    const [currAction, setCurrAction] = useState(null)\n\n    const [bounds, setBounds] = useState(null)\n    const ref = useRef(null)\n\n    const toggle = (ev, isActive) => {\n        ref.current = ev.target.id\n        const { top, left, height } = ev.target.getBoundingClientRect();\n        const res = window.innerWidth - left - 304\n\n        if (res < 50 && window.innerWidth > 770) {\n            setBounds({ top: top + height, left: left - 100 })\n        } else {\n            setBounds({ top: top + height, left: left - 50 })\n        }\n        if (isActive === currAction) {\n            setCurrAction(null)\n            setBounds(null)\n            ref.current = null\n        } else {\n            setCurrAction(isActive)\n        }\n    }\n    // console.log('cardactions')\n    const updateWidthAndHeight = useCallback(() => {\n        if (ref.current) {\n            const activeEl = document.getElementById(ref.current)\n            const { top, left, height } = activeEl.getBoundingClientRect();\n            const res = window.innerWidth - left - 304\n            if (res < 50) {\n                setBounds({ top: top + height, right: 0 })\n            }\n            else {\n                setBounds({ top: top + height, left: left })\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        if (currAction) {\n            window.addEventListener(\"resize\", updateWidthAndHeight);\n        } else {\n            window.removeEventListener(\"resize\", updateWidthAndHeight)\n        }\n    }, [currAction])\n\n\n\n    const closeModal = () => {\n        setCurrAction(null)\n        ref.current = null\n    }\n\n    return (\n        <div className=\"modal-sidebar\" ref={sidebarRef}>\n            <h3>Add to card</h3>\n            <button id=\"sidebar-labels\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isLabelActive')}>Labels</button>\n            {currAction === 'isLabelActive' &&\n                <LabelPicker\n                    bounds={bounds}\n                    card={card}\n                    labels={labels}\n                    onCloseModal={closeModal}\n                    onCardUpdated={onUpdateCard}\n                    labelsUpdated={onLabelsUpdated}\n                    exceptionRef={sidebarRef}\n                />}\n            <button className=\"modal-btn\" >Members</button>\n            <button id=\"sidebar-checklist\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isChecklistActive')}>Checklist</button>\n            {currAction === 'isChecklistActive' &&\n                <ChecklistPicker\n                    card={card}\n                    bounds={bounds}\n                    onCardUpdated={onUpdateCard}\n                    onCloseModal={closeModal}\n                    exceptionRef={sidebarRef}\n                />}\n            <button id=\"sidebar-date\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isDueDateActive')}>Due date</button>\n            {currAction === 'isDueDateActive' &&\n                <DatePicker\n                    bounds={bounds}\n                    card={card}\n                    onCardUpdated={onUpdateCard}\n                    onAddActivity={onAddActivity}\n                    onCloseModal={closeModal}\n                    exceptionRef={sidebarRef}\n                />}\n            {/* Show the cover button only when cover is not set (displayed in header otherwise) */}\n            {!card.cover.background && <button id=\"sidebar-cover\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isCoverActive')}>Cover</button>}\n            {currAction === 'isCoverActive' &&\n                <CoverPicker\n                    bounds={bounds}\n                    exceptionRef={sidebarRef}\n                    card={card}\n                    onCloseModal={closeModal}\n                    onCardUpdated={onUpdateCard}\n                />}\n        </div>\n    )\n}\n\nexport default CardActions\n","import React, { useState, useEffect,useRef, memo } from 'react'\nimport { useRouteMatch } from 'react-router-dom';\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\n\nimport { boardService } from '../../../../services/board.service';\n\nimport { BsTrash } from \"react-icons/bs\";\nimport { RiCloseLine } from 'react-icons/ri';\n\nimport TextEditor from '../../../TextEditor';\n\nconst isEqual = require(\"react-fast-compare\");\n\nfunction compareProps(prev, next) {\n    // console.log(isEqual(prev.item, next.item))\n    return isEqual(prev.item, next.item)\n}\n\nconst ChecklistItem = ({ card, item, onSubmit, onRemoveItem }) => {\n    const [itemCopy, setItem] = useState({ ...item });\n    const [isEditing, setIsEditing] = useState(false);\n    const [displayMsg, setDisplayMsg] = useState(false);\n    const [unSavedTitle, setUnsavedTitle] = useState('');\n    const editorRef = useRef(null)\n    const initialRender = useRef(true)\n    const { url } = useRouteMatch();\n\n    useOnClickOutside(editorRef, () => {\n        if (isEditing) {\n            if (item.title !== itemCopy.title) {\n                setUnsavedTitle(itemCopy.title)\n                setItem(prevState => ({\n                    ...prevState,\n                    title: item.title,\n                }));\n                setDisplayMsg(true)\n            }\n            setIsEditing(false)\n            // setNewItem(null)\n        }\n    });\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            const newActivity = boardService.newActivity(\n                `${itemCopy.isDone ? `Completed  ${item.title} on this card` : `Marked ${item.title} incomplete on this card`}`,\n                `${itemCopy.isDone ? `Completed  ${item.title} on [${card.title}](${url})` : `Marked ${item.title} incomplete on [${card.title}](${url})`}`,\n                card.id\n            )\n            updateItem(newActivity)\n        } else {\n            initialRender.current = false\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [itemCopy.isDone])\n\n    const handleChange = (ev) => {\n        const target = ev.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name; setItem({ ...itemCopy, [name]: value });\n    }\n    const handleClose = () => {\n        // when escape is pressed on 'TextEditor.jsx'\n        setIsEditing(false)\n    }\n\n    const updateItem = (activity) => {\n        if (!itemCopy.title) {\n            setIsEditing(true)\n            return;\n        }\n        setIsEditing(false)\n        setDisplayMsg(false)\n        onSubmit({ ...itemCopy }, activity)\n    }\n\n    const handleRemove = () => {\n        onRemoveItem(itemCopy.id)\n    }\n    const startEditing = () => {\n        setItem(prevState => ({\n            ...prevState,\n            title: unSavedTitle,\n        }));\n        setIsEditing(true)\n    }\n\n    const discardUnsaved = () => {\n        setDisplayMsg(false)\n    }\n    // console.log('item', item.title)\n\n    return (\n        <div className=\"checklist-item\" >\n            <div className={'checklist-item-editor  ' + (item.isDone ? 'done' : '')}>\n                {itemCopy && !isEditing &&\n                    // <label for=\"checkbox-1\">\n                    <input type=\"checkbox\" name=\"isDone\" checked={itemCopy.isDone} onChange={handleChange} />\n                    // </label>\n                }\n                <div className=\"item-title\" onClick={() => setIsEditing(true)} ref={editorRef}>\n                    <TextEditor\n                        text={item.title}\n                        onChange={handleChange}\n                        onSubmit={updateItem}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n                    {isEditing &&\n                        <div className=\"add-item-controls\">\n                            <button className=\"submit-btn\">Save</button>\n                            <button className=\"clear-btn icon-lg\" onClick={handleClose}>\n                                <RiCloseLine />\n                            </button>\n                            <div className=\"spacer\" onClick={handleClose}></div>\n                        </div>}\n                </div>\n                {!isEditing &&\n                    <button className=\"remove-item-btn clear-btn\" onClick={handleRemove}>\n                        <BsTrash />\n                    </button>}\n            </div>\n            {displayMsg && !isEditing &&\n                <p className=\"checklist-user-msg\">\n                    <span>You have unsaved edits on this field.</span>\n                    <button className=\"clear-btn\" onClick={startEditing}>View edits</button>\n                    <button className=\"clear-btn\" onClick={discardUnsaved}>Discard</button>\n                </p>}\n\n        </div>\n    )\n}\n\nexport default memo(ChecklistItem, compareProps)\n// export default ChecklistItem\n","import React, { useState, useRef, useEffect,useMemo } from 'react'\nimport { useRouteMatch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport { toggleInitialAddition } from '../../../../store/actions/generalAction';\n\nimport { boardService } from '../../../../services/board.service'\n\nimport TextEditor from '../../../TextEditor'\nimport ChecklistItem from './ChecklistItem';\n\nimport { RiCloseLine } from 'react-icons/ri';\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\n\n\nconst CardChecklist = ({ card, checklist, onUpdateCard }) => {\n    const [newItem, setNewItem] = useState(null);\n    const [checklistTitle, setChecklistTitle] = useState(checklist.title);\n    const [progress, setProgress] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n    const { url } = useRouteMatch();\n    const dispatch = useDispatch()\n    const isInitialAddition = useSelector(state => state.general.isInitialAddition)\n\n    useEffect(() => {\n        // Checking wether or not to start editing in CardChecklist cmp on initial render\n        if (isInitialAddition) {\n            addItem()\n        }\n    }, [])\n\n    useMemo(() => {\n        const doneCount = checklist.listItems.reduce((acc, item) => {\n            if (item.isDone) acc++\n            return acc\n        }, 0)\n        let donePrecent = Math.round((doneCount * 100) / checklist.listItems.length)\n        setProgress(donePrecent)\n    }, [checklist])\n\n    const addItem = () => {\n        const emptyItem = boardService.getEmptyListItem();\n        setNewItem(emptyItem)\n        setIsEditing(true);\n        if (isInitialAddition) {\n            dispatch(toggleInitialAddition(false))\n        }\n    }\n\n    const handleClose = () => {\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    const handleChange = (ev) => {\n        setNewItem({ ...newItem, [ev.target.name]: ev.target.value });\n    }\n    const handleChecklistChange = (ev) => {\n        setChecklistTitle(ev.target.value);\n    }\n\n    const updateChecklistTitle = () => {\n        const checklistCopy = { ...checklist };\n        checklistCopy.title = checklistTitle\n        const newActivity = boardService.newActivity(\n            `Renamed ${checklistCopy.title} from (${checklist.title})`,\n            `Renamed ${checklistCopy.title} from (${checklist.title}) on <a href=\"${url}\">${card.title}</a>`,\n            card.id\n        )\n        updateCard(checklistCopy, newActivity);\n    }\n\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            setNewItem(null)\n        }\n    });\n\n    const removeItem = (itemId) => {\n        const checklistCopy = { ...checklist };\n        const idx = checklistCopy.listItems.findIndex(item => item.id === itemId)\n        if (idx !== -1) {\n            checklistCopy.listItems.splice(idx, 1)\n        }\n        updateCard(checklistCopy)\n    }\n\n    const updateChecklist = async (item, activity) => {\n        const checklistCopy = { ...checklist };\n        if (item) {\n            const idx = checklistCopy.listItems.findIndex(currItem => currItem.id === item.id)\n            if (idx !== -1) {\n                checklistCopy.listItems.splice(idx, 1, item) // update an item \n                await updateCard(checklistCopy, activity);\n            }\n        } else { // Add  item\n            if (!newItem.title) {\n                handleClose()\n                return;\n            }\n            checklistCopy.listItems.push(newItem)\n            await updateCard(checklistCopy);\n            addItem()\n        }\n    }\n\n    const updateCard = (updatedChecklist, activity) => {\n        const cardCopy = JSON.parse(JSON.stringify(card));\n\n        if (updatedChecklist) {\n            const idx = cardCopy.checklists.findIndex(currChecklist => currChecklist.id === updatedChecklist.id)\n            cardCopy.checklists.splice(idx, 1, updatedChecklist)\n        } else {\n            cardCopy.checklists = cardCopy.checklists.filter(currChecklist => currChecklist.id !== checklist.id) // Delete checklist\n            activity = boardService.newActivity(\n                `Removed ${checklist.title}  on this card`,\n                `Removed ${checklist.title} on [${card.title}](${url})`,\n                card.id\n            )\n        }\n        onUpdateCard(cardCopy, activity)\n        setIsEditing(false);\n        setNewItem(null);\n    }\n    // console.log('yes darling', checklist.title)\n    return (\n        <div className=\"card-checklist\">\n            <div className=\"section-title flex align-center\">\n                <TextEditor\n                    text={checklistTitle}\n                    onChange={handleChecklistChange}\n                    onInputBlur={updateChecklistTitle}\n                    type=\"h3\"\n                />\n                <button className=\"modal-btn\" onClick={() => updateCard()}>Delete</button>\n            </div>\n\n            {checklist.listItems.length > 0 &&\n                <Progress\n                    percent={progress}\n                />}\n            {checklist && checklist.listItems.map(item => (\n                <ChecklistItem\n                    key={item.id}\n                    onSubmit={updateChecklist}\n                    onRemoveItem={removeItem}\n                    item={item}\n                    card={card}\n                />\n            ))\n            }\n            {newItem && isEditing &&\n                <div className=\"add-item\" ref={wrapperRef}>\n                    <TextEditor\n                        onChange={handleChange}\n                        onSubmit={updateChecklist}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n\n                    <div className=\"add-item-controls\" >\n                        <button className=\"submit-btn\" onClick={() => updateChecklist()}>Save</button>\n                        <button className=\"clear-btn icon-lg\" onClick={handleClose}>\n                            <RiCloseLine />\n                        </button>\n                        <div className=\"spacer\" onClick={handleClose}></div>\n                    </div>\n                </div>\n\n            }\n            {!isEditing && <button className=\"modal-btn\" onClick={addItem} >Add an item</button>}\n        </div>\n    )\n}\n\nexport default CardChecklist\n","import React, { memo, useMemo, useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nimport Moment from 'react-moment';\nimport Markdown from 'markdown-to-jsx';\n// import DOMPurify from \"dompurify\";\n// import ReactCommonmark from 'react-commonmark'\n\nconst calendarStrings = {\n    lastDay: '[Yesterday at] LT',\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    lastWeek: '[last] dddd [at] LT',\n    nextWeek: 'dddd [at] LT',\n    sameElse: 'MMMM D [at] LT'\n};\nconst LIMIT = 5;\n\nconst filteredActivities = () =>\n    createSelector(\n        state => state.activity.activities,\n        (_, cardId) => cardId,\n        (activities, cardId) => cardId ? activities.filter(activity => activity.cardId === cardId) : activities\n    );\n\nconst ActivityLog = ({ cardId = null }) => {\n    const selectFilteredActivities = useMemo(filteredActivities, []) // Ensuring that each component instance gets its own selector instance\n    const activities = useSelector(state => selectFilteredActivities(state, cardId))\n\n    const [showContent, setShowContent] = useState(true);\n    const [showMore, setShowMore] = useState(true);\n    const [list, setList] = useState([]);\n    const [index, setIndex] = useState(LIMIT);\n\n    const history = useHistory();\n\n    useEffect(() => {\n        if (activities.length > 0) {\n            setList(activities.slice(0, LIMIT))\n            setShowMore(true)\n            setIndex(LIMIT)\n        }\n    }, [activities.length])\n\n    const loadMore = () => {\n        const newIndex = index + LIMIT;\n        const newShowMore = newIndex <= (activities.length - 1);\n        const newList = list.concat(activities.slice(index, newIndex));\n        setIndex(newIndex);\n        setList(newList);\n        setShowMore(newShowMore);\n    }\n    const toggleContent = () => {\n        setShowContent(prevState => (!prevState));\n    }\n\n    useEffect(() => {\n        if (!cardId) {\n            const parentNode = document.getElementById('boardActivity')\n            if (parentNode && parentNode.childNodes[1]) {\n                parentNode.childNodes[1].addEventListener('click', handleAnchorClick)\n                return () => {\n                    parentNode.childNodes[1].removeEventListener('click', handleAnchorClick)\n                }\n            }\n        }\n    }, [list])\n\n    const handleAnchorClick = (ev) => {\n        //Disabling  a tag default behavior since we are rendering it from md and not as react 'Link to'\n        ev.preventDefault();\n        ev.stopPropagation()\n        var href = ev.target.getAttribute('href');\n        history.push(href)\n    }\n    return (\n        <div className=\"activity-log\">\n            {cardId && <button className=\"modal-btn\" onClick={toggleContent}>{showContent ? 'Hide details' : 'Show details'}</button>}\n            {showContent && list.length > 0 && list.map(activity => (\n                <div className='activity-content' key={activity.id}>\n                    {cardId ?\n                        <p className=\"activity-desc\">{activity.cardTxt}</p> :\n                        <Markdown className=\"activity-desc\" id='boardActivity' options={{ forceBlock: true }}>{activity.boardTxt}</Markdown>}\n                    <Moment calendar={calendarStrings}>{activity.date}</Moment>\n                </div>\n            ))}\n            {showContent && showMore && activities.length > LIMIT && <button className=\"clear-btn show-more-btn\" onClick={loadMore}> Load More </button>}\n        </div>\n    )\n}\n\nexport default memo(ActivityLog) \n","import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react'\nimport { useParams, useHistory, useRouteMatch } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'\nimport useOnClickOutside from '../hooks/useOnClickOutSide';\n\nimport { loadCard, saveBoard, updateCard } from '../store/actions/boardActions';\nimport { addActivity } from '../store/actions/activityActions';\n\nimport { boardService } from '../services/board.service';\nimport Color from 'color-thief-react';\nimport Moment from 'react-moment';\nimport { RiArrowDownSLine, RiCloseLine } from 'react-icons/ri';\n\nimport TextEditor from '../components/TextEditor';\nimport CardActions from '../components/card-cmps/card-actions/CardActions';\nimport CardChecklist from '../components/card-cmps/card-actions/checklist-cmps/CardChecklist';\nimport LabelList from '../components/card-cmps/card-actions/LabelList';\nimport ActivityLog from '../components/ActivityLog';\nimport CoverPicker from '../components/card-cmps/card-actions/CoverPicker';\nimport LabelPicker from '../components/card-cmps/card-actions/LabelPicker';\nimport DatePicker from '../components/card-cmps/card-actions/DatePicker';\n\n\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday]',\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    sameElse: 'MMMM D'\n};\n\n\nconst CardDetails = () => {\n    const dispatch = useDispatch()\n    const currCard = useSelector(state => state.board.currCard)\n    const board = useSelector(state => state.board.currBoard)\n\n    const [activeAction, setActiveAction] = useState(null)\n    const [cardCopy, setCard] = useState(null)\n\n    const wrapperRef = useRef(null)\n    const modalHeaderRef = useRef(null)\n    const exceptionRef = useRef(null)\n\n    const { cardId } = useParams();\n    const history = useHistory();\n    const { url } = useRouteMatch();\n    \n    useEffect(() => {\n        const load = async () => {\n            const res = await dispatch(loadCard(cardId))\n            if (!res) {\n                history.push(`/board/${board._id}`)\n            }\n        }\n        load()\n    }, [])\n\n    useEffect(() => {\n\n        document.body.style.overflowX = 'hidden'\n        return () => {\n            // document.body.style.overflowX = 'unset'\n            document.body.style.overflowX = 'unset'\n\n        }\n    }, [])\n\n\n    useEffect(() => {\n        const setCardCopy = () => {\n            if (currCard) {\n                setCard({ ...currCard })\n            }\n        }\n        setCardCopy()\n    }, [currCard])\n\n    const closeModal = () => {\n        history.push(`/board/${board._id}`)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        closeModal()\n    });\n\n    useOnClickOutside(modalHeaderRef, () => {\n        setActiveAction(null)\n    });\n\n    const handleChange = (ev) => {\n        setCard({ ...cardCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const onUpdateCard = (card, activity = null) => {\n        card ? updateBoard({ ...card }, activity) : updateBoard({ ...cardCopy })\n    }\n\n    const updateBoard = useCallback((card, activity) => {\n        dispatch(updateCard(card))\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.cardLists.forEach(cardList => {\n            let idx = cardList.cards.findIndex(currCard => currCard.id === card.id)\n            if (idx !== -1) {\n                cardList.cards.splice(idx, 1, card)\n            }\n        })\n        dispatch(saveBoard(boardCopy))\n        if (activity) {\n            dispatch(addActivity(activity))\n        }\n    }, [dispatch]);\n\n\n    const updateBoardLabels = (updatedLabels, editedLabel) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.labels = updatedLabels\n        boardCopy.cardLists.forEach(cardList => {\n            cardList.cards.forEach(card => {\n                let currLabel = card.labels.find(label => label.id === editedLabel.id)\n                if (currLabel) {\n                    currLabel.title = editedLabel.title\n                }\n            })\n        })\n        dispatch(saveBoard(boardCopy))\n    }\n\n    const handleIsDone = (ev) => {\n        ev.stopPropagation()\n        ev.preventDefault()\n        const { checked } = ev.target\n        const updatedCard = { ...cardCopy }\n        updatedCard.isDone = checked\n        const newActivity = boardService.newActivity(\n            `Marked the due date ${updatedCard.isDone ? 'complete' : 'incomplete'}`,\n            `Marked the due date ${updatedCard.isDone ? 'complete' : 'incomplete'} on [${updatedCard.title}](${url})`,\n            updatedCard.id\n        )\n        updateBoard(updatedCard, newActivity)\n    }\n\n    const handleActiveAction = (ev, action) => {\n        const { target } = ev\n        exceptionRef.current = target\n        if (action === activeAction) {\n            setActiveAction(null)\n            return\n        } else {\n            setActiveAction(action)\n        }\n    }\n\n\n    const isDue = useMemo(() => {\n        if (currCard) {\n            let date = new Date()\n            date.setHours(0, 0, 0, 0)\n            date.setDate(date.getDate() + 1)\n            if (currCard.isDone) {\n                return { class: 'card-complete', txt: 'Complete' }\n            }\n            if (date.getTime() === currCard.dueDate) {\n                return { class: 'due-soon', txt: 'Due soon' }\n            } if (currCard.dueDate <= Date.now()) {\n                return { class: 'over-due', txt: 'Over due' }\n            } else return ''\n\n        }\n    }, [currCard]);\n\n\n    return (\n        <div className='card-details'>\n            <div className={'cover'} ></div>\n            {currCard &&\n                <div className='card-modal' ref={wrapperRef}>\n                    {currCard.cover.background &&\n                        <Color src={currCard.cover.background} crossOrigin='anonymous' format='hex'>\n                            {({ data }) => {\n                                return (\n                                    <div\n                                        className='modal-header '\n                                        style={{ backgroundImage: `url(${currCard.cover.background})`, backgroundColor: data ? data : currCard.cover.background }}\n                                    >\n                                        {currCard.cover.background &&\n                                            <button className='modal-btn' onClick={(ev) => handleActiveAction(ev, 'coverPicker')}>\n                                                Cover</button>}\n\n                                        {activeAction === 'coverPicker' &&\n                                            <CoverPicker // outside CardActions\n                                                card={currCard}\n                                                onCardUpdated={onUpdateCard}\n                                                onCloseModal={() => handleActiveAction('coverPicker')}\n                                                wrapperRef={modalHeaderRef}\n                                                exceptionRef={exceptionRef}\n                                            />}\n                                    </div>\n                                )\n                            }}\n                        </Color>\n                    }\n                    <a onClick={closeModal} className='modal-close-btn icon-lg' >\n                        <RiCloseLine />\n                    </a>\n                    <div className='modal-module'>\n                        <div className='card-title'>\n                            <TextEditor type='h3' name='title' text={currCard.title} onChange={handleChange} onInputBlur={onUpdateCard} />\n                        </div>\n                    </div>\n                    <div className='card-content'>\n                        <div className='left-side'>\n                            <div className='modal-module'>\n                                <div className='card-labels-date'>\n                                    {currCard.labels.length > 0 &&\n                                        <div className=\"card-labels\">\n                                            <h3 className='card-item-title'>Labels</h3>\n                                            <div className='card-labels-list' >\n                                                <LabelList\n                                                    expandMode={true}\n                                                    onLabelClicked={(ev) => handleActiveAction(ev, 'labelPicker')}\n                                                    labels={currCard.labels} />\n                                            </div>\n                                            {activeAction === 'labelPicker' &&\n                                                <LabelPicker // outside CardActions\n                                                    card={currCard}\n                                                    onCardUpdated={onUpdateCard}\n                                                    labelsUpdated={updateBoardLabels}\n                                                    onCloseModal={() => handleActiveAction('labelPicker')}\n                                                    labels={board.labels}\n                                                    exceptionRef={exceptionRef}\n                                                />}\n                                        </div>}\n                                    {currCard.dueDate &&\n                                        <div className='card-due-date'>\n                                            <h3 className='card-item-title'>Due date</h3>\n                                            <div className='modal-btn' onClick={(ev) => handleActiveAction(ev, 'datePicker')}>\n                                                <label>\n                                                    <input className='css-checkbox' type='checkbox' name='isDone' checked={currCard.isDone} onChange={handleIsDone} />\n                                                    <i></i>\n                                                </label>\n                                                <Moment calendar={calendarStrings} date={currCard.dueDate} />\n                                                <span className={'card-badge ' + (isDue ? isDue.class : '')}>{isDue.txt}</span>\n                                                <RiArrowDownSLine className=\"icon-lg\" />\n\n                                            </div>\n\n                                            {activeAction === 'datePicker' &&\n                                                <DatePicker\n                                                    card={currCard}\n                                                    onCardUpdated={onUpdateCard}\n                                                    exceptionRef={exceptionRef}\n                                                    onCloseModal={() => handleActiveAction('datePicker')}\n                                                />}\n                                        </div>}\n                                </div>\n                            </div>\n                            <div className='modal-module'>\n                                <div className='card-description'>\n                                    <h3 className='section-title'>Description</h3>\n                                    <TextEditor type='p' name='description' text={currCard.description} onChange={handleChange} onInputBlur={onUpdateCard} isWide={true} placeholder='Add a more detailed description…' />\n                                </div>\n                            </div>\n                            {currCard.checklists.length > 0 && <div className='modal-module'>\n                                {currCard.checklists.map(checklist => (\n                                    <CardChecklist\n                                        checklist={checklist}\n                                        key={checklist.id}\n                                        card={currCard}\n                                        onUpdateCard={onUpdateCard}\n                                    />\n\n                                ))}\n                            </div>}\n                            <div className='modal-module'>\n                                <h3 className='section-title'>Activity</h3>\n                                <ActivityLog cardId={currCard.id} />\n                            </div>\n                        </div>\n                        <div className='right-side'>\n                            {board && <CardActions\n                                card={currCard}\n                                labels={board.labels}\n                                onUpdateCard={onUpdateCard}\n                                onLabelsUpdated={updateBoardLabels}\n                            />}\n                        </div>\n                    </div>\n                </div>\n            }\n        </div >\n        // </section>\n    )\n}\n\nexport default CardDetails\n","import React, { useState, useRef } from 'react'\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\n\nimport { boardService } from '../../services/board.service'\n\nimport { RiCloseLine } from 'react-icons/ri'\nimport TextEditor from '../TextEditor'\n\n\nconst AddCardList = ({ board, onBoardUpdated }) => {\n    const [newCardList, setCardList] = useState(null)\n    const wrapperRef = useRef(null)\n\n    const getEmptyCardList = () => {\n        const emptyCardList = boardService.getEmptyList()\n        setCardList(emptyCardList)\n    }\n    const handleChange = (ev) => {\n        setCardList({ ...newCardList, [ev.target.name]: ev.target.value })\n    }\n\n    const addCardList = () => {\n        if (!newCardList.title) return\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.cardLists.push(newCardList);\n        onBoardUpdated(boardCopy)\n        setCardList(null)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        setCardList(null)\n    });\n\n    return (\n        <div className=\"list-wrapper \">\n            {newCardList ?\n                <div className=\"list add-list\" ref={wrapperRef}>\n                    <TextEditor\n                        isFocused={true}\n                        onChange={handleChange}\n                        onSubmit={addCardList}\n                        name=\"title\"\n                        type=\"p\"\n                    />\n                    <div className=\"add-list-controls\">\n                        <button className=\"submit-btn\" onClick={addCardList}>Add List</button>\n                        <button onClick={() => setCardList(null)} className=\"clear-btn icon-lg\">\n                            <RiCloseLine />\n                        </button>\n                    </div>\n                </div>\n                :\n                <button className=\"modal-btn\" onClick={getEmptyCardList}>Add another list </button>\n            }\n        </div>\n    )\n}\n\nexport default AddCardList\n","import React, { useCallback, useEffect, useMemo } from 'react'\nimport { useState } from 'react'\nimport { RiArrowLeftSLine } from 'react-icons/ri'\nimport RiseLoader from \"react-spinners/RiseLoader\";\nimport { css } from \"@emotion/core\";\nconst override = css`\n  position: fixed;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n`;\n\nconst BoardBgPicker = ({ onGoBack, board, onBoardUpdated }) => {\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const imgs = [\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389449/Taskflow%20backgrounds/cacjncpn6qp4qivznyaj.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389449/Taskflow%20backgrounds/jukyghlsvncbyovcqvce.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389422/Taskflow%20backgrounds/2.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389420/Taskflow%20backgrounds/itjhqv6u26jigvxmzwsi.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389420/Taskflow%20backgrounds/sltgv2lrkmcbivdxxmb3.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389410/Taskflow%20backgrounds/yeozivyoaywjmj4hciwp.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389409/Taskflow%20backgrounds/idhd2wg760g7xa8vsze2.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389400/Taskflow%20backgrounds/t9jpmstlb7oaijmbynmw.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389394/Taskflow%20backgrounds/ponbl1heu65x22wus4ui.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389391/Taskflow%20backgrounds/nnobztxqgr82swa61ne4.jpg'\n    ]\n    const [bgType, setBgType] = useState(null)\n\n    const handleGoBack = () => {\n        if (bgType) {\n            setBgType(null)\n        } else {\n            onGoBack()\n        }\n    }\n    const [loading, setLoading] = useState(false);\n\n\n    const handleStyle = (background, type) => {\n        if (background === board.style.background) return;\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.style = { background: background, type: type }\n        // // setLoading(true)\n        onBoardUpdated(boardCopy)\n    }\n\n    return (\n        <div className=\"board-menu-bg-picker\">\n            {console.log('rednered')}\n\n            <button className=\"pop-up-back-btn clear-btn icon-lg\" onClick={handleGoBack} >\n                <RiArrowLeftSLine />\n            </button>\n            {!bgType && <div className=\"bg-picker-controls\">\n                <div className=\"bg-picker-btn\" onClick={() => setBgType('photos')}>\n                    <span className=\"photos image\"></span>\n                    <span className=\"bg-btn-title\">Photos</span>\n                </div>\n                <div className=\"bg-picker-btn\" onClick={() => setBgType('colors')}>\n                    <span className=\"colors image\"></span>\n                    <span className=\"bg-btn-title\">Colors</span>\n                </div>\n                {/* <button className=\"clear-btn bg-picker-btn photos\" onClick={() => setBgType('photos')}><span className=\"bg-btn-title\">Photos</span></button>\n                <button className=\"clear-btn bg-picker-btn colors\" onClick={() => setBgType('colors')}><span className=\"bg-btn-title\">Colors</span></button> */}\n            </div>}\n            <RiseLoader\n                css={override}\n                size={15} color={\"#2c3e50\"} loading={loading} />\n\n            { bgType === 'photos' &&\n                <div className=\"bg-section-wrapper\">\n                    {imgs.map((img, index) => (\n                        <span\n                            style={{ backgroundImage: `url(${img})` }}\n                            className={'bg-item'}\n                            key={index}\n                            onClick={() => handleStyle(img, 'img')}\n                        >\n                        </span>\n                    ))}\n                </div>}\n            {bgType === 'colors' &&\n                <div className=\"bg-section-wrapper\">\n                    {coverColors.map((color, idx) => (\n                        <span\n                            className={'bg-item'}\n                            style={{ backgroundColor: color }}\n                            key={idx}\n                            onClick={() => handleStyle(color, 'color')}\n                        >\n                        </span>\n                    ))}\n                </div>}\n            {/* {loading && <div className=\"loading\">         */}\n\n            {/* </div>} */}\n        </div >\n    )\n}\n\nexport default BoardBgPicker\n","import React, { useEffect, useState,useRef } from 'react'\nimport { useHistory, } from 'react-router-dom';\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\n\nimport {RiCloseLine } from 'react-icons/ri'\nimport { FaListUl } from \"react-icons/fa\";\n\nimport ActivityLog from '../ActivityLog'\nimport BoardBgPicker from './BoardBgPicker'\n\nconst BoardMenu = ({ isMenuOpen, closeMenu, menuBtnRef, board, onBoardUpdated }) => {\n    const history = useHistory();\n    const wrapperReff = useRef(null)\n    const [selectedAction, setAction] = useState(null)\n\n\n    useOnClickOutside(wrapperReff, () => {\n        if (isMenuOpen) {\n            closeMenu()\n        }\n    }, menuBtnRef);\n\n    useEffect(() => {\n        if (isMenuOpen) {\n            setAction(null)\n        }\n    }, [isMenuOpen])\n\n    useEffect(() => {\n        return history.listen((location) => {\n            if (wrapperReff.current.classList.contains('menu-open')) {\n                closeMenu()\n            }\n        })\n    }, [history])\n\n    const selectAction = (action) => {\n        switch (action) {\n            case 'backgroundPicker':\n                setAction({ ...selectedAction, type: action, title: 'Background' })\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleGoBack = () => {\n        setAction(null)\n    }\n\n    return (\n        <div className={`board-menu ${isMenuOpen ? 'menu-open' : '  '}`} ref={wrapperReff}>\n            <div className=\"pop-up-header\">\n                <h3>{selectedAction ? selectedAction.title : 'Menu'}</h3>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={closeMenu}>\n                    <RiCloseLine />\n                </button>\n\n            </div>\n            { !selectedAction ?\n                <div className=\"board-menu-content\">\n                    <div className=\"board-menu-nav\">\n                        <button className=\"clear-btn board-menu-nav-btn\" onClick={() => selectAction('backgroundPicker')}>Change background</button>\n                        <button className=\"clear-btn board-menu-nav-btn\" onClick={() => selectAction('boardName')}>Change board name</button>\n                        <button className=\"clear-btn board-menu-nav-btn\">Delete board</button>\n                    </div>\n                    <div>\n                        <div className=\"section-title\">\n                            <FaListUl className=\"icon-sm\" />\n                            <h4 className=\"\">Activity</h4>\n                        </div>\n\n                        <ActivityLog />\n                    </div>\n                </div> :\n                <div className=\"board-menu-content\">\n                    {selectedAction.type === 'backgroundPicker' && <BoardBgPicker onGoBack={handleGoBack} board={board} onBoardUpdated={onBoardUpdated} />}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default BoardMenu\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { getBoardById, saveBoard, setCurrBoard } from '../store/actions/boardActions'\nimport { Route, useRouteMatch, useParams, useHistory } from 'react-router-dom'\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { utilService } from '../services/util.service'\nimport { socketService } from '../services/socket.service';\n\n\nimport CardList from '../components/card-cmps/CardList'\nimport CardDetails from './CardDetails'\nimport AddCardList from '../components/card-cmps/AddCardList'\nimport { RiCloseLine } from 'react-icons/ri';\nimport BoardMenu from '../components/board-menu-cmps/BoardMenu';\nimport { boardService } from '../services/board.service';\nimport { addActivity, loadActivities } from '../store/actions/activityActions';\n\nconst BoardDetails = () => {\n    const { boardId } = useParams();\n    let { path } = useRouteMatch();\n    let history = useHistory();\n    let { url } = useRouteMatch();\n\n    const dispatch = useDispatch()\n    const board = useSelector(state => state.board.currBoard)\n\n    const initialRender = useRef(true)\n    const menuBtnRef = useRef(null)\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n    useEffect(() => {\n        const loadBoard = async () => {\n            try {\n                await dispatch(getBoardById(boardId))\n                // setLoading(false);\n            } catch (e) {\n                // setLoading(false);\n                history.push('/boards')\n            }\n        }\n        loadBoard()\n    }, [])\n\n    useEffect(() => {\n        if (initialRender.current && board) {\n            dispatch(loadActivities(boardId))\n            socketService.setup()\n            socketService.emit('board topic', board._id)\n            socketService.on('update board', updateCurrBoard);\n            initialRender.current = false\n        }\n\n    }, [board])\n\n    useEffect(() => {\n        return () => {\n            console.log('render1');\n            socketService.off('update board', updateCurrBoard);\n            socketService.terminate();  // clean up\n        };\n    }, [])\n\n    const updateList = async (cardList, activity = null) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.cardLists.findIndex(currList => currList.id === cardList.id)\n        boardCopy.cardLists.splice(idx, 1, cardList)\n        await updateBoard(boardCopy)\n        if (activity) {\n            dispatch(addActivity(activity))\n        }\n    }\n\n    const updateBoard = useCallback((updatedBoard) => {\n        dispatch(saveBoard(updatedBoard))\n    }, [dispatch]);\n\n    const updateCurrBoard = (updatedBoard) => {\n        dispatch(setCurrBoard(updatedBoard))\n    }\n\n    const removeList = (cardListId) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.cardLists.findIndex(currList => currList.id === cardListId)\n        boardCopy.cardLists.splice(idx, 1)\n        updateBoard(boardCopy)\n    }\n    const onDragEnd = (result) => {\n        // Dropped outside the list\n\n        const { source, destination } = result;\n\n        if (!destination) {\n            return;\n        }\n        if ((source.index === destination.index) &&\n            (source.droppableId === destination.droppableId)) { // Check if  update is required\n            return\n        }\n\n        let cardlists = [...board.cardLists];\n        const newState = JSON.parse(JSON.stringify(board));\n\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\n            const items = utilService.reorder(cardlists, source.index, destination.index);\n            newState.cardLists = items;\n        } else {\n            const sIndex = +source.droppableId;\n            const dIndex = +destination.droppableId;\n            if (sIndex === dIndex) {\n                const items = utilService.reorder(cardlists[sIndex].cards, source.index, destination.index);\n                newState.cardLists[sIndex].cards = items;\n            }\n            else {\n                const res = utilService.move(cardlists[sIndex].cards, cardlists[dIndex].cards, source, destination);\n                newState.cardLists[sIndex].cards = res[sIndex];\n                newState.cardLists[dIndex].cards = res[dIndex];\n\n                const { fromList, toList, card } = { fromList: cardlists[sIndex].title, toList: cardlists[dIndex].title, card: cardlists[sIndex].cards[source.index] }\n                const newActivity = boardService.newActivity(\n                    `Moved this card from ${fromList} to ${toList}`,\n                    `Moved [${card.title}](${url}/${card.id}) from ${fromList} to ${toList}`,\n                    card.id\n                )\n                dispatch(addActivity(newActivity))\n            }\n        }\n        updateBoard(newState)\n    }\n\n    const toggleMenu = () => {\n        setIsMenuOpen(prevState => (!prevState));\n    }\n\n    if (!board) {\n        return (<div style={{ paddingTop: '50px' }}>baba\n        </div>)\n    }\n\n    else return (\n        <section className=\"board-details\" style={board.style.type === 'color' ? { backgroundColor: `${board.style.background}` } : { backgroundImage: `url(${board.style.background})` }}>\n            <div className=\"board-header\">\n                <button>CLICK HERE</button>\n                <button className=\"clear-btn open-menu-btn\" onClick={toggleMenu} ref={menuBtnRef}>\n                    <span className=\"icon-sm\"><BsThreeDots /></span><span>Menu</span>\n                </button>\n            </div>\n            <BoardMenu isMenuOpen={isMenuOpen} closeMenu={toggleMenu} menuBtnRef={menuBtnRef} board={board} onBoardUpdated={updateBoard} />\n            {\n                board &&\n                <DragDropContext\n                    onDragEnd={onDragEnd}>\n                    <Droppable droppableId=\"board\" type=\"lists\" direction='horizontal' >\n                        {(provided, snapshot) => (\n                            <div className=\"list-container\" ref={provided.innerRef} {...provided.droppableProps}>\n                                {board.cardLists && board.cardLists.map((cardList, index) => (\n                                    <Draggable key={cardList.id} draggableId={cardList.id} index={index} type=\"lists\">\n                                        {(provided, snapshot) => (\n\n                                            <CardList\n                                                cardListIdx={index}\n                                                cardList={cardList}\n                                                onRemoveList={removeList}\n                                                onListUpdated={updateList}\n                                                innerRef={provided.innerRef}\n                                                provided={provided}\n                                            />\n                                        )}\n\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n\n                                <AddCardList board={board} onBoardUpdated={updateBoard} />\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            }\n            { board && <Route exact path={`${path}/:cardId`} component={CardDetails} />}\n        </section >\n    )\n}\n\nexport default BoardDetails\n\n\n\n\n","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyCard,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    getActivities,\n    addActivity\n    // save\n}\n\nfunction query() {\n    return HttpService.get('board')\n}\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\nasync function update(board) {\n    return HttpService.put(`board/${board._id}`, board)\n}\nfunction getActivities(boardId) {\n    return HttpService.get(`activity/${boardId}`)\n}\nfunction addActivity(boardId, newActivity) {\n    return HttpService.put(`activity/${boardId}`, newActivity)\n}\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        cards: []\n    }\n}\nfunction getEmptyCard() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        images: [],\n        checklists: [],\n        cover: {\n            background: '',\n            isFull: null,\n            type: null\n        }\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: [],\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, cardId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        cardId,\n        date: Date.now()\n    }\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     cardLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             cards: [\n//                 {\n//                     cardListId: 'list1',\n//                     id: 'card1',\n//                     title: 'This is the card title',\n//                     description: 'This is the card description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     cardListId: 'list1',\n//                     id: 'card2',\n//                     title: 'This is the card title',\n//                     description: 'This is the card description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     cardListId: 'list1',\n//                     id: 'card3',\n//                     title: 'This is the card title',\n//                     description: 'This is the card description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     cardListId: 'list1',\n//                     id: 'card4',\n//                     title: 'This is the card title',\n//                     description: 'This is the card description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\n// async function stall(stallTime = 3000) {\n//     await new Promise(resolve => setTimeout(resolve, stallTime));\n//   }","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n    }\n}\n\nexport function saveBoard(updatedBoard) {\n    return async (dispatch, getState) => {\n        const prevBoard = getState().board.currBoard\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n        try {\n            const savedBoard = await boardService.update(updatedBoard)\n            console.log('after board saved', savedBoard)\n            socketService.emit('update board', savedBoard);\n        } catch (error) {\n            dispatch({ type: 'SET_BOARD', currBoard: prevBoard })\n            console.log('Err: Board saving failed')\n\n        }\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadCard(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currCard\n    }\n}\n\nexport function updateCard(card) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currCard: card });\n    }\n}\n\nexport function toggleLabels() {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_LABELS' });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadCard(cardId) {\n    //     state.board.cardLists.forEach(cardList => {\n    //         const card = cardList.cards.find(card => card.id === cardId)\n    //         if (card) {\n    //             dispatch({ type: 'SET_TASK', currCard: card })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateCardList(cardList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.cardLists.findIndex(currList => currList.id === cardList.id)\n    //     boardCopy.cardLists.splice(idx, 1, cardList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeCardList(cardListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.cardLists.findIndex(currList => currList.id === cardListId)\n    //     boardCopy.cardLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateCard(card) {\n    //     dispatch({ type: 'SET_TASK', currCard: card })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.cardLists.forEach(cardList => {\n    //       let idx = cardList.cards.findIndex(currCard => currCard.id === card.id)\n    //       if (idx !== -1) {\n    //         cardList.cards.splice(idx, 1, card)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    if (socket) {\r\n        socket.off(eventName, cb)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    if (socket) {\r\n        socket.emit(eventName, data);\r\n    }\r\n}"],"sourceRoot":""}
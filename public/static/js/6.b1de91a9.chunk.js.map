{"version":3,"sources":["pages/BoardsPage.jsx","services/http.service.js","services/board.service.js","store/actions/boardActions.js","services/util.service.js","services/socket.service.js"],"names":["BoardsPage","history","useHistory","console","log","boards","useSelector","state","board","dispatch","useDispatch","useEffect","a","loadBoards","getBoards","length","map","key","_id","to","axios","Axios","create","withCredentials","endpoint","data","ajax","method","url","res","response","status","boardService","query","HttpService","getById","update","getEmptyList","id","utilService","makeId","title","theme","tasks","getEmptyTask","description","creatorId","membersId","comments","dueDate","labels","isDone","images","checklists","cover","background","isFull","type","getEmptyCheckList","listItems","getEmptyListItem","newActivity","cardTxt","boardTxt","taskId","date","Date","now","currBoard","getBoardById","warn","saveBoard","updatedBoard","boardCopy","JSON","parse","stringify","activities","savedBoard","socketService","emit","setCurrBoard","loadTask","getState","currTask","updateTask","task","toggleLabels","txt","possible","i","charAt","Math","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","reorder","list","startIndex","endIndex","Array","from","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","socket","setup","io","terminate","on","eventName","cb","off"],"mappings":"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","file":"static/js/6.b1de91a9.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadBoards } from '../store/actions/boardActions'\n\nconst BoardsPage = () => {\n    const history = useHistory();\n\n    console.log('history', history);\n    // const { loadBoards, boards } = useContext(BoardContext)\n    const boards = useSelector(state => state.board.boards);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const getBoards = async () => {\n            await dispatch(loadBoards())\n            console.log('adsasd')\n        }\n        getBoards()\n    }, [])\n\n    return (\n        <div>\n            <h1>Boards new</h1>\n            {boards && boards.length && boards.map(board => (\n                <div key={board._id}>\n                    <NavLink to={`board/${board._id}`}>{board._id}</NavLink>\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\n\nexport default BoardsPage\n// export default connect(mapStateToProps, mapDispatchToProps)(BoardsPage);\n","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyTask,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    // save\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     taskLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             tasks: [\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task1',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task2',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task3',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task4',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\nfunction query() {\n    return HttpService.get('board')\n}\n\nasync function stall(stallTime = 3000) {\n    await new Promise(resolve => setTimeout(resolve, stallTime));\n  }\n\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\n// function save(newBoard) {\n//     board = newBoard\n//     return JSON.parse(JSON.stringify(board))\n// }\n\n\nasync function update(board) {\n    // console.log('board');\n    // await stall(3000)\n    return HttpService.put(`board/${board._id}`, board)\n}\n\n\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        tasks: []\n    }\n}\n\nfunction getEmptyTask() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        images: [],\n        checklists: [],\n        cover: {\n            background: '',\n            isFull: null,\n            type: null\n        }\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: [],\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, taskId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        taskId,\n        date: Date.now()\n    }\n}\n\n// function getTaskById(taskId) {\n//     for (let i = 0; i < board.taskLists.length; i++) {\n//         var task = board.taskLists[i].tasks.find(task => task.id === taskId)\n//         if (task) {\n//             return task\n//         }\n//     }\n// }\n","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n\n    }\n\n}\n\nexport function saveBoard(updatedBoard) {\n    return async dispatch => {\n        const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n         boardCopy.activities = []\n        dispatch({ type: 'SET_BOARD', currBoard: boardCopy })\n        const savedBoard = await boardService.update(boardCopy)\n        socketService.emit('update board', savedBoard);\n        // console.log('afte boarrd saved', savedBoard);\n        // dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadTask(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currTask\n    }\n}\n\nexport function updateTask(task) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currTask: task });\n    }\n}\n\nexport function toggleLabels() {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_LABELS' });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadTask(taskId) {\n    //     state.board.taskLists.forEach(taskList => {\n    //         const task = taskList.tasks.find(task => task.id === taskId)\n    //         if (task) {\n    //             dispatch({ type: 'SET_TASK', currTask: task })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateTaskList(taskList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n    //     boardCopy.taskLists.splice(idx, 1, taskList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeTaskList(taskListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n    //     boardCopy.taskLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateTask(task) {\n    //     dispatch({ type: 'SET_TASK', currTask: task })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.taskLists.forEach(taskList => {\n    //       let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //       if (idx !== -1) {\n    //         taskList.tasks.splice(idx, 1, task)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    if (socket) {\r\n        socket.off(eventName, cb)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    if (socket) {\r\n        socket.emit(eventName, data);\r\n    }\r\n}"],"sourceRoot":""}
{"version":3,"sources":["pages/HomePage.jsx","components/MainNav.jsx","pages/BoardsPage.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/generalReducer.js","store/index.js","index.js","services/util.service.js","services/http.service.js","services/board.service.js","store/actions/boardActions.js","services/socket.service.js"],"names":["HomePage","MainNav","className","to","exact","activeClassName","BoardsPage","history","useHistory","console","log","boards","useSelector","state","board","dispatch","useDispatch","useEffect","a","loadBoards","getBoards","length","map","key","_id","BoardDetails","React","lazy","App","path","component","fallback","style","paddingTop","fontSize","Boolean","window","location","hostname","match","initialState","currBoard","currTask","isExpanded","isInitialAddition","store","createStore","combineReducers","action","type","JSON","parse","stringify","taskToUpdate","taskLists","forEach","taskList","tasks","find","task","id","general","isInitial","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","utilService","makeId","txt","possible","i","charAt","Math","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","reorder","list","startIndex","endIndex","Array","from","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","axios","Axios","create","withCredentials","endpoint","data","ajax","method","url","res","response","status","boardService","query","HttpService","getById","update","getEmptyList","title","theme","getEmptyTask","description","creatorId","membersId","comments","dueDate","labels","isDone","images","checklists","cover","background","isFull","getEmptyCheckList","listItems","getEmptyListItem","newActivity","cardTxt","boardTxt","taskId","date","Date","now","getBoardById","warn","saveBoard","updatedBoard","boardCopy","savedBoard","socketService","emit","setCurrBoard","loadTask","getState","updateTask","toggleLabels","socket","setup","io","terminate","on","eventName","cb","off"],"mappings":"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","file":"static/js/main.2c715c7a.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <h1>Home Page</h1>\n        </div>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nconst MainNav = () => {\n    return (\n        <nav className=\"main-navbar\">\n            <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Home </NavLink>\n                | <NavLink to=\"/boards\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Boards </NavLink>\n        </nav>\n    )\n}\n\nexport default MainNav","import React, { useEffect } from 'react'\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadBoards } from '../store/actions/boardActions'\n\nconst BoardsPage = () => {\n    const history = useHistory();\n\n    console.log('history', history);\n    // const { loadBoards, boards } = useContext(BoardContext)\n    const boards = useSelector(state => state.board.boards);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const getBoards = async () => {\n            await dispatch(loadBoards())\n            console.log('adsasd')\n        }\n        getBoards()\n    }, [])\n\n    return (\n        <div>\n            <h1>Boards new</h1>\n            {boards && boards.length && boards.map(board => (\n                <div key={board._id}>\n                    <NavLink to={`board/${board._id}`}>{board._id}</NavLink>\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\n\nexport default BoardsPage\n// export default connect(mapStateToProps, mapDispatchToProps)(BoardsPage);\n","import React, { lazy, Suspense } from 'react';\nimport { HashRouter as Router, Switch, Route, useHistory } from \"react-router-dom\";\n\nimport HomePage from './pages/HomePage';\nimport MainNav from './components/MainNav';\n// import BoardDetails from './pages/BoardDetails';\n\nimport BoardsPage from './pages/BoardsPage';\nimport { createBrowserHistory } from 'history';\nconst BoardDetails = React.lazy(() => import('./pages/BoardDetails'));\n// const history = createBrowserHistory()\n\nfunction App() {\n \n  // console.log('d',process.env)\n\n  return (\n    <main>\n      <Router>\n        <MainNav />\n        <Switch>\n\n       \n\n          <Route path=\"/boards\" component={BoardsPage} />\n          <Suspense fallback={<h1 style={{ paddingTop: '50px', fontSize:'100px' }}>Still Loadingâ€¦</h1>}>\n            <Route path=\"/board/:boardId\" component={BoardDetails} />\n          </Suspense>\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    boards: null,\n    currBoard: null,\n    currTask: null,\n    isExpanded: false\n};\n\nexport const boardReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_BOARDS':\n            return {\n                ...state,\n                boards: JSON.parse(JSON.stringify(action.boards))\n            };\n        case 'SET_BOARD':\n            return {\n                ...state,\n                currBoard: JSON.parse(JSON.stringify(action.currBoard))\n            };\n        case 'SET_TASK':\n            let taskToUpdate;\n            state.currBoard.taskLists.forEach(taskList => {\n                taskList.tasks.find(task => {\n                    if (task.id === action.id) taskToUpdate = task\n                })\n            })\n            return {\n                ...state,\n                currTask: taskToUpdate ? { ...taskToUpdate } : null\n            };\n        case 'UPDATE_TASK':\n            return {\n                ...state,\n                currTask: { ...action.currTask }\n            }\n        case 'TOGGLE_LABELS':\n            return {\n                ...state,\n                isExpanded: !state.isExpanded\n            }\n        default:\n            return state\n    }\n}\n","const initialState = {\n   isInitialAddition:false\n};\n\nexport const generalReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_INITIAL_ADDITION':\n            return {\n                ...state,\n                isInitialAddition: action.isInitial\n            };\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { boardReducer } from './reducers/boardReducer';\nimport { generalReducer } from './reducers/generalReducer';\n\nconst store = createStore(combineReducers({\n    board: boardReducer,\n    general: generalReducer\n}), applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport App from './App.jsx';\nimport './styles/global.scss'\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyTask,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    // save\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     taskLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             tasks: [\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task1',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task2',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task3',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task4',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\nfunction query() {\n    return HttpService.get('board')\n}\n\nasync function stall(stallTime = 3000) {\n    await new Promise(resolve => setTimeout(resolve, stallTime));\n  }\n\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\n// function save(newBoard) {\n//     board = newBoard\n//     return JSON.parse(JSON.stringify(board))\n// }\n\n\nasync function update(board) {\n    // console.log('board');\n    // await stall(3000)\n    return HttpService.put(`board/${board._id}`, board)\n}\n\n\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        tasks: []\n    }\n}\n\nfunction getEmptyTask() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        images: [],\n        checklists: [],\n        cover: {\n            background: '',\n            isFull: null,\n            type: null\n        }\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: [],\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, taskId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        taskId,\n        date: Date.now()\n    }\n}\n\n// function getTaskById(taskId) {\n//     for (let i = 0; i < board.taskLists.length; i++) {\n//         var task = board.taskLists[i].tasks.find(task => task.id === taskId)\n//         if (task) {\n//             return task\n//         }\n//     }\n// }\n","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n\n    }\n\n}\n\nexport function saveBoard(updatedBoard) {\n    return async dispatch => {\n        const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n        // dispatch({ type: 'SET_BOARD', currBoard: boardCopy })\n        const savedBoard = await boardService.update(boardCopy)\n        dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n        socketService.emit('update board', savedBoard);\n        console.log('afte boarrd saved', savedBoard);\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadTask(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currTask\n    }\n}\n\nexport function updateTask(task) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currTask: task });\n    }\n}\n\nexport function toggleLabels() {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_LABELS' });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadTask(taskId) {\n    //     state.board.taskLists.forEach(taskList => {\n    //         const task = taskList.tasks.find(task => task.id === taskId)\n    //         if (task) {\n    //             dispatch({ type: 'SET_TASK', currTask: task })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateTaskList(taskList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n    //     boardCopy.taskLists.splice(idx, 1, taskList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeTaskList(taskListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n    //     boardCopy.taskLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateTask(task) {\n    //     dispatch({ type: 'SET_TASK', currTask: task })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.taskLists.forEach(taskList => {\n    //       let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //       if (idx !== -1) {\n    //         taskList.tasks.splice(idx, 1, task)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    if (socket) {\r\n        socket.off(eventName, cb)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    if (socket) {\r\n        socket.emit(eventName, data);\r\n    }\r\n}"],"sourceRoot":""}
{"version":3,"sources":["pages/HomePage.jsx","components/MainNav.jsx","services/http.service.js","services/util.service.js","services/board.service.js","services/socket.service.js","store/actions/boardActions.js","components/task-cmps/task-actions/LabelList.jsx","components/task-cmps/TaskPreview.jsx","hooks/useKeypress.jsx","components/TextEditor.jsx","components/task-cmps/ListMenu.jsx","hooks/useOnClickOutSide.js","components/task-cmps/TaskList.jsx","components/task-cmps/task-actions/LabelPicker.jsx","components/task-cmps/task-actions/DatePicker.jsx","components/task-cmps/task-actions/checklist-cmps/ChecklistPicker.jsx","services/cloudinary.service.js","components/task-cmps/task-actions/CoverPicker.jsx","components/task-cmps/task-actions/TaskActions.jsx","components/task-cmps/task-actions/checklist-cmps/ChecklistItem.jsx","components/task-cmps/task-actions/checklist-cmps/TaskChecklist.jsx","components/ActivityLog.jsx","pages/TaskDetails.jsx","components/task-cmps/AddTaskList.jsx","hooks/useAsyncAction.jsx","pages/BoardDetails.jsx","pages/BoardsPage.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/index.js","index.js"],"names":["HomePage","MainNav","to","className","exact","activeClassName","axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","response","status","console","log","utilService","makeId","length","txt","possible","i","charAt","Math","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","reorder","list","startIndex","endIndex","Array","from","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","boardService","query","HttpService","getById","update","board","_id","getEmptyList","id","title","theme","tasks","getEmptyTask","description","creatorId","membersId","comments","dueDate","labels","isDone","images","checklists","cover","background","isFull","type","getEmptyCheckList","listItems","getEmptyListItem","newActivity","cardTxt","boardTxt","taskId","date","Date","now","currBoard","socket","socketService","setup","io","terminate","on","eventName","cb","off","emit","saveBoard","updatedBoard","dispatch","boardCopy","JSON","parse","stringify","savedBoard","loadTask","getState","currTask","updateTask","task","LabelList","onLabelClicked","expandMode","useDispatch","isExpanded","useSelector","state","onClick","ev","preventDefault","map","label","key","style","backgroundColor","color","Container","styled","div","props","backgroundImage","minHeight","backgroundSize","display","fontSize","fontFamily","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","TaskPreview","useRouteMatch","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","draggable","src","dir","calendar","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","window","addEventListener","removeEventListener","TextEditor","text","name","onInputBlur","isWide","isFocused","blurInput","onChange","onSubmit","onEscape","isEditing","setIsEditing","initialText","setInitialText","inputEl","useRef","enter","esc","current","focus","undefined","target","value","ModuleText","React","createElement","updateText","autoFocus","rows","defaultValue","onBlur","inputVal","test","ListMenu","onCloseMenu","onRemoveList","onAddTask","useOnClickOutside","handler","listener","event","contains","document","TaskList","taskList","taskListIdx","onListUpdated","taskListCopy","setTaskListCopy","newTask","setNewTask","isMenuOpen","setIsMenuOpen","wrapperRef","emptyTask","handleTaskChange","updateList","updatedTaskList","addTask","clickSource","push","stopEditing","placeholder","LabelPicker","onCloseModal","onTaskUpdated","labelsUpdated","selectedLabel","setSelectedLabel","handleChange","updateLabel","labelsCopy","labelIdx","findIndex","taskCopy","taskLabelIdx","find","idx","toggleLabels","labelToEdit","href","selectLabelToEdit","DatePicker","onAddActivity","setDate","isTaskUpdated","setIsUpdated","moment","format","activity","addActivity","submitDate","ChecklistPicker","checklist","setChecklist","emptyChecklist","addChecklist","checklistCopy","uploadImg","UPLOAD_URL","formData","FormData","append","files","fetch","body","then","json","catch","err","error","HalfBgcWrapper","FullBgcWrapper","backgroundPosition","CoverPicker","selectedCover","setSelectedCover","loading","setLoading","handleSelected","handleLayout","handleThemeChange","handleUpload","cloudinaryService","img","isCover","htmlFor","height","width","TaskActions","onUpdateTask","onLabelsUpdated","currAction","setCurrAction","closeModal","toggle","isActive","ChecklistItem","item","onRemoveItem","itemCopy","setItem","initialRender","updateItem","checked","handleClose","TaskChecklist","newItem","setNewItem","progress","setProgress","addItem","doneCount","reduce","acc","donePrecent","round","emptyItem","removeItem","itemId","updateChecklist","currItem","currChecklist","percent","ActivityLog","activities","filter","dangerouslySetInnerHTML","__html","TaskDetails","activeAction","setActiveAction","setTask","modalHeaderRef","useParams","history","useHistory","load","updateBoard","taskLists","forEach","updateBoardLabels","updatedLabels","editedLabel","currLabel","unshift","crossOrigin","AddTaskList","onBoardUpdated","newTaskList","setTaskList","addTaskList","emptyTaskList","useAsyncAction","action","dependeces","isError","setIsError","asyncAction","useCallback","args","callback","BoardDetails","boardId","warn","loadBoard","setPlaceholderProps","path","updateCurrBoard","currList","setCurrBoard","removeList","taskListId","getDraggedDom","domQuery","querySelector","onDragUpdate","onDragEnd","tasklists","newState","items","sIndex","dIndex","direction","snapshot","droppableProps","component","BoardsPage","boards","getBoards","App","Boolean","location","hostname","match","initialState","store","createStore","combineReducers","taskToUpdate","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.db9322ca.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <h1>Home Page</h1>\n        </div>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nconst MainNav = () => {\n    return (\n        <nav>\n            <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Home </NavLink>\n                | <NavLink to=\"/boards\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Boards </NavLink>\n        </nav>\n        // <nav>\n        //     <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n        //         Home </NavLink>  \n        //         | <NavLink to=\"/board\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n        //         Board </NavLink>\n        // </nav>\n    )\n}\n\nexport default MainNav","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyTask,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    // save\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     taskLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             tasks: [\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task1',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task2',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task3',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task4',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\nfunction query() {\n    return HttpService.get('board')\n}\n\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\n// function save(newBoard) {\n//     board = newBoard\n//     return JSON.parse(JSON.stringify(board))\n// }\n\n\nfunction update(board) {\n    // console.log('board');\n    return HttpService.put(`board/${board._id}`, board)\n}\n\n\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        tasks: []\n    }\n}\n\nfunction getEmptyTask() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        images: [],\n        checklists: [],\n        cover: {\n            background: '',\n            isFull: null,\n            type: null\n        }\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: []\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, taskId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        taskId,\n        date: Date.now()\n    }\n}\n\n// function getTaskById(taskId) {\n//     for (let i = 0; i < board.taskLists.length; i++) {\n//         var task = board.taskLists[i].tasks.find(task => task.id === taskId)\n//         if (task) {\n//             return task\n//         }\n//     }\n// }\n","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    if (socket) {\r\n        socket.off(eventName, cb)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    if (socket) {\r\n        socket.emit(eventName, data);\r\n    }\r\n}","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n\n    }\n\n}\n\nexport function saveBoard(updatedBoard) {\n    return async dispatch => {\n        const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n        dispatch({ type: 'SET_BOARD', currBoard: boardCopy })\n        const savedBoard = await boardService.update(boardCopy)\n        socketService.emit('update board', savedBoard);\n        console.log('afte boarrd saved', savedBoard);\n        dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadTask(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currTask\n    }\n}\n\nexport function updateTask(task) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currTask: task });\n    }\n}\n\nexport function toggleLabels() {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_LABELS' });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadTask(taskId) {\n    //     state.board.taskLists.forEach(taskList => {\n    //         const task = taskList.tasks.find(task => task.id === taskId)\n    //         if (task) {\n    //             dispatch({ type: 'SET_TASK', currTask: task })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateTaskList(taskList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n    //     boardCopy.taskLists.splice(idx, 1, taskList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeTaskList(taskListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n    //     boardCopy.taskLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateTask(task) {\n    //     dispatch({ type: 'SET_TASK', currTask: task })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.taskLists.forEach(taskList => {\n    //       let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //       if (idx !== -1) {\n    //         taskList.tasks.splice(idx, 1, task)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleLabels } from '../../../store/actions/boardActions';\n\n\nconst LabelList = ({ labels, onLabelClicked = null, expandMode }) => {\n    const dispatch = useDispatch()\n    const isExpanded = useSelector(state => state.board.isExpanded)\n    const handleClick = (ev) => {\n        ev.preventDefault();\n\n        if (onLabelClicked !== null) {\n            onLabelClicked()\n        } else {\n            dispatch(toggleLabels()) // Using the store here to toggle all the labels in the board\n        }\n    }\n    return (\n\n        <div className=\"labels-list\" onClick={handleClick}>\n            {labels.map(label => (\n                <span\n                    key={label.id}\n                    className={`label  ${isExpanded || expandMode ? 'label-expand' : ''}`}\n                    style={{ backgroundColor: label.color }}>\n                    <span className=\"label-title\">{label.title}</span>\n                </span>\n            ))}\n        </div>\n    )\n}\n\nexport default LabelList\n","import React from 'react'\nimport { NavLink, useRouteMatch } from 'react-router-dom'\nimport LabelList from './task-actions/LabelList'\nimport Moment from 'react-moment';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n    ${props => props.cover.isFull ?\n        (props.cover.type === 'color' ?\n            { backgroundColor: props.cover.isFull ? props.cover.background : '' } :\n            { backgroundImage: 'url(' + props.cover.background + ')', minHeight: 235, backgroundSize: 'cover' }) : ''}\n            font-size:${props => props.cover.isFull ? '16px' : ''};\n            font-family:${props => props.cover.isFull ? 'LatoBold' : ''};\n\n            ${props => props.cover.isFull ?\n        {\n            display: 'flex',\n            fontSize: '16px',\n            fontFamily: 'LatoBold'\n        } :\n        ''}\n    `;\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday ] ',\n    sameDay: '[Today ] ',\n    nextDay: '[Tomorrow ] ',\n    lastWeek: 'DD/MM/YYYY',\n    nextWeek: 'DD/MM/YYYY',\n    sameElse: 'DD/MM/YYYY'\n};\n\n\nconst TaskPreview = ({ task, index }) => {\n    let { url } = useRouteMatch();\n\n  \n\n    return (\n\n        <Draggable draggableId={task.id} index={index}>\n\n            {provided => (\n                <div\n                    className='task-preview'\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}>\n\n\n\n                    <NavLink to={`${url}/${task.id}`} className='task-link' activeClassName='active' draggable='false'>\n                        <Container cover={task.cover}>\n                            {(task.cover.background && !task.cover.isFull) &&\n                                <div>\n                                    {task.cover.type === 'color' ?\n                                        <div\n                                            className={task.cover.background ? 'task-cover' : ''}\n                                            style={{ backgroundColor: task.cover.background }}\n                                        ></div> :\n                                        <img src={task.cover.background} className='task-img-cover ratio-square ' />}\n                                </div>}\n                            <div className={`task-preview-content \n                                    ${(task.cover.type === 'img' && task.cover.isFull) ?\n                                    (task.cover.theme === 'dark' ? 'content-wrapper dark' : 'content-wrapper light') : ''}`}>\n\n                                {task.labels && <LabelList  labels={task.labels} />}\n                                <div className='task-preview-title' dir='auto'>{task.title}</div>\n                                {task.dueDate && <Moment calendar={calendarStrings} date={task.dueDate} />}\n                            </div>\n                        </Container>\n                    </NavLink>\n\n                </div>\n\n            )}\n\n\n\n\n        </Draggable>\n    )\n}\nexport default TaskPreview\n","import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import React, { useState, useEffect, useRef } from 'react'\nimport useKeyPress from '../hooks/useKeypress'\n\nconst TextEditor = ({ type, text, name, onInputBlur, isWide, isFocused, blurInput, onChange, onSubmit, onEscape }) => {\n    // const [textCopy, setText] = useState(text)\n    const [isEditing, setIsEditing] = useState(false)\n    const [initialText, setInitialText] = useState('')\n    const inputEl = useRef(null)\n\n    const enter = useKeyPress(\"Enter\");\n    const esc = useKeyPress(\"Escape\");\n\n\n    useEffect(() => {\n        if (isEditing) {\n            inputEl.current.focus()\n        }\n    }, [isEditing])\n\n\n\n    useEffect(() => {\n        if (isFocused) {\n            setIsEditing(true)\n        }\n    }, [isFocused, isEditing]);\n\n\n    useEffect(() => {\n        // check if 'blurInput' prop is passed from parent \n        if (blurInput !== undefined && blurInput) {\n            //and wether or not to change the isEditing state from the parent component (for bluring the input)\n            setIsEditing(false)\n        }\n    }, [blurInput])\n\n\n\n    useEffect(() => {\n        if (isEditing) {\n            setInitialText(text)\n        }\n    }, [isEditing]) // when input is focused save the initial text\n\n\n    useEffect(() => {\n        if (isEditing && !isWide) { // if input is focused and not textarea\n            // if Enter is pressed, save the text and case the editor\n            if (enter) {\n                if (onInputBlur) {\n                    onInputBlur()\n                } else {\n                    onSubmit()\n                }\n                setIsEditing(false);\n            }\n            // if Escape is pressed, revert the text and close the editor\n            if (esc) {\n                const customEv = {\n                    target: {\n                        name: name,\n                        value: initialText\n                    },\n                }\n                onChange(customEv)\n                setIsEditing(false);\n                if (onEscape) {\n                    onEscape()\n                }\n            }\n        }\n    }, [enter, esc]); // watch the Enter and Escape key presses\n\n    const ModuleText = React.createElement(\n        type,\n        {\n            className: 'module-text',\n            dir: 'auto',\n            onClick: () => { setIsEditing(true) }\n        },\n        text\n    );\n\n\n    const updateText = () => {\n        if (onInputBlur) {\n            setIsEditing(false)\n            onInputBlur()\n        }\n    }\n    const test = (ev) => {\n        const reg = /^\\s+$/; // check for whitespace \n        const inputVal = ev.target.value;\n        if (reg.test(inputVal) || inputVal === '') {\n            return\n        } else {\n            onChange(ev)\n        }\n    }\n    const handleTextareaChange = (ev) => {\n        onChange(ev)\n    }\n    const focusInput = () => {\n        if (!isEditing) {\n            setIsEditing(true)\n            setTimeout(() => {\n                inputEl.current.focus();\n            }, 0)\n\n        }\n    }\n    return (\n        <div className=\"text-editor-wrapper\">\n            {\n                isEditing ?\n                    (!isWide ?\n                        <input dir=\"auto\" type=\"text\" ref={inputEl} autoFocus className=\"focusClass\" name={name} defaultValue={text} onChange={test} onBlur={updateText} /> :\n                        <textarea ref={inputEl} className=\"focusClass\" autoFocus rows=\"5\" name={name} defaultValue={text} onChange={handleTextareaChange} onBlur={updateText} />) :\n                    ModuleText\n            }\n\n        </div>\n    )\n}\n\nexport default TextEditor\n","import React from 'react'\nimport { RiCloseLine } from \"react-icons/ri\";\n\nconst ListMenu = ({ onCloseMenu, onRemoveList,onAddTask }) => {\n    return (\n        <div className=\"pop-up list-menu\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={() => onCloseMenu()}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <div onClick={onAddTask} >Add card</div>\n            <div>Change list color</div>\n            <div>Sort list by</div>\n            <div onClick={onRemoveList}>Delete list</div>\n        </div>\n    )\n}\n\nexport default ListMenu\n","// hook from https://usehooks.com/useOnClickOutside/\nimport { useEffect } from \"react\";\n\n// Hook\nfunction useOnClickOutside(ref, handler) {\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import React, { useEffect, useState, useRef } from 'react'\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\n\n// import 'simplebar/dist/simplebar.min.css';\nimport TaskPreview from './TaskPreview'\nimport TextEditor from '../TextEditor'\nimport ListMenu from './ListMenu';\nimport { boardService } from '../../services/board.service';\nimport useOnClickOutside from '../../hooks/useOnClickOutSide';\nimport { RiCloseLine, RiAddLine } from 'react-icons/ri';\n\n\n\n\n\nconst TaskList = ({ provided, innerRef, taskList, taskListIdx, onListUpdated, onRemoveList }) => {\n\n    const [taskListCopy, setTaskListCopy] = useState({ ...taskList })\n    const [newTask, setNewTask] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n\n\n\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        setTaskListCopy({ ...taskList })\n    }, [taskList])\n\n\n    const getEmptyTask = () => {\n        setIsMenuOpen(false)\n        const emptyTask = boardService.getEmptyTask()\n        setNewTask(emptyTask)\n        setIsEditing(true)\n    }\n\n    const handleListChange = (ev) => {\n        setTaskListCopy({ ...taskListCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const handleTaskChange = (ev) => {\n        setNewTask({ ...newTask, [ev.target.name]: ev.target.value })\n\n    }\n    const handleListRemove = () => {\n        onRemoveList(taskList.id)\n    }\n    const updateList = (updatedTaskList) => {\n        if (updatedTaskList) {\n            onListUpdated(updatedTaskList)\n        } else {\n            onListUpdated(taskListCopy)\n        }\n        setIsEditing(false)\n        setNewTask(null)\n    }\n\n    const addTask = async (clickSource = null) => {\n        if (newTask && newTask.title) {\n            const updatedTaskList = JSON.parse(JSON.stringify(taskListCopy));\n            updatedTaskList.tasks.push(newTask)\n            await updateList(updatedTaskList)\n            if (clickSource === 'clickedOutside') return; // if click is outside the ref wrapper end editing\n            setNewTask(null)\n            getEmptyTask()\n        }\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing && newTask && newTask.title) {\n            addTask('clickedOutside') // passing this string to add the current task and end the editing\n        } else {\n            stopEditing()\n        }\n    });\n    const stopEditing = () => {\n        setNewTask(null)\n        setIsEditing(false)\n    }\n    return (\n        taskListCopy &&\n        <div className=\"list-wrapper\"\n            ref={innerRef}\n            {...provided.draggableProps}\n        >\n            <div className=\"list\">\n\n                <div className=\"list-header\" {...provided.dragHandleProps}>\n                    {taskListCopy.title &&\n                        <TextEditor\n                            name=\"title\"\n                            type=\"h3\"\n                            text={taskListCopy.title}\n                            onChange={handleListChange}\n                            onInputBlur={updateList}\n                        />}\n                    <button className=\"list-menu-btn clear-btn\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n                        <BsThreeDots />\n                    </button>\n                    {isMenuOpen && !isEditing && <ListMenu onRemoveList={handleListRemove} onAddTask={getEmptyTask} onCloseMenu={() => setIsMenuOpen(false)} />}\n                </div>\n\n                <Droppable type=\"task\" droppableId={`${taskListIdx}`}>\n                    {provided => (\n                        <div className=\"list-content \" ref={provided.innerRef}>\n\n                            {/* <div className=\"list-content-scrollable u-fancy-scrollbar\"> */}\n                                {taskList.tasks.map((task, index) => (\n                                    <TaskPreview key={task.id} task={task} index={index} />\n                                ))}\n                                {(isEditing && newTask) && <div className=\"add-task-wrapper \" ref={wrapperRef}>\n                                    <TextEditor\n                                        name=\"title\"\n                                        type=\"p\"\n                                        text={newTask.title}\n                                        onChange={handleTaskChange}\n                                        isFocused={isEditing}\n                                        onSubmit={addTask}\n                                        onEscape={stopEditing}\n                                    />\n\n                                    <div className=\"add-task-controls\">\n                                        <button onClick={addTask} className=\"submit-btn\">Add task</button>\n                                        <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n                                            <RiCloseLine />\n                                        </button>\n                                    </div>\n\n                                </div>}\n                            {/* </div> */}\n                            {provided.placeholder}\n\n                        </div>\n                    )}\n                </Droppable>\n                <div className=\"list-footer\">\n                    {(!isEditing && !newTask) &&\n                        <a className=\"clear-btn list-footer-btn\" onClick={getEmptyTask}  >\n                            <span className=\"icon-lg add-icon\"><RiAddLine /></span> <span>Add new task</span>\n                        </a >\n                    }\n                </div>\n            </div>\n        </div >\n\n    )\n}\n\nexport default TaskList\n","import React, { useRef, useState } from 'react'\n\nimport { RiCloseLine } from \"react-icons/ri\";\nimport { GoPencil } from \"react-icons/go\";\n\nimport TextEditor from '../../TextEditor';\nimport { useEffect } from 'react';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\n\nconst LabelPicker = ({ task, labels, onCloseModal, onTaskUpdated, labelsUpdated }) => {\n    const [selectedLabel, setSelectedLabel] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useOnClickOutside(wrapperRef, () => {\n        console.log('paamm ahat')\n        onCloseModal()\n    });\n    const selectLabelToEdit = (label) => {\n        setSelectedLabel({ ...label })\n        setIsEditing(true)\n    }\n\n    const handleChange = (ev) => {\n        setSelectedLabel({ ...selectedLabel, [ev.target.name]: ev.target.value })\n    }\n    const updateLabel = () => {\n        const labelsCopy = [...labels];\n        const labelIdx = labelsCopy.findIndex(label => label.id === selectedLabel.id)\n        labelsCopy.splice(labelIdx, 1, selectedLabel)\n        labelsUpdated([...labelsCopy], selectedLabel)\n        setIsEditing(false);\n    }\n\n    useEffect(() => {\n        if (!isEditing && selectedLabel) {\n            const taskCopy = JSON.parse(JSON.stringify(task));\n            const taskLabelIdx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            if (taskLabelIdx !== -1) {\n                taskCopy.labels.splice(taskLabelIdx, 1, selectedLabel)\n                onTaskUpdated(taskCopy)\n            }\n        }\n\n    }, [isEditing])\n\n\n    const toggleLabels = (selectedLabel) => {\n        let labelExist;\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        labelExist = taskCopy.labels.find(label => label.id === selectedLabel.id)\n        if (!labelExist) {\n            taskCopy.labels.push(selectedLabel)\n        } else {\n            const idx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            taskCopy.labels.splice(idx, 1)\n        }\n        onTaskUpdated(taskCopy)\n    }\n\n    const labelToEdit = (label) => {\n        if (selectedLabel) {\n            // console.log(label.id === selectedLabel.id)\n            return label.id === selectedLabel.id\n        }\n    }\n\n    return (\n        <div className=\"pop-up labels\" ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <ul>\n                {labels.map(label => (\n                    <li className=\"label-container\" key={label.id}>\n                        <span\n                            className=\"card-label\"\n                            style={{ backgroundColor: label.color }}\n                            onClick={() => toggleLabels(label)}\n                        >\n                            {<span className=\"label-title\">{label.title}</span>}\n                            {labelToEdit(label) && isEditing && <TextEditor\n                                type=\"p\"\n                                name=\"title\"\n                                isFocused={isEditing}\n                                text={label.title}\n                                onChange={handleChange}\n                                onInputBlur={updateLabel}\n                            />}\n                            <span className=\"label-selected\">\n                            </span>\n                        </span>\n                        <a href=\"#\" onClick={() => selectLabelToEdit(label)}>\n                            <GoPencil />\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LabelPicker\n","import React, { useEffect,useState } from 'react'\nimport { useRouteMatch } from 'react-router-dom';\n\nimport moment from 'moment'\nimport { RiCloseLine } from 'react-icons/ri'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n\nimport { boardService } from '../../../services/board.service';\n\nconst DatePicker = ({ task, onTaskUpdated, onCloseModal, onAddActivity }) => {\n    const [value, setDate] = useState(new Date());\n    const [isTaskUpdated, setIsUpdated] = useState(false)\n    let { url } = useRouteMatch();\n\n    useEffect(() => {\n        if (task.dueDate) {\n            const date = new Date(task.dueDate)\n            setDate(date)\n        }\n    }, [])\n\n    useEffect(() => {\n        const addActivity = async () => {\n            if (isTaskUpdated) {\n                const dueDate = moment(new Date(task.dueDate)).format(\"MMM Do YY\");\n\n                const activity = boardService.newActivity(\n                    `set this card to be due at ${dueDate}`,\n                    `set <a href=\"${url}\">${task.title}</a> to be due at ${dueDate}`,\n                    task.id\n                )\n                await onAddActivity(activity)\n            }\n        }\n        addActivity()\n    }, [isTaskUpdated])\n\n\n\n    const submitDate = async () => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        taskCopy.dueDate = value\n        await onTaskUpdated(taskCopy)\n        setIsUpdated(true)\n        onCloseModal()\n    }\n\n\n    const onChangeDate = (date) => {\n        setDate(date)\n    }\n    return (\n        <div className=\"pop-up\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Date</span>\n                <button onClick={onCloseModal} className=\"pop-up-close-btn clear-btn icon-lg\">\n                    <RiCloseLine />\n                </button>\n            </div>\n            <Calendar\n                onChange={onChangeDate}\n                value={value}\n            />\n            <button onClick={submitDate} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default DatePicker\n","import React, { useEffect, useState } from 'react'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\n\nconst ChecklistPicker = ({ task, onTaskUpdated, onCloseModal }) => {\n    const [checklist, setChecklist] = useState({})\n    useEffect(() => {\n        console.log('ONCE');\n        const emptyChecklist = boardService.getEmptyCheckList();\n        setChecklist({ ...emptyChecklist })\n    }, [])\n\n    const handleChange = (ev) => {\n        setChecklist({ ...checklist, [ev.target.name]: ev.target.value })\n    }\n    const addChecklist = () => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        const checklistCopy = { ...checklist }\n        taskCopy.checklists.push(checklistCopy)\n        onTaskUpdated(taskCopy)\n        onCloseModal()\n    }\n    return (\n        <div className=\"pop-up\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Add checklist</span>\n                <button className=\"pop-up-close-btn clear-btn\">\n                    {/* <i className=\"fas fa-times\"></i> */}\n                </button>\n            </div>\n            <TextEditor\n                isFocused={true}\n                onChange={handleChange}\n                onSubmit={addChecklist}\n                type=\"p\"\n                name=\"title\"\n            />\n            <button onClick={addChecklist} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default ChecklistPicker\n","export default {\r\n    uploadImg\r\n}\r\n\r\nfunction uploadImg(ev) {\r\n    console.log('yes');\r\n    const CLOUD_NAME = \"dhz1jk4k6\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0])\r\n    formData.append('upload_preset', 'jtim2mm3');\r\n\r\n    return fetch(UPLOAD_URL, {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => console.error(err))\r\n}\r\n\r\n","import React from 'react'\nimport { RiCloseLine } from 'react-icons/ri'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport Color, { Palette } from \"color-thief-react\";\n\nimport cloudinaryService from '../../../services/cloudinary.service';\nimport { utilService } from '../../../services/util.service';\n\n\nconst HalfBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        { backgroundImage: \"url(\" + props.cover.background + \")\", backgroundSize: 'cover' }}\n`;\n\n\nconst FullBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        {\n            backgroundImage: props.cover.theme === 'light' ?\n                'linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(' + props.cover.background + ')'\n                : 'linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(' + props.cover.background + ')', backgroundSize: 'cover', backgroundPosition: '50%'\n        }\n\n    }\n`;\n\nconst CoverPicker = ({ wrapperRef, task, onCloseModal, onTaskUpdated, }) => {\n    const [selectedCover, setSelectedCover] = useState(task.cover)\n    const [loading, setLoading] = useState(false);\n\n\n\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        // '#344563',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const handleSelected = (cover) => {\n        const taskCopy = { ...task }\n        if (cover.id) {\n            setSelectedCover({ ...selectedCover, background: cover.url, type: 'img' })\n            taskCopy.cover.type = 'img'\n            taskCopy.cover.background = cover.url\n        } else {\n            setSelectedCover({ ...selectedCover, background: cover, type: 'color' })\n            taskCopy.cover.type = 'color'\n            taskCopy.cover.background = cover\n        }\n        onTaskUpdated(taskCopy)\n    }\n    const handleLayout = (isFull) => {\n        setSelectedCover({ ...selectedCover, isFull: isFull })\n        const taskCopy = { ...task }\n        taskCopy.cover.isFull = isFull\n        onTaskUpdated(taskCopy)\n    }\n    const handleThemeChange = (theme) => {\n        if (theme === selectedCover.theme) return;\n        setSelectedCover({ ...selectedCover, theme: theme })\n        const taskCopy = { ...task }\n        taskCopy.cover.theme = theme\n        onTaskUpdated(taskCopy)\n    }\n    const handleUpload = async (ev) => {\n        console.log('yes mame');\n        setLoading(true);\n        const res = await cloudinaryService.uploadImg(ev);\n        const { url } = res;\n        setSelectedCover({ ...selectedCover, background: url, type: 'img' })\n        const taskCopy = { ...task }\n        const img = { id: utilService.makeId(), url: url, isCover: true }\n        taskCopy.images.push(img)\n        taskCopy.cover.background = url\n        taskCopy.cover.type = 'img'\n        onTaskUpdated(taskCopy)\n        setLoading(false);\n    }\n    const handleRemove = () => {\n        setSelectedCover({ ...selectedCover, background: null, type: null, isFull: null, theme: null })\n        const taskCopy = { ...task }\n        taskCopy.cover = { ...taskCopy.cover, background: null, type: null, isFull: null, theme: null }\n        // console.log('task', taskCopy);\n        onTaskUpdated(taskCopy)\n    }\n    return (\n\n        <div className=\"pop-up cover-picker\" ref={wrapperRef}>\n\n\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Cover</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <span className=\"pop-up-title\">Size</span>\n            <div className=\"cover-size-picker\">\n                <FullBgcWrapper\n                    cover={selectedCover}\n                    className={'cover-size ' + (selectedCover.isFull ? 'selected' : '')}\n                    onClick={() => handleLayout(true)}\n                >\n                    <div className={`line-wrapper ${task.cover.type === 'img' ? (task.cover.theme === 'dark' ? 'dark' : '') : ''}`}>\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </FullBgcWrapper>\n                <div\n                    className={'cover-size half ' + (selectedCover.isFull ? '' : 'selected')}\n                    onClick={() => handleLayout(false)}>\n                    <HalfBgcWrapper className=\"half\" cover={selectedCover}></HalfBgcWrapper>\n                    <div className=\"line-wrapper\">\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </div>\n            </div>\n            <button className=\"modal-btn\" onClick={handleRemove}>Remove Cover</button>\n            {(selectedCover.type === 'img' && selectedCover.isFull) &&\n                <div className=\"cover-txt-color\">\n                    <span className=\"pop-up-title\">Text color</span>\n                    <div className=\"flex justify-center\">\n                        <div\n                            onClick={() => handleThemeChange('light')}\n                            className=\"cover-txt light\"\n                            style={{ backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{task.title}</h3>\n                        </div>\n                        <div\n                            onClick={() => handleThemeChange('dark')}\n                            className=\"cover-txt dark\"\n                            style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{task.title}</h3>\n                        </div>\n                    </div>\n                </div>}\n\n            <span className=\"pop-up-title\">Colors</span>\n            <div className=\"cover-palette\">\n                {coverColors.map((color, idx) => (\n                    <span\n                        className={'cover-color ' + (color === selectedCover.background ? 'selected' : '')}\n                        style={{ backgroundColor: color }}\n                        key={idx}\n                        onClick={() => handleSelected(color)}\n                    ></span>\n                ))}\n            </div>\n            {task.images.length > 0 && <span className=\"pop-up-title\">Images</span>}\n            {task.images.length > 0 &&\n                <div className=\"cover-img-wrapper\">\n                    {task.images.map(img => (\n                        <span\n                            // check id in case the same img has been uploaded\n                            className={'cover-img-preview ' + ((img.url + img.id) === (selectedCover.background + img.id) ? 'selected' : '')}\n                            style={{ backgroundImage: `url(${img.url})` }}\n                            onClick={() => handleSelected(img)}\n                            key={img.id}></span>\n                    ))}\n                </div>}\n            <div className=\"upload-img-container flex space-between align-center\">\n                <p>Upload image:</p>\n                <input onChange={handleUpload} id=\"file\" type=\"file\" title=\"Upload Image\" />\n                <label className=\"btn-3\" htmlFor=\"file\">\n                    {!loading ? <span>Upload</span> : <ScaleLoader height={9} width={5} color={\"#2c3e50\"} loading={loading} />}\n                </label>\n            </div>\n            <hr className=\"divider\" />\n        </div>\n    )\n}\n\nexport default CoverPicker\n","import React, { useRef } from 'react'\nimport { useState } from 'react'\nimport LabelPicker from './LabelPicker'\nimport DatePicker from './DatePicker'\nimport ChecklistPicker from './checklist-cmps/ChecklistPicker'\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide'\nimport CoverPicker from './CoverPicker'\n\nconst TaskActions = ({ task, labels, onUpdateTask, onLabelsUpdated, onAddActivity }) => {\n    const wrapperRef = useRef(null)\n    const [currAction, setCurrAction] = useState(null)\n\n    useOnClickOutside(wrapperRef, () => {\n        if (currAction) {\n            closeModal()\n        }\n    });\n\n\n    const toggle = (isActive) => {\n        if (isActive === currAction) {\n            setCurrAction(null)\n        } else {\n            setCurrAction(isActive)\n        }\n    }\n\n    const closeModal = () => {\n        setCurrAction(null)\n    }\n\n    return (\n        <div className=\"modal-sidebar\" ref={wrapperRef}>\n            <button className=\"modal-btn\" onClick={() => toggle('isLabelActive')}>Labels</button>\n            {currAction === 'isLabelActive' &&\n                <LabelPicker\n                    task={task}\n                    labels={labels}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask}\n                    labelsUpdated={onLabelsUpdated}\n                />}\n            <button className=\"modal-btn\" >Members</button>\n            <button className=\"modal-btn\" onClick={() => toggle('isChecklistActive')}>Checklist</button>\n            {currAction === 'isChecklistActive' &&\n                <ChecklistPicker\n                    task={task}\n                    onTaskUpdated={onUpdateTask}\n                    onCloseModal={closeModal}\n                />}\n            <button className=\"modal-btn\" onClick={() => toggle('isDueDateActive')}>Due date</button>\n            {currAction === 'isDueDateActive' &&\n                <DatePicker\n                    task={task}\n                    onTaskUpdated={onUpdateTask}\n                    onAddActivity={onAddActivity}\n                    onCloseModal={closeModal}\n                />}\n            {/* Show the cover button only when cover is not set (displayed in header otherwise) */}\n            {!task.cover.background && <button className=\"modal-btn\" onClick={() => toggle('isCoverActive')}>Cover</button>} \n            {currAction === 'isCoverActive' && \n                <CoverPicker\n                    task={task}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask} />}           \n        </div>\n    )\n}\n\nexport default TaskActions\n","import React, { useState, useEffect } from 'react'\nimport TextEditor from '../../../TextEditor';\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport { useRef } from 'react';\nimport { BsTrash } from \"react-icons/bs\";\n\n\nconst ChecklistItem = ({ item, onSubmit, onRemoveItem }) => {\n    const [itemCopy, setItem] = useState({ ...item });\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n    const initialRender = useRef(true)\n\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            // setNewItem(null)\n            console.log('yes');\n        }\n    });\n\n    // useEffect(() => {\n    //     setItem({ ...item })\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    // }, [])\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            updateItem()\n        } else {\n            initialRender.current = false\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [itemCopy.isDone])\n\n    const handleChange = (ev) => {\n        const target = ev.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name; setItem({ ...itemCopy, [name]: value });\n    }\n    const handleClose = () => {\n        // when escape is pressed on 'TextEditor.jsx'\n        setIsEditing(false)\n    }\n\n    const updateItem = () => {\n        if (!itemCopy.title) {\n            setIsEditing(true)\n\n            return;\n        }\n        setIsEditing(false)\n        onSubmit({ ...itemCopy })\n    }\n\n    const handleRemove = () => {\n        onRemoveItem(itemCopy.id)\n    }\n    return (\n        <div ref={wrapperRef} className=\"checklist-item\" >\n            <div className={'checklist-item-edit space-between ' + (itemCopy.isDone ? 'done' : '')}>\n                <div className=\"flex align-center\">\n                    {itemCopy && <input type=\"checkbox\" name=\"isDone\" checked={itemCopy.isDone} onChange={handleChange} />}\n                    <div onClick={() => setIsEditing(true)}>\n                        <TextEditor\n                            text={item.title}\n                            onChange={handleChange}\n                            onSubmit={updateItem}\n                            onEscape={handleClose}\n                            blurInput={!isEditing}\n                            isFocused={isEditing}\n                            type=\"p\"\n                            name=\"title\"\n                        />\n                    </div>\n                </div>\n                <button className=\"remove-item-btn clear-btn\" onClick={handleRemove}>\n                    <BsTrash />\n                </button>\n            </div>\n            {isEditing &&\n                <div className=\"flex\">\n                    <button>Save</button>\n                    <button>sds</button>\n                    <div className=\"spacer\" onClick={handleClose}></div>\n                </div>}\n        </div>\n    )\n}\n\nexport default ChecklistItem\n","import React, { useState, useRef, useEffect } from 'react'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport ChecklistItem from './ChecklistItem';\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\n\nconst TaskChecklist = ({ task, checklist, onUpdateTask }) => {\n    const [newItem, setNewItem] = useState(null);\n    const [progress, setProgress] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        if (!checklist.listItems.length) {\n            addItem()\n        }\n    }, [checklist])\n\n    useEffect(() => {\n        const doneCount = checklist.listItems.reduce((acc, item) => {\n            if (item.isDone) acc++\n            return acc\n        }, 0)\n        let donePrecent = Math.round((doneCount * 100) / checklist.listItems.length)\n        setProgress(donePrecent)\n    }, [checklist])\n\n    const addItem = () => {\n        const emptyItem = boardService.getEmptyListItem();\n        setNewItem({ ...emptyItem })\n        setIsEditing(true);\n    }\n\n    const handleClose = () => {\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    const handleChange = (ev) => {\n        setNewItem({ ...newItem, [ev.target.name]: ev.target.value });\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            setNewItem(null)\n        }\n    });\n\n    const removeItem = (itemId) => {\n        const checklistCopy = { ...checklist };\n        const idx = checklistCopy.listItems.findIndex(item => item.id === itemId)\n        if (idx !== -1) {\n            checklistCopy.listItems.splice(idx, 1)\n        }\n        updateTask(checklistCopy)\n    }\n\n    const updateChecklist = (item) => {\n        const checklistCopy = { ...checklist };\n        if (item) {\n            const idx = checklistCopy.listItems.findIndex(currItem => currItem.id === item.id)\n            if (idx !== -1) {\n                checklistCopy.listItems.splice(idx, 1, item) // update an item \n                updateTask(checklistCopy);\n            }\n        } else {\n            checklistCopy.listItems.push(newItem)\n            updateTask(checklistCopy);\n            addItem()\n        }\n    }\n\n    const updateTask = (checklist) => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        const idx = taskCopy.checklists.findIndex(currChecklist => currChecklist.id === checklist.id)\n        taskCopy.checklists.splice(idx, 1, checklist)\n        onUpdateTask(taskCopy)\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    return (\n        <div>\n            <h3>{checklist.title}</h3>\n            {checklist.listItems.length > 0 &&\n                <Progress\n                    percent={progress}\n                />}\n            {checklist && checklist.listItems.map(item => (\n                <ChecklistItem\n                    key={item.id}\n                    onSubmit={updateChecklist}\n                    onRemoveItem={removeItem}\n                    item={item}\n                />\n            ))\n            }\n            {newItem && isEditing &&\n                <div ref={wrapperRef}>\n                    <TextEditor\n                        onChange={handleChange}\n                        onSubmit={updateChecklist}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n                    <div className=\"flex\">\n                        <button>Save</button>\n                        <button onClick={handleClose}>Close</button>\n                        <div className=\"spacer\" onClick={handleClose}></div>\n                    </div>\n                </div>\n            }\n            {!isEditing && <button className=\"modal-btn\" onClick={addItem} >Add an item</button>}\n        </div>\n    )\n}\n\nexport default TaskChecklist\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst ActivityLog = ({ taskId = null }) => {\n    const activities = useSelector(state => {\n        if (taskId) {\n            return state.board.currBoard.activities.filter(activity => activity.taskId === taskId)\n        } else {\n            return state.board.currBoard.activities\n        }\n    })\n    return (\n        <div>\n            <h1>activity</h1>\n            {activities.length > 0 && activities.map(activity => (\n                <div key={activity.id}>\n                    {taskId ?\n                        <p dangerouslySetInnerHTML={{ __html: activity.cardTxt }}></p> :\n                        <p dangerouslySetInnerHTML={{ __html: activity.boardTxt }}></p>}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default ActivityLog\n","import React, { useState, useContext, useEffect, useRef } from 'react'\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loadTask, saveBoard, updateTask } from '../store/actions/boardActions';\nimport Color, { Palette } from \"color-thief-react\";\nimport { useColor } from 'color-thief-react'\n\nimport Moment from 'react-moment';\n\nimport TextEditor from '../components/TextEditor';\nimport TaskActions from '../components/task-cmps/task-actions/TaskActions';\nimport TaskChecklist from '../components/task-cmps/task-actions/checklist-cmps/TaskChecklist';\nimport LabelList from '../components/task-cmps/task-actions/LabelList';\nimport ActivityLog from '../components/ActivityLog';\nimport useOnClickOutside from '../hooks/useOnClickOutSide';\nimport { RiCloseLine } from 'react-icons/ri';\nimport CoverPicker from '../components/task-cmps/task-actions/CoverPicker';\nimport LabelPicker from '../components/task-cmps/task-actions/LabelPicker';\n\n// const { loadTask, board, saveBoard, currTask, updateTask } = useContext(BoardContext)\n\nconst calendarStrings = {\n    lastDay: '[Yesterday ] ',\n    sameDay: '[Today ] ',\n    nextDay: '[Tomorrow ] ',\n    lastWeek: 'DD/MM/YYYY',\n    nextWeek: 'DD/MM/YYYY',\n    sameElse: 'DD/MM/YYYY'\n};\nconst TaskDetails = () => {\n\n    const dispatch = useDispatch()\n    const currTask = useSelector(state => state.board.currTask)\n    const board = useSelector(state => state.board.currBoard)\n\n    const [activeAction, setActiveAction] = useState(null)\n    const [taskCopy, setTask] = useState(null)\n    \n    const wrapperRef = useRef(null)\n    const modalHeaderRef = useRef(null)\n\n    const { taskId } = useParams();\n    const history = useHistory();\n\n    useEffect(() => {\n        const load = async () => {\n            const res = await dispatch(loadTask(taskId))\n            if (!res) {\n                history.push(`/board/${board._id}`)\n            }\n        }\n        load()\n    }, [])\n\n    useEffect(() => {\n        const setTaskCopy = () => {\n            if (currTask) {\n                setTask({ ...currTask })\n            }\n        }\n        setTaskCopy()\n    }, [currTask])\n\n\n    const closeModal = () => {\n        history.push(`/board/${board._id}`)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        console.log('paam ahat')\n        closeModal()\n    });\n    useOnClickOutside(modalHeaderRef, () => {\n        console.log('paam ahat')\n        setActiveAction(null)\n    });\n\n    const handleChange = (ev) => {\n        setTask({ ...taskCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const onUpdateTask = async (task) => {\n        if (task) {\n            await updateBoard({ ...task })\n        } else {\n            updateBoard({ ...taskCopy })\n        }\n    }\n\n    const updateBoard = async (task) => {\n        dispatch(updateTask(task))\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.taskLists.forEach(taskList => {\n            let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n            if (idx !== -1) {\n                taskList.tasks.splice(idx, 1, task)\n            }\n        })\n        await dispatch(saveBoard(boardCopy))\n    }\n\n    const updateBoardLabels = (updatedLabels, editedLabel) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n\n        boardCopy.labels = updatedLabels\n\n        boardCopy.taskLists.forEach(taskList => {\n            taskList.tasks.forEach(task => {\n                let currLabel = task.labels.find(label => label.id === editedLabel.id)\n                if (currLabel) {\n                    currLabel.title = editedLabel.title\n                }\n            })\n        })\n        dispatch(saveBoard(boardCopy))\n    }\n    const addActivity = async (activity) => {\n        // await console.log('addactivity',board)\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.activities.unshift(activity)\n        await dispatch(saveBoard(boardCopy))\n    }\n\n    return (\n        <section className=\"task-details-wrapper\">\n            <div className={'cover'} ></div>\n            <div className=\"task-details\">\n                {taskCopy && currTask &&\n                    <div className=\"task-modal\" ref={wrapperRef}>\n                        {taskCopy.cover.background &&\n                            <Color src={taskCopy.cover.background} crossOrigin=\"anonymous\" format=\"hex\">\n                                {({ data }) => {\n                                    return (\n                                        <div\n                                            style={{ backgroundImage: `url(${taskCopy.cover.background})`, backgroundColor: data ? data : taskCopy.cover.background }}\n                                            className=\"modal-header\">\n                                            {taskCopy.cover.background && <button className=\"modal-btn\" onClick={() => setActiveAction('coverPicker')}>Cover</button>}\n                                            {activeAction === 'coverPicker' &&\n                                                <CoverPicker // outside TaskActions\n                                                    task={taskCopy}\n                                                    onTaskUpdated={onUpdateTask}\n                                                    onCloseModal={() => setActiveAction(null)}\n                                                    wrapperRef={modalHeaderRef} />}\n                                        </div>\n                                    )\n                                }}\n                            </Color>\n                        }\n                        <a onClick={closeModal} className=\"modal-close-btn icon-lg\" >\n                            <RiCloseLine />\n                        </a>\n                        <div className=\"modal-module\">\n                            <div className=\"task-title\">\n                                <TextEditor type=\"h3\" name=\"title\" text={taskCopy.title} onChange={handleChange} onInputBlur={onUpdateTask} />\n                            </div>\n                        </div>\n                        <div className=\"task-content\">\n                            <div className=\"left-side\">\n                                <div className=\"modal-module\">\n                                    <div className=\"task-labels-date\">\n                                        <div className=\"task-labels-list\">\n                                            <h3>Labels</h3>\n                                            {taskCopy.labels &&\n                                                <LabelList\n                                                    expandMode={true}\n                                                    onLabelClicked={() => setActiveAction('labelPicker')}\n                                                    labels={taskCopy.labels} />}\n                                            {activeAction === 'labelPicker' &&\n                                                <LabelPicker // outside TaskActions\n                                                    task={taskCopy}\n                                                    onTaskUpdated={onUpdateTask}\n                                                    labelsUpdated={updateBoardLabels}\n                                                    onCloseModal={() => setActiveAction(null)}\n                                                    labels={board.labels}\n                                                />}\n                                        </div>\n                                        {taskCopy.dueDate &&\n                                            <div className=\"task-due-date\">\n                                                <h3>Due date</h3>\n                                                <Moment calendar={calendarStrings} date={taskCopy.dueDate} />\n                                            </div>}\n                                    </div>\n                                </div>\n                                <div className=\"modal-module\">\n                                    <div className=\"task-description\">\n                                        <i className=\"far fa-file-alt\"></i>\n                                        <h3>Description</h3>\n                                    </div>\n                                    <TextEditor type=\"p\" name=\"description\" text={taskCopy.description} onChange={handleChange} onInputBlur={onUpdateTask} isWide={true} />\n                                </div>\n                                <div className=\"modal-module\">\n                                    {taskCopy.checklists && taskCopy.checklists.map(checklist => (\n                                        <TaskChecklist\n                                            checklist={checklist}\n                                            key={checklist.id}\n                                            task={taskCopy}\n                                            onUpdateTask={onUpdateTask}\n                                        />\n                                    ))}\n                                </div>\n                                <div className=\"modal-module\">\n                                    <h3>Activity</h3>\n                                    {/* <activity-log :taskId=\"taskCopy.id\" /> */}\n                                    <ActivityLog taskId={taskCopy.id} />\n                                </div>\n                            </div>\n                            <div className=\"right-side\">\n                                <h3>Add to card</h3>\n                                {board && <TaskActions\n                                    task={taskCopy}\n                                    labels={board.labels}\n                                    onUpdateTask={onUpdateTask}\n                                    onLabelsUpdated={updateBoardLabels}\n                                    onAddActivity={addActivity}\n                                />}\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div >\n        </section>\n    )\n}\n\nexport default TaskDetails\n","import React, { useState, useRef } from 'react'\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\n\nimport { boardService } from '../../services/board.service'\n\nimport { RiCloseLine } from 'react-icons/ri'\nimport TextEditor from '../TextEditor'\n\n\nconst AddTaskList = ({ board, onBoardUpdated }) => {\n    const [newTaskList, setTaskList] = useState(null)\n    const wrapperRef = useRef(null)\n\n    const getEmptyTaskList = () => {\n        const emptyTaskList = boardService.getEmptyList()\n        setTaskList(emptyTaskList)\n    }\n    const handleChange = (ev) => {\n        setTaskList({ ...newTaskList, [ev.target.name]: ev.target.value })\n    }\n\n    const addTaskList = () => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.taskLists.push(newTaskList);\n        onBoardUpdated(boardCopy)\n        setTaskList(null)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        setTaskList(null)\n    });\n\n    return (\n        <div className=\"list-wrapper \">\n            {newTaskList ?\n                <div className=\"list add-list\" ref={wrapperRef}>\n                    <TextEditor\n                        isFocused={true}\n                        onChange={handleChange}\n                        onSubmit={addTaskList}\n                        name=\"title\"\n                        type=\"p\"\n                    />\n                    <div className=\"add-list-controls\">\n                        <button className=\"submit-btn\" onClick={addTaskList}>Add List</button>\n                        <button onClick={() => setTaskList(null)} className=\"clear-btn icon-lg\">\n                            <RiCloseLine />\n                        </button>\n                    </div>\n                </div>\n                :\n                <button className=\"modal-btn\" onClick={getEmptyTaskList}>Add another list </button>\n            }\n        </div>\n    )\n}\n\nexport default AddTaskList\n","import { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction useAsyncAction(action, dependeces = []) {\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const asyncAction = useCallback((...args) => {\n        async function callback() {\n            setLoading(true);\n            try {\n                const res = await dispatch(action(...args));\n                setIsError(false);\n                setLoading(false);\n                return res;\n            } catch (e) {\n                setLoading(false);\n                setIsError(true);\n                return e;\n            }\n        }\n        callback();\n    },\n        [action, ...dependeces],\n    );\n    return [asyncAction, loading, isError];\n}\n\nexport default useAsyncAction;","import React, { useEffect, useRef, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getBoardById, saveBoard, setCurrBoard } from '../store/actions/boardActions'\n\nimport { Route, useRouteMatch, useParams, useHistory } from 'react-router-dom'\n\n\n// import { Container, Draggable } from 'react-smooth-dnd';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { utilService } from '../services/util.service'\n\n\nimport TaskList from '../components/task-cmps/TaskList'\nimport TaskDetails from './TaskDetails'\nimport AddTaskList from '../components/task-cmps/AddTaskList'\nimport useAsyncAction from '../hooks/useAsyncAction';\nimport ActivityLog from '../components/ActivityLog';\nimport { socketService } from '../services/socket.service';\n\n\nconst BoardDetails = () => {\n    const dispatch = useDispatch()\n    const board = useSelector(state => state.board.currBoard)\n    const [loadBoard, loading, isError] = useAsyncAction(() => getBoardById(boardId));\n    const initialRender = useRef(true)\n\n    const queryAttr = \"data-rbd-draggable-id\";\n    const [placeholderProps, setPlaceholderProps] = useState(null);\n\n    const { boardId } = useParams();\n    let { path } = useRouteMatch();\n    let history = useHistory();\n\n    useEffect(() => {\n        loadBoard()\n    }, [])\n\n    useEffect(() => {\n        if (initialRender.current && board) {\n            console.log('board.', board._id);\n            socketService.setup()\n            socketService.emit('board topic', board._id)\n            socketService.on('update board', updateCurrBoard);\n            initialRender.current = false\n        }\n\n    }, [board])\n\n\n    useEffect(() => {\n        return () => {\n            socketService.off('update board', updateCurrBoard);\n            socketService.terminate();  // clean up\n        };\n    }, [])\n\n    useEffect(() => {\n        if (isError) {\n            history.push('/boards')\n        }\n    }, [isError])\n\n\n    const updateList = async (taskList) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n        boardCopy.taskLists.splice(idx, 1, taskList)\n        await dispatch(saveBoard(boardCopy))\n        console.log('adterupdatelist');\n        // dispatch(setCurrBoard(boardCopy))\n    }\n\n    const updateBoard = async (updatedBoard) => {\n        await dispatch(saveBoard(updatedBoard))\n    }\n\n\n    const updateCurrBoard = (updatedBoard) => {\n        dispatch(setCurrBoard(updatedBoard))\n    }\n\n\n    const removeList = (taskListId) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n        boardCopy.taskLists.splice(idx, 1)\n        updateBoard(boardCopy)\n    }\n\n    const onDragEnd = (result) => {\n        // Dropped outside the list\n        const { source, destination } = result;\n\n        if (!destination) {\n            return;\n        }\n        if ((source.index === destination.index) &&\n            (source.droppableId === destination.droppableId)) { // Check if  update is required\n            return\n        }\n\n        setPlaceholderProps(null);\n\n\n        let tasklists = [...board.taskLists];\n        const newState = JSON.parse(JSON.stringify(board));\n\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\n            const items = utilService.reorder(tasklists, source.index, destination.index);\n            newState.taskLists = items;\n        } else {\n            const sIndex = +source.droppableId;\n            const dIndex = +destination.droppableId;\n            if (sIndex === dIndex) {\n                const items = utilService.reorder(tasklists[sIndex].tasks, source.index, destination.index);\n                newState.taskLists[sIndex].tasks = items;\n            }\n            else {\n                const result = utilService.move(tasklists[sIndex].tasks, tasklists[dIndex].tasks, source, destination);\n                newState.taskLists[sIndex].tasks = result[sIndex];\n                newState.taskLists[dIndex].tasks = result[dIndex];\n            }\n        }\n\n        updateBoard(newState)\n    }\n\n    // const handleDragStart = ev => {\n    //     if (ev.type !== 'lists') {  //Only when dragging lists\n    //         return\n    //     }\n    //     const draggedDOM = getDraggedDom(ev.draggableId);\n    //     if (!draggedDOM) {\n    //         return;\n    //     }\n    //     const { clientHeight, clientWidth } = draggedDOM.children[0];\n    //     const sourceIndex = ev.source.index;\n    //     var clientX =\n\n    //         [...draggedDOM.parentNode.children]\n    //             .slice(0, sourceIndex)\n    //             .reduce((total, curr) => {\n    //                 const style = curr.currentStyle || window.getComputedStyle(curr);\n    //                 const marginLeft = parseFloat(style.marginLeft);\n    //                 const marginRight = parseFloat(style.marginRight);\n    //                 // console.log('right',marginRight,'left',marginLeft);\n    //                 return total + curr.clientWidth + marginLeft + marginLeft;\n    //             }, 0);\n\n    //     setPlaceholderProps({\n    //         clientHeight,\n    //         clientWidth,\n    //         clientX,\n    //     });\n    // };\n\n    const [startX, setStartX] = useState(null)\n    const [startScrollX, setStartScrollX] = useState(null)\n\n    // const handleMouseDown = ({ target, clientX }) => {\n    //     console.log('target', target);\n    //     if (target.className !== \"task-preview-title\") {\n    //         console.log('yes', target);\n    //         return;\n    //     }\n    //     window.addEventListener(\"mousemove\", handleMouseMove);\n    //     window.addEventListener(\"mouseup\", handleMouseUp);\n    //     setStartX((prevState) => ({\n    //         ...prevState,\n    //         clientX,\n    //     }));\n    //     console.log('window',window.scrollX);\n    //     setStartScrollX(window.scrollX);\n\n    // };\n\n    // // Go to new scroll position every time the mouse moves while dragging is activated\n    // const handleMouseMove = ({ clientX }) => {\n    //     //   const { startX, startScrollX } = this.state;\n    //     const startXCopy = startX\n    //     const startScrollXCopy = startScrollX\n    //     const scrollX = startScrollXCopy - clientX + startXCopy;\n    //     window.scrollTo(scrollX, 0);\n    //     const windowScrollX = window.scrollX;\n    //     if (scrollX !== windowScrollX) {\n    //         const startXRes = clientX + windowScrollX - startScrollXCopy\n    //         setStartX(startXRes)\n    //     }\n    // }\n\n    // const handleMouseUp = () => {\n    //     if (startX) {\n    //         window.removeEventListener(\"mousemove\", handleMouseMove);\n    //         window.removeEventListener(\"mouseup\", handleMouseUp);\n    //         setStartX(null)\n    //         setStartScrollX(null)\n    //     }\n    // };\n\n\n\n    const handleDragUpdate = ev => {\n        if (ev.type !== 'task') {  //Only when dragging lists\n            return\n        }\n        // console.log('ev', ev);\n        // if (!ev.destination) {\n        //     return;\n        // }\n\n        const draggedDOM = getDraggedDom(ev.draggableId);\n\n        if (!draggedDOM) {\n            return;\n        }\n        // console.log('draggedDOM.parentNode', draggedDOM.parentNode)\n        // const { clientHeight, clientWidth, scrollTop, scrollHeight } = draggedDOM\n        // console.log('clientHeight: ', clientHeight, ' scrollTop: ', scrollTop, ' scrollHeight: ', scrollHeight);\n        // const destinationIndex = ev.destination.index;\n        // const sourceIndex = ev.source.index;\n        // const childrenArray = [...draggedDOM.parentNode.children];\n        // const movedItem = childrenArray[sourceIndex];\n        // childrenArray.splice(sourceIndex, 1);\n        // const updatedArray = [\n        //     ...childrenArray.slice(0, destinationIndex),\n        //     movedItem,\n        //     ...childrenArray.slice(destinationIndex + 1)\n        // ];\n        // var clientX =\n        //     updatedArray.slice(0, destinationIndex).reduce((total, curr) => {\n        //         const style = curr.currentStyle || window.getComputedStyle(curr);\n        //         const marginLeft = parseFloat(style.marginLeft);\n        //         return total + curr.clientWidth + marginLeft + marginLeft;\n        //     }, 0);\n\n        // setPlaceholderProps({\n        //     clientHeight,\n        //     clientWidth,\n        //     clientX\n        // });\n    };\n\n\n    const getDraggedDom = draggableId => {\n        const domQuery = `[${queryAttr}='${draggableId}']`;\n        const draggedDOM = document.querySelector(domQuery);\n\n        return draggedDOM;\n    };\n\n\n\n    if (loading) {\n        return (<div>Loading...</div>)\n    }\n    else return (\n        <section className=\"board-details\" >\n\n            {/* <div className=\"board-header\">\n                <button>button1</button>\n                <button>button2</button>\n                <button>button3</button>\n            </div> */}\n            {board && <DragDropContext\n                // onDragStart={handleDragStart}\n\n                onDragUpdate={handleDragUpdate}\n                onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"board\" type=\"lists\" direction='horizontal' >\n                    {(provided, snapshot) => (\n                        <div className=\"list-container\" ref={provided.innerRef} {...provided.droppableProps}>\n                            {board.taskLists && board.taskLists.map((taskList, index) => (\n                                <Draggable key={taskList.id} draggableId={taskList.id} index={index} type=\"lists\">\n                                    {(provided, snapshot) => (\n                                        <TaskList\n                                            taskListIdx={index}\n                                            taskList={taskList}\n                                            onRemoveList={removeList}\n                                            onListUpdated={updateList}\n                                            innerRef={provided.innerRef}\n                                            provided={provided}\n                                        />\n                                    )}\n\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                            {/* {placeholderProps && snapshot.isDraggingOver && (\n                                <div\n                                    className=\"placeholder\"\n                                    style={{\n                                        left: placeholderProps.clientX,\n                                        height: placeholderProps.clientHeight,\n                                        width: placeholderProps.clientWidth,\n                                    }}\n                                />\n\n                            )} */}\n                            <AddTaskList board={board} onBoardUpdated={updateBoard} />\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n            }\n\n\n\n\n            {board && <Route exact path={`${path}/:taskId`} component={TaskDetails} />}\n        </section >\n    )\n}\n\nexport default BoardDetails\n\n\n\n","import React, { useEffect } from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadBoards } from '../store/actions/boardActions'\n\nconst BoardsPage = () => {\n    // const { loadBoards, boards } = useContext(BoardContext)\n    const boards = useSelector(state => state.board.boards);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const getBoards = async () => {\n            await dispatch(loadBoards())\n            console.log('adsasd')\n        }\n        getBoards()\n    }, [])\n\n    return (\n        <div>\n            <h1>Boards new</h1>\n            {boards && boards.length && boards.map(board => (\n                <div key={board._id}>\n                    <NavLink to={`board/${board._id}`}>{board._id}</NavLink>\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\n\nexport default BoardsPage\n// export default connect(mapStateToProps, mapDispatchToProps)(BoardsPage);\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport HomePage from './pages/HomePage';\nimport MainNav from './components/MainNav';\nimport BoardDetails from './pages/BoardDetails';\n// import { BoardContextProvider } from './store/contexts/BoardContext';\nimport BoardsPage from './pages/BoardsPage';\nimport { createBrowserHistory } from 'history';\n// const history = createBrowserHistory()\n\nfunction App() {\n  // console.log('d',process.env)\n\n  return (\n    <main>\n      <Router>\n        <MainNav />\n        <Switch>\n          <Route path=\"/board/:boardId\" component={BoardDetails} />\n          <Route path=\"/boards\" component={BoardsPage} />\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </Router>\n     </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    boards: null,\n    currBoard: null,\n    currTask: null,\n    isExpanded: false\n};\n\nexport const boardReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_BOARDS':\n            return {\n                ...state,\n                boards: JSON.parse(JSON.stringify(action.boards))\n            };\n        case 'SET_BOARD':\n            return {\n                ...state,\n                currBoard: JSON.parse(JSON.stringify(action.currBoard))\n            };\n        case 'SET_TASK':\n            let taskToUpdate;\n            state.currBoard.taskLists.forEach(taskList => {\n                taskList.tasks.find(task => {\n                    if (task.id === action.id) taskToUpdate = task\n                })\n            })\n            return {\n                ...state,\n                currTask: taskToUpdate ? { ...taskToUpdate } : null\n            };\n        case 'UPDATE_TASK':\n            return {\n                ...state,\n                currTask: { ...action.currTask }\n            }\n        case 'TOGGLE_LABELS':\n            return {\n                ...state,\n                isExpanded: !state.isExpanded\n            }\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { boardReducer } from './reducers/boardReducer';\n\nconst store = createStore(combineReducers({\n    board: boardReducer,\n}), applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport App from './App.jsx';\nimport './styles/global.scss'\n// import '@fortawesome/fontawesome-free/css/all.css'\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nReactDOM.render(\n  // <Router>\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  // </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
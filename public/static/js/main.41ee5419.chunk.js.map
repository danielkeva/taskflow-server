{"version":3,"sources":["pages/HomePage.jsx","components/MainNav.jsx","services/http.service.js","services/util.service.js","services/board.service.js","services/socket.service.js","store/actions/boardActions.js","components/task-cmps/task-actions/LabelList.jsx","components/task-cmps/TaskPreview.jsx","hooks/useKeypress.jsx","components/TextEditor.jsx","components/task-cmps/ListMenu.jsx","hooks/useOnClickOutSide.js","components/task-cmps/TaskList.jsx","components/task-cmps/task-actions/LabelPicker.jsx","components/task-cmps/task-actions/DatePicker.jsx","components/task-cmps/task-actions/checklist-cmps/ChecklistPicker.jsx","components/task-cmps/task-actions/CoverPicker.jsx","components/task-cmps/task-actions/TaskActions.jsx","components/task-cmps/task-actions/checklist-cmps/ChecklistItem.jsx","components/task-cmps/task-actions/checklist-cmps/TaskChecklist.jsx","components/ActivityLog.jsx","pages/TaskDetails.jsx","components/task-cmps/AddTaskList.jsx","hooks/useAsyncAction.jsx","pages/BoardDetails.jsx","pages/BoardsPage.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/index.js","index.js"],"names":["HomePage","MainNav","to","className","exact","activeClassName","axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","response","status","console","log","utilService","makeId","length","txt","possible","i","charAt","Math","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","reorder","list","startIndex","endIndex","Array","from","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","boardService","query","HttpService","getById","update","board","_id","getEmptyList","id","title","theme","tasks","getEmptyTask","description","creatorId","membersId","comments","dueDate","labels","isDone","attachment","checklists","getEmptyCheckList","listItems","getEmptyListItem","newActivity","cardTxt","boardTxt","taskId","date","Date","now","currBoard","socket","socketService","setup","io","terminate","on","eventName","cb","off","emit","saveBoard","updatedBoard","dispatch","boardCopy","JSON","parse","stringify","type","savedBoard","loadTask","getState","currTask","updateTask","task","LabelList","map","label","key","style","backgroundColor","color","TaskPreview","useRouteMatch","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","draggable","calendar","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","window","addEventListener","removeEventListener","TextEditor","text","name","onInputBlur","isWide","isFocused","blurInput","onChange","onSubmit","onEscape","isEditing","setIsEditing","initialText","setInitialText","inputEl","useRef","enter","esc","current","focus","undefined","target","value","ModuleText","React","createElement","onClick","updateText","autoFocus","rows","defaultValue","ev","onBlur","inputVal","test","ListMenu","onCloseMenu","onRemoveList","onAddTask","useOnClickOutside","handler","listener","event","contains","document","TaskList","taskList","taskListIdx","onListUpdated","taskListCopy","setTaskListCopy","newTask","setNewTask","isMenuOpen","setIsMenuOpen","wrapperRef","emptyTask","handleTaskChange","updateList","updatedTaskList","addTask","push","stopEditing","droppableProps","placeholder","LabelPicker","onCloseModal","onTaskUpdated","labelsUpdated","selectedLabel","setSelectedLabel","handleChange","updateLabel","labelsCopy","labelIdx","findIndex","taskCopy","taskLabelIdx","find","idx","toggleLabels","labelToEdit","href","selectLabelToEdit","DatePicker","onAddActivity","setDate","isTaskUpdated","setIsUpdated","moment","format","activity","addActivity","submitDate","ChecklistPicker","checklist","setChecklist","emptyChecklist","addChecklist","checklistCopy","CoverPicker","coverColors","TaskActions","onUpdateTask","onLabelsUpdated","setIsActive","currAction","setCurrAction","isLabelActive","isMemberActive","isChecklistActive","isDueDateActive","isCoverActive","activeAction","setAction","closeModal","toggle","isActive","prevState","ChecklistItem","item","onRemoveItem","itemCopy","setItem","initialRender","updateItem","checked","handleClose","TaskChecklist","newItem","setNewItem","progress","setProgress","addItem","doneCount","reduce","acc","donePrecent","round","emptyItem","removeItem","itemId","updateChecklist","currItem","currChecklist","percent","ActivityLog","activities","useSelector","state","filter","dangerouslySetInnerHTML","__html","TaskDetails","useDispatch","setTask","useParams","history","useHistory","load","updateBoard","taskLists","forEach","unshift","stopPropagation","updatedLabels","editedLabel","currLabel","AddTaskList","onBoardUpdated","newTaskList","setTaskList","addTaskList","emptyTaskList","useAsyncAction","action","dependeces","loading","setLoading","isError","setIsError","asyncAction","useCallback","args","callback","BoardDetails","boardId","warn","loadBoard","setPlaceholderProps","path","updateCurrBoard","currList","setCurrBoard","removeList","taskListId","getDraggedDom","domQuery","querySelector","onDragStart","draggedDOM","children","clientHeight","clientWidth","sourceIndex","clientX","parentNode","slice","total","curr","currentStyle","getComputedStyle","marginLeft","parseFloat","marginRight","onDragUpdate","destinationIndex","childrenArray","movedItem","onDragEnd","tasklists","newState","items","sIndex","dIndex","direction","snapshot","component","BoardsPage","boards","getBoards","App","basename","process","Boolean","location","hostname","match","initialState","onRemove","onAdd","store","createStore","combineReducers","taskToUpdate","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41ee5419.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <h1>Home Page</h1>\n        </div>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nconst MainNav = () => {\n    return (\n        <nav>\n            <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Home </NavLink>  \n                | <NavLink to=\"/boards\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n                Boards </NavLink>\n        </nav>\n        // <nav>\n        //     <NavLink to=\"/\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n        //         Home </NavLink>  \n        //         | <NavLink to=\"/board\" className=\"main-navbar-nav-link\" exact activeClassName=\"active\">\n        //         Board </NavLink>\n        // </nav>\n    )\n}\n\nexport default MainNav","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyTask,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    // save\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     taskLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             tasks: [\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task1',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task2',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task3',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task4',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\nfunction query() {\n    return HttpService.get('board')\n}\n\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\n// function save(newBoard) {\n//     board = newBoard\n//     return JSON.parse(JSON.stringify(board))\n// }\n\n\nfunction update(board) {\n    // console.log('board');\n    return HttpService.put(`board/${board._id}`, board)\n}\n\n\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        tasks: []\n    }\n}\n\nfunction getEmptyTask() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        attachment: '',\n        checklists: []\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: []\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, taskId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        taskId,\n        date: Date.now()\n    }\n}\n\n// function getTaskById(taskId) {\n//     for (let i = 0; i < board.taskLists.length; i++) {\n//         var task = board.taskLists[i].tasks.find(task => task.id === taskId)\n//         if (task) {\n//             return task\n//         }\n//     }\n// }\n","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    socket.off(eventName, cb)\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    socket.emit(eventName, data)\r\n}\r\n","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n\n    }\n\n}\n\nexport function saveBoard(updatedBoard) {\n    return async dispatch => {\n        const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n        dispatch({ type: 'SET_BOARD', currBoard: boardCopy })\n        const savedBoard = await boardService.update(boardCopy)\n        socketService.emit('update board', savedBoard);\n        console.log('afte boarrd saved', savedBoard);\n        dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadTask(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currTask\n    }\n}\n\nexport function updateTask(task) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currTask: task });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadTask(taskId) {\n    //     state.board.taskLists.forEach(taskList => {\n    //         const task = taskList.tasks.find(task => task.id === taskId)\n    //         if (task) {\n    //             dispatch({ type: 'SET_TASK', currTask: task })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateTaskList(taskList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n    //     boardCopy.taskLists.splice(idx, 1, taskList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeTaskList(taskListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n    //     boardCopy.taskLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateTask(task) {\n    //     dispatch({ type: 'SET_TASK', currTask: task })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.taskLists.forEach(taskList => {\n    //       let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //       if (idx !== -1) {\n    //         taskList.tasks.splice(idx, 1, task)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","import React from 'react'\n\nconst LabelList = ({ labels }) => {\n    return (\n        <div className=\"labels-list\">\n            {labels.map(label => (\n                <span className=\"label\" key={label.id} style={{ backgroundColor: label.color }}>\n                        {label.title}\n                </span>\n            ))}\n        </div>\n    )\n}\n\nexport default LabelList\n","import React from 'react'\nimport { NavLink, useRouteMatch } from 'react-router-dom'\nimport LabelList from './task-actions/LabelList'\nimport Moment from 'react-moment';\nimport { useEffect } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst TaskPreview = ({ task, index }) => {\n    let { url } = useRouteMatch();\n\n    const calendarStrings = {\n        lastDay: '[Yesterday ] ',\n        sameDay: '[Today ] ',\n        nextDay: '[Tomorrow ] ',\n        lastWeek: 'DD/MM/YYYY',\n        nextWeek: 'DD/MM/YYYY',\n        sameElse: 'DD/MM/YYYY'\n    };\n\n\n    return (\n\n        <Draggable draggableId={task.id} index={index}>\n\n            {provided => (\n                <div\n                    className=\"task-preview\"\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}>\n                    <div className=\"task-preview-content\">\n                        <NavLink to={`${url}/${task.id}`} className=\"task-link\" activeClassName=\"active\" draggable=\"false\">\n                            {task.labels && <LabelList labels={task.labels} />}\n                            <div className=\"task-preview-title\">{task.title}</div>\n                            {task.dueDate && <Moment calendar={calendarStrings} date={task.dueDate} />}\n                        </NavLink>\n                    </div>\n\n                </div>\n\n            )}\n\n\n\n\n        </Draggable>\n    )\n}\nexport default TaskPreview\n","import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import React, { useState, useEffect, useRef } from 'react'\nimport useKeyPress from '../hooks/useKeypress'\n\nconst TextEditor = ({ type, text, name, onInputBlur, isWide, isFocused, blurInput, onChange, onSubmit, onEscape }) => {\n    // const [textCopy, setText] = useState(text)\n    const [isEditing, setIsEditing] = useState(false)\n    const [initialText, setInitialText] = useState('')\n    const inputEl = useRef(null)\n\n    const enter = useKeyPress(\"Enter\");\n    const esc = useKeyPress(\"Escape\");\n\n    // useEffect(() => {\n    //     if (isFocused) {\n    //         focusInput()\n    //     }\n    // }, [isFocused, isEditing])\n\n    useEffect(() => {\n        if (isEditing) {\n            inputEl.current.focus()\n        }\n    }, [isEditing])\n\n\n\n    useEffect(() => {\n        if (isFocused) {\n            setIsEditing(true)\n        }\n    }, [isFocused, isEditing]);\n\n\n    useEffect(() => {\n        // check if 'blurInput' prop is passed from parent \n        if (blurInput !== undefined && blurInput) {\n            //and wether or not to change the isEditing state from the parent component (for bluring the input)\n            setIsEditing(false)\n        }\n    }, [blurInput])\n\n\n\n    useEffect(() => {\n        if (isEditing) {\n            setInitialText(text)\n        }\n    }, [isEditing]) // when input is focused save the initial text\n\n\n    useEffect(() => {\n        if (isEditing && !isWide) { // if input is focused and not textarea\n            // if Enter is pressed, save the text and case the editor\n            if (enter) {\n                if (onInputBlur) {\n                    onInputBlur()\n                } else {\n                    onSubmit()\n                }\n                setIsEditing(false);\n            }\n            // if Escape is pressed, revert the text and close the editor\n            if (esc) {\n                const customEv = {\n                    target: {\n                        name: name,\n                        value: initialText\n                    },\n                }\n                onChange(customEv)\n                setIsEditing(false);\n                if (onEscape) {\n                    onEscape()\n                }\n            }\n        }\n    }, [enter, esc]); // watch the Enter and Escape key presses\n\n    const ModuleText = React.createElement(\n        type,\n        {\n            className: 'module-text',\n            onClick: () => { setIsEditing(true) }\n        },\n        text\n    );\n\n\n    const updateText = () => {\n        if (onInputBlur) {\n            setIsEditing(false)\n            onInputBlur()\n        }\n    }\n    const test = (ev) => {\n        const reg = /^\\s+$/; // check for whitespace \n        const inputVal = ev.target.value;\n        if (reg.test(inputVal) || inputVal === '') {\n            return\n        } else {\n            onChange(ev)\n        }\n    }\n    const handleTextareaChange = (ev) => {\n        onChange(ev)\n    }\n    const focusInput = () => {\n        if (!isEditing) {\n            setIsEditing(true)\n            setTimeout(() => {\n                inputEl.current.focus();\n            }, 0)\n\n        }\n    }\n    return (\n        <div className=\"text-editor-wrapper\">\n            {\n                isEditing ?\n                    (!isWide ?\n                        <input type=\"text\" ref={inputEl} autoFocus className=\"focusClass\" name={name} defaultValue={text} onChange={test} onBlur={updateText} /> :\n                        <textarea  ref={inputEl} className=\"focusClass\" autoFocus rows=\"5\" name={name} defaultValue={text} onChange={handleTextareaChange} onBlur={updateText} />) :\n                    ModuleText\n            }\n\n        </div>\n    )\n}\n\nexport default TextEditor\n","import React from 'react'\nimport { RiCloseLine } from \"react-icons/ri\";\n\nconst ListMenu = ({ onCloseMenu, onRemoveList,onAddTask }) => {\n    return (\n        <div className=\"pop-up list-menu\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={() => onCloseMenu()}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <div onClick={onAddTask} >Add card</div>\n            <div>Change list color</div>\n            <div>Sort list by</div>\n            <div onClick={onRemoveList}>Delete list</div>\n        </div>\n    )\n}\n\nexport default ListMenu\n","// hook from https://usehooks.com/useOnClickOutside/\nimport { useEffect } from \"react\";\n\n// Hook\nfunction useOnClickOutside(ref, handler) {\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import React, { useEffect, useState, useRef } from 'react'\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\n\n// import 'simplebar/dist/simplebar.min.css';\nimport TaskPreview from './TaskPreview'\nimport TextEditor from '../TextEditor'\nimport ListMenu from './ListMenu';\nimport { boardService } from '../../services/board.service';\nimport useOnClickOutside from '../../hooks/useOnClickOutSide';\nimport { RiCloseLine, RiAddLine } from 'react-icons/ri';\n\n\n\n\n\nconst TaskList = ({ provided, innerRef, taskList, taskListIdx, onListUpdated, onRemoveList }) => {\n\n    const [taskListCopy, setTaskListCopy] = useState({ ...taskList })\n    const [newTask, setNewTask] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n\n\n\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        setTaskListCopy({ ...taskList })\n    }, [taskList])\n\n\n    const getEmptyTask = () => {\n        setIsMenuOpen(false)\n        const emptyTask = boardService.getEmptyTask()\n        setNewTask(emptyTask)\n        setIsEditing(true)\n    }\n\n    const handleListChange = (ev) => {\n        setTaskListCopy({ ...taskListCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const handleTaskChange = (ev) => {\n        setNewTask({ ...newTask, [ev.target.name]: ev.target.value })\n\n    }\n    const handleListRemove = () => {\n        onRemoveList(taskList.id)\n    }\n    const updateList = (updatedTaskList) => {\n        if (updatedTaskList) {\n            onListUpdated(updatedTaskList)\n        } else {\n            onListUpdated(taskListCopy)\n        }\n        setIsEditing(false)\n        setNewTask(null)\n    }\n\n    const addTask = () => {\n        if (newTask && newTask.title) {\n            const updatedTaskList = JSON.parse(JSON.stringify(taskListCopy));\n            updatedTaskList.tasks.push(newTask)\n            updateList(updatedTaskList)\n        }\n        setIsEditing(false)\n        setNewTask(null)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            console.log('outside');\n            addTask()\n        }\n    });\n    const stopEditing = () => {\n        setNewTask(null)\n        setIsEditing(false)\n    }\n    return (\n        taskListCopy &&\n        <div className=\"list-wrapper\"\n            ref={innerRef}\n            {...provided.draggableProps}\n        >\n            <div\n                className=\"list\"\n            >\n                <div className=\"list-header\"     {...provided.dragHandleProps}>\n                    {taskListCopy.title &&\n                        <TextEditor\n                            name=\"title\"\n                            type=\"h3\"\n                            text={taskListCopy.title}\n                            onChange={handleListChange}\n                            onInputBlur={updateList}\n                        />}\n\n                    <button className=\"list-menu-btn clear-btn\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n\n                        <BsThreeDots />\n                    </button>\n                    {isMenuOpen && !isEditing &&\n                        <ListMenu onRemoveList={handleListRemove} onAddTask={getEmptyTask} onCloseMenu={() => setIsMenuOpen(false)} />}\n                </div>\n\n\n\n                <Droppable type=\"task\" droppableId={`${taskListIdx}`}>\n                    {provided => (\n                        <div className=\"list-content u-fancy-scrollbar\" {...provided.droppableProps} ref={provided.innerRef}>\n                            {taskList.tasks.map((task, index) => (\n                                <TaskPreview key={task.id} task={task} index={index} />\n                            ))}\n                            {provided.placeholder}\n                            {(isEditing && newTask) && <div className=\"add-task-wrapper \"  ref={wrapperRef}>\n                                <TextEditor\n                                    name=\"title\"\n                                    type=\"p\"\n                                    text={newTask.title}\n                                    onChange={handleTaskChange}\n                                    isFocused={isEditing}\n                                    onSubmit={addTask}\n                                />\n                                <div className=\"add-task-controls\">\n                                    <button onClick={addTask} className=\"submit-btn\">Add task</button>\n                                    <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n                                        <RiCloseLine />\n                                    </button>\n                                </div>\n                            </div>}\n                        </div>\n                    )}\n                </Droppable>\n                <div className=\"list-footer\">\n                    {(!isEditing && !newTask) &&\n                        <a className=\"clear-btn list-footer-btn\" onClick={getEmptyTask}  >\n                            <span className=\"icon-lg add-icon\"><RiAddLine /></span> <span>Add new task</span>\n                        </a >\n\n                    }\n                </div>\n            </div>\n        </div >\n\n    )\n}\n\nexport default TaskList\n\n{/* <div className=\"list-footer\" ref={wrapperRef}>\n                {(!isEditing && !newTask) ?\n                    <button className=\"clear-btn\" onClick={getEmptyTask}>add new task</button> :\n                    (<div ref={wrapperRef}>\n                        <TextEditor\n                            name=\"title\"\n                            type=\"p\"\n                            text={newTask.title}\n                            onChange={handleTaskChange}\n                            isFocused={isEditing}\n                            onSubmit={addTask}\n                        />\n                        <button onClick={addTask} className=\"submit-btn\">Add task</button>\n                        <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n                            <RiCloseLine />\n                        </button>\n                    </div>)\n                }\n            </div> */}\n\n\n        //     (<div className=\"add-task-wrapper\" title={taskList.id} ref={wrapperRef}>\n        //     <TextEditor\n        //         name=\"title\"\n        //         type=\"p\"\n        //         text={newTask.title}\n        //         onChange={handleTaskChange}\n        //         isFocused={isEditing}\n        //         onSubmit={addTask}\n        //     />\n        //     <div className=\"add-task-controls\">\n        //         <button onClick={addTask} className=\"submit-btn\">Add task</button>\n        //         <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n        //             <RiCloseLine />\n        //         </button>\n        //     </div>\n        // </div>)","import React, { useState } from 'react'\n\nimport { RiCloseLine } from \"react-icons/ri\";\nimport { GoPencil } from \"react-icons/go\";\n\nimport TextEditor from '../../TextEditor';\nimport { useEffect } from 'react';\n\n\nconst LabelPicker = ({ task, labels, onCloseModal, onTaskUpdated, labelsUpdated }) => {\n    const [selectedLabel, setSelectedLabel] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n\n\n    const selectLabelToEdit = (label) => {\n        setSelectedLabel({ ...label })\n        setIsEditing(true)\n    }\n\n    const handleChange = (ev) => {\n        setSelectedLabel({ ...selectedLabel, [ev.target.name]: ev.target.value })\n    }\n    const updateLabel = () => {\n        const labelsCopy = [...labels];\n        const labelIdx = labelsCopy.findIndex(label => label.id === selectedLabel.id)\n        labelsCopy.splice(labelIdx, 1, selectedLabel)\n        labelsUpdated([...labelsCopy], selectedLabel)\n        setIsEditing(false);\n    }\n\n    useEffect(() => {\n        if (!isEditing && selectedLabel) {\n            console.log('yesbabe');\n            const taskCopy = JSON.parse(JSON.stringify(task));\n            const taskLabelIdx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            if (taskLabelIdx !== -1) {\n                console.log('yes');\n                taskCopy.labels.splice(taskLabelIdx, 1, selectedLabel)\n                onTaskUpdated(taskCopy)\n            }\n        }\n\n    }, [isEditing])\n\n    // useEffect(() => {\n    //     if (!isEditing && selectedLabel) {\n    //         const taskCopy = JSON.parse(JSON.stringify(task));\n    //         const taskLabelIdx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n    //         if (taskLabelIdx !== -1) {\n    //             console.log('yes');\n    //             taskCopy.labels.splice(taskLabelIdx, 1, selectedLabel)\n    //             onTaskUpdated(taskCopy)\n    //         }\n    //     }\n\n    // }, [isEditing])\n\n\n    const toggleLabels = (selectedLabel) => {\n        let labelExist;\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        labelExist = taskCopy.labels.find(label => label.id === selectedLabel.id)\n        if (!labelExist) {\n            taskCopy.labels.push(selectedLabel)\n        } else {\n            const idx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            taskCopy.labels.splice(idx, 1)\n        }\n        onTaskUpdated(taskCopy)\n    }\n\n    const labelToEdit = (label) => {\n        if (selectedLabel) {\n            // console.log(label.id === selectedLabel.id)\n            return label.id === selectedLabel.id\n        }\n    }\n\n    return (\n        <div className=\"pop-up labels\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <ul>\n                {labels.map(label => (\n                    <li className=\"label-container\" key={label.id}>\n                        <span\n                            className=\"card-label\"\n                            style={{ backgroundColor: label.color }}\n                            onClick={() => toggleLabels(label)}\n                        >\n                            {<span className=\"label-title\">{label.title}</span>}\n                            {labelToEdit(label) && isEditing && <TextEditor\n                                type=\"p\"\n                                name=\"title\"\n                                isFocused={isEditing}\n                                text={label.title}\n                                onChange={handleChange}\n                                onInputBlur={updateLabel}\n                            />}\n                            <span className=\"label-selected\">\n                            </span>\n                        </span>\n                        <a href=\"#\" onClick={() => selectLabelToEdit(label)}>\n                            <GoPencil />\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LabelPicker\n","import React, { useEffect,useState } from 'react'\nimport { useRouteMatch } from 'react-router-dom';\n\nimport moment from 'moment'\nimport { RiCloseLine } from 'react-icons/ri'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n\nimport { boardService } from '../../../services/board.service';\n\nconst DatePicker = ({ task, onTaskUpdated, onCloseModal, onAddActivity }) => {\n    const [value, setDate] = useState(new Date());\n    const [isTaskUpdated, setIsUpdated] = useState(false)\n    let { url } = useRouteMatch();\n\n    useEffect(() => {\n        if (task.dueDate) {\n            const date = new Date(task.dueDate)\n            setDate(date)\n        }\n    }, [])\n\n    useEffect(() => {\n        const addActivity = async () => {\n            if (isTaskUpdated) {\n                const dueDate = moment(new Date(task.dueDate)).format(\"MMM Do YY\");\n\n                const activity = boardService.newActivity(\n                    `set this card to be due at ${dueDate}`,\n                    `set <a href=\"${url}\">${task.title}</a> to be due at ${dueDate}`,\n                    task.id\n                )\n                await onAddActivity(activity)\n            }\n        }\n        addActivity()\n    }, [isTaskUpdated])\n\n\n\n    const submitDate = async () => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        taskCopy.dueDate = value\n        await onTaskUpdated(taskCopy)\n        setIsUpdated(true)\n        onCloseModal()\n    }\n\n\n    const onChangeDate = (date) => {\n        setDate(date)\n    }\n    return (\n        <div className=\"pop-up\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Date</span>\n                <button onClick={onCloseModal} className=\"pop-up-close-btn clear-btn icon-lg\">\n                    <RiCloseLine />\n                </button>\n            </div>\n            <Calendar\n                onChange={onChangeDate}\n                value={value}\n            />\n            <button onClick={submitDate} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default DatePicker\n","import React, { useEffect, useState } from 'react'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\n\nconst ChecklistPicker = ({ task, onTaskUpdated, onCloseModal }) => {\n    const [checklist, setChecklist] = useState({})\n    useEffect(() => {\n        console.log('ONCE');\n        const emptyChecklist = boardService.getEmptyCheckList();\n        setChecklist({ ...emptyChecklist })\n    }, [])\n\n    const handleChange = (ev) => {\n        setChecklist({ ...checklist, [ev.target.name]: ev.target.value })\n    }\n    const addChecklist = () => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        const checklistCopy = { ...checklist }\n        taskCopy.checklists.push(checklistCopy)\n        onTaskUpdated(taskCopy)\n        onCloseModal()\n    }\n    return (\n        <div className=\"pop-up\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Add checklist</span>\n                <button className=\"pop-up-close-btn clear-btn\">\n                    {/* <i className=\"fas fa-times\"></i> */}\n                </button>\n            </div>\n            <TextEditor\n                isFocused={true}\n                onChange={handleChange}\n                onSubmit={addChecklist}\n                type=\"p\"\n                name=\"title\"\n            />\n            <button onClick={addChecklist} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default ChecklistPicker\n","import React from 'react'\nimport { RiCloseLine } from 'react-icons/ri'\nimport { useState } from 'react'\n\nconst CoverPicker = ({ onCloseModal, onTaskUpdated, }) => {\n    const [coverColors, setCoverColors] = useState([\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#344563',\n        '#00c2e0',\n        '#ff78cb',\n    ])\n    return (\n        <div className=\"pop-up\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Cover</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <span className=\"pop-up-title\">Colors</span>\n            <div className=\"cover-colors\">\n                {coverColors.map((color, idx) => (\n                    <span className=\"cover-color\" key={idx} style={{ backgroundColor: color }}></span>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default CoverPicker\n","import React, { useRef } from 'react'\nimport { useState } from 'react'\nimport LabelPicker from './LabelPicker'\nimport DatePicker from './DatePicker'\nimport ChecklistPicker from './checklist-cmps/ChecklistPicker'\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide'\nimport CoverPicker from './CoverPicker'\n\nconst TaskActions = ({ task, labels, onUpdateTask, onLabelsUpdated, onAddActivity }) => {\n    const wrapperRef = useRef(null)\n    const [isActive, setIsActive] = useState(false)\n    const [currAction, setCurrAction] = useState('')\n    const [activeAction, setAction] = useState({\n        isLabelActive: false,\n        isMemberActive: false,\n        isChecklistActive: false,\n        isDueDateActive: false,\n        isCoverActive: false,\n    })\n\n    useOnClickOutside(wrapperRef, () => {\n        closeModal()\n    });\n\n\n    const toggle = (isActive) => {\n        setAction(prevState => ({\n            ...prevState,\n            [isActive]: !prevState[isActive]\n        }));\n        setCurrAction(isActive)\n        setIsActive(prevState => (prevState, !prevState));\n    }\n\n    const closeModal = () => {\n        setAction(prevState => ({\n            ...prevState,\n            [currAction]: !prevState[currAction]\n        }));\n        setIsActive(false);\n        setCurrAction('')\n    }\n\n    return (\n        <div className=\"modal-sidebar\" ref={wrapperRef}>\n            <button className=\"modal-btn\" onClick={() => toggle('isLabelActive')}>Labels</button>\n            {activeAction.isLabelActive &&\n                <LabelPicker\n                    task={task}\n                    labels={labels}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask}\n                    labelsUpdated={onLabelsUpdated}\n                />}\n            <button className=\"modal-btn\" >Members</button>\n            <button className=\"modal-btn\" onClick={() => toggle('isChecklistActive')}>Checklist</button>\n            {activeAction.isChecklistActive &&\n                <ChecklistPicker\n                    task={task}\n                    onTaskUpdated={onUpdateTask}\n                    onCloseModal={closeModal}\n                />}\n            <button className=\"modal-btn\" onClick={() => toggle('isDueDateActive')}>Due date</button>\n            {activeAction.isDueDateActive &&\n                <DatePicker\n                    task={task}\n                    onTaskUpdated={onUpdateTask}\n                    onAddActivity={onAddActivity}\n                    onCloseModal={closeModal}\n                />}\n            <button className=\"modal-btn\" onClick={() => toggle('isCoverActive')}>Cover</button>\n            {activeAction.isCoverActive &&\n                <CoverPicker\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask} />}            {/* <button className=\"modal-btn\" onClick=\"$emit('removeTask')\">Delete</button> */}\n        </div>\n    )\n}\n\nexport default TaskActions\n","import React, { useState, useEffect } from 'react'\nimport TextEditor from '../../../TextEditor';\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport { useRef } from 'react';\nimport { BsTrash } from \"react-icons/bs\";\n\n\nconst ChecklistItem = ({ item, onSubmit, onRemoveItem }) => {\n    const [itemCopy, setItem] = useState({ ...item });\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n    const initialRender = useRef(true)\n\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            // setNewItem(null)\n            console.log('yes');\n        }\n    });\n\n    // useEffect(() => {\n    //     setItem({ ...item })\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    // }, [])\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            updateItem()\n        } else {\n            initialRender.current = false\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [itemCopy.isDone])\n\n    const handleChange = (ev) => {\n        const target = ev.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name; setItem({ ...itemCopy, [name]: value });\n    }\n    const handleClose = () => {\n        // when escape is pressed on 'TextEditor.jsx'\n        setIsEditing(false)\n    }\n\n    const updateItem = () => {\n        if (!itemCopy.title) {\n            setIsEditing(true)\n\n            return;\n        }\n        setIsEditing(false)\n        onSubmit({ ...itemCopy })\n    }\n\n    const handleRemove = () => {\n        onRemoveItem(itemCopy.id)\n    }\n    return (\n        <div ref={wrapperRef} className=\"checklist-item\" >\n            <div className={'checklist-item-edit space-between ' + (itemCopy.isDone ? 'done' : '')}>\n                <div className=\"flex align-center\">\n                    {itemCopy && <input type=\"checkbox\" name=\"isDone\" checked={itemCopy.isDone} onChange={handleChange} />}\n                    <div onClick={() => setIsEditing(true)}>\n                        <TextEditor\n                            text={item.title}\n                            onChange={handleChange}\n                            onSubmit={updateItem}\n                            onEscape={handleClose}\n                            blurInput={!isEditing}\n                            isFocused={isEditing}\n                            type=\"p\"\n                            name=\"title\"\n                        />\n                    </div>\n                </div>\n                <button className=\"remove-item-btn clear-btn\" onClick={handleRemove}>\n                    <BsTrash />\n                </button>\n            </div>\n            {isEditing &&\n                <div className=\"flex\">\n                    <button>Save</button>\n                    <button>sds</button>\n                    <div className=\"spacer\" onClick={handleClose}></div>\n                </div>}\n        </div>\n    )\n}\n\nexport default ChecklistItem\n","import React, { useState, useRef, useEffect } from 'react'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport ChecklistItem from './ChecklistItem';\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\n\nconst TaskChecklist = ({ task, checklist, onUpdateTask }) => {\n    const [newItem, setNewItem] = useState(null);\n    const [progress, setProgress] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        if (!checklist.listItems.length) {\n            addItem()\n        }\n    }, [checklist])\n\n    useEffect(() => {\n        const doneCount = checklist.listItems.reduce((acc, item) => {\n            if (item.isDone) acc++\n            return acc\n        }, 0)\n        let donePrecent = Math.round((doneCount * 100) / checklist.listItems.length)\n        setProgress(donePrecent)\n    }, [checklist])\n\n    const addItem = () => {\n        const emptyItem = boardService.getEmptyListItem();\n        setNewItem({ ...emptyItem })\n        setIsEditing(true);\n    }\n\n    const handleClose = () => {\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    const handleChange = (ev) => {\n        setNewItem({ ...newItem, [ev.target.name]: ev.target.value });\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            setNewItem(null)\n        }\n    });\n\n    const removeItem = (itemId) => {\n        const checklistCopy = { ...checklist };\n        const idx = checklistCopy.listItems.findIndex(item => item.id === itemId)\n        if (idx !== -1) {\n            checklistCopy.listItems.splice(idx, 1)\n        }\n        updateTask(checklistCopy)\n    }\n\n    const updateChecklist = (item) => {\n        const checklistCopy = { ...checklist };\n        if (item) {\n            const idx = checklistCopy.listItems.findIndex(currItem => currItem.id === item.id)\n            if (idx !== -1) {\n                checklistCopy.listItems.splice(idx, 1, item) // update an item \n                updateTask(checklistCopy);\n            }\n        } else {\n            checklistCopy.listItems.push(newItem)\n            updateTask(checklistCopy);\n            addItem()\n        }\n    }\n\n    const updateTask = (checklist) => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        const idx = taskCopy.checklists.findIndex(currChecklist => currChecklist.id === checklist.id)\n        taskCopy.checklists.splice(idx, 1, checklist)\n        onUpdateTask(taskCopy)\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    return (\n        <div>\n            <h3>{checklist.title}</h3>\n            {checklist.listItems.length > 0 &&\n                <Progress\n                    percent={progress}\n                />}\n            {checklist && checklist.listItems.map(item => (\n                <ChecklistItem\n                    key={item.id}\n                    onSubmit={updateChecklist}\n                    onRemoveItem={removeItem}\n                    item={item}\n                />\n            ))\n            }\n            {newItem && isEditing &&\n                <div ref={wrapperRef}>\n                    <TextEditor\n                        onChange={handleChange}\n                        onSubmit={updateChecklist}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n                    <div className=\"flex\">\n                        <button>Save</button>\n                        <button onClick={handleClose}>Close</button>\n                        <div className=\"spacer\" onClick={handleClose}></div>\n                    </div>\n                </div>\n            }\n            {!isEditing && <button className=\"modal-btn\" onClick={addItem} >Add an item</button>}\n        </div>\n    )\n}\n\nexport default TaskChecklist\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst ActivityLog = ({ taskId = null }) => {\n    const activities = useSelector(state => {\n        if (taskId) {\n            return state.board.currBoard.activities.filter(activity => activity.taskId === taskId)\n        } else {\n            return state.board.currBoard.activities\n        }\n    })\n    return (\n        <div>\n            <h1>activity</h1>\n            {activities.length > 0 && activities.map(activity => (\n                <div key={activity.id}>\n                    {taskId ?\n                        <p dangerouslySetInnerHTML={{ __html: activity.cardTxt }}></p> :\n                        <p dangerouslySetInnerHTML={{ __html: activity.boardTxt }}></p>}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default ActivityLog\n","import React, { useState, useContext, useEffect, useRef } from 'react'\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loadTask, saveBoard, updateTask } from '../store/actions/boardActions';\n\nimport Moment from 'react-moment';\n\nimport TextEditor from '../components/TextEditor';\nimport TaskActions from '../components/task-cmps/task-actions/TaskActions';\nimport TaskChecklist from '../components/task-cmps/task-actions/checklist-cmps/TaskChecklist';\nimport LabelList from '../components/task-cmps/task-actions/LabelList';\nimport ActivityLog from '../components/ActivityLog';\nimport useOnClickOutside from '../hooks/useOnClickOutSide';\n\n// const { loadTask, board, saveBoard, currTask, updateTask } = useContext(BoardContext)\nconst TaskDetails = () => {\n    const dispatch = useDispatch()\n    const currTask = useSelector(state => state.board.currTask)\n    const board = useSelector(state => state.board.currBoard)\n\n    const [isActive, setIsActive] = useState(true)\n    const [taskCopy, setTask] = useState(null)\n    const { taskId } = useParams();\n    const history = useHistory();\n    const wrapperRef = useRef(null)\n    useEffect(() => {\n        const load = async () => {\n            const res = await dispatch(loadTask(taskId))\n            if (!res) {\n                history.push(`/board/${board._id}`)\n            }\n        }\n        load()\n    }, [])\n\n    useEffect(() => {\n        const setTaskCopy = () => {\n            if (currTask) {\n                setTask({ ...currTask })\n            }\n        }\n        setTaskCopy()\n    }, [currTask])\n\n\n    const closeModal = () => {\n        history.push(`/board/${board._id}`)\n    }\n    useOnClickOutside(wrapperRef, () => {\n        history.push(`/board/${board._id}`)\n    });\n    const handleChange = (ev) => {\n        setTask({ ...taskCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const onUpdateTask = async (task) => {\n        if (task) {\n            await updateBoard({ ...task })\n        } else {\n            updateBoard({ ...taskCopy })\n        }\n    }\n\n    const updateBoard = async (task) => {\n        dispatch(updateTask(task))\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.taskLists.forEach(taskList => {\n            let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n            if (idx !== -1) {\n                taskList.tasks.splice(idx, 1, task)\n            }\n        })\n        await dispatch(saveBoard(boardCopy))\n    }\n\n    const updateBoardLabels = (updatedLabels, editedLabel) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n\n        boardCopy.labels = updatedLabels\n\n        boardCopy.taskLists.forEach(taskList => {\n            taskList.tasks.forEach(task => {\n                let currLabel = task.labels.find(label => label.id === editedLabel.id)\n                if (currLabel) {\n                    currLabel.title = editedLabel.title\n                }\n            })\n        })\n        dispatch(saveBoard(boardCopy))\n    }\n    const addActivity = async (activity) => {\n        // await console.log('addactivity',board)\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.activities.unshift(activity)\n        await dispatch(saveBoard(boardCopy))\n    }\n    const calendarStrings = {\n        lastDay: '[Yesterday ] ',\n        sameDay: '[Today ] ',\n        nextDay: '[Tomorrow ] ',\n        lastWeek: 'DD/MM/YYYY',\n        nextWeek: 'DD/MM/YYYY',\n        sameElse: 'DD/MM/YYYY'\n    };\n    return (\n        // <div className={'cover ' + (isActive ? 'active' : '')} onClick={closeModal}>\n        <div className={'cover ' + (isActive ? 'active' : '')} >\n            {taskCopy && currTask &&\n                < div className={'task-modal ' + (isActive ? 'active' : '')} onClick={(ev) => ev.stopPropagation()} ref={wrapperRef}>\n                    <div className=\"left-side\">\n                        <div className=\"modal-module\">\n                            <div className=\"task-header\">\n                                <TextEditor type=\"h3\" name=\"title\" text={taskCopy.title} onChange={handleChange} onInputBlur={onUpdateTask} />\n                            </div>\n                        </div>\n                        <div className=\"modal-module\">\n                            <div className=\"task-labels-date\">\n                                <div className=\"task-labels-list\">\n                                    <h3>Labels</h3>\n                                    {taskCopy.labels && <LabelList labels={taskCopy.labels} />}\n                                </div>\n                                {taskCopy.dueDate &&\n                                    <div className=\"task-due-date\">\n                                        <h3>Due date</h3>\n                                        <Moment calendar={calendarStrings} date={taskCopy.dueDate} />\n                                    </div>}\n                            </div>\n                        </div>\n                        <div className=\"modal-module\">\n                            <div className=\"task-description\">\n                                <i className=\"far fa-file-alt\"></i>\n                                <h3>Description</h3>\n                            </div>\n                            <TextEditor type=\"p\" name=\"description\" text={taskCopy.description} onChange={handleChange} onInputBlur={onUpdateTask} isWide={true} />\n                        </div>\n                        <div className=\"modal-module\">\n                            {taskCopy.checklists && taskCopy.checklists.map(checklist => (\n                                <TaskChecklist\n                                    checklist={checklist}\n                                    key={checklist.id}\n                                    task={taskCopy}\n                                    onUpdateTask={onUpdateTask}\n                                />\n                            ))}\n                        </div>\n                        <div className=\"modal-module\">\n                            <h3>Activity</h3>\n                            {/* <activity-log :taskId=\"taskCopy.id\" /> */}\n                            <ActivityLog taskId={taskCopy.id} />\n                        </div>\n                    </div>\n                    <div className=\"right-side\">\n                        <h3>Add to card</h3>\n                        {board && <TaskActions\n                            task={taskCopy}\n                            labels={board.labels}\n                            onUpdateTask={onUpdateTask}\n                            onLabelsUpdated={updateBoardLabels}\n                            onAddActivity={addActivity}\n                        />}\n                    </div>\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default TaskDetails\n","import React, { useState, useRef } from 'react'\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\n\nimport { boardService } from '../../services/board.service'\n\nimport { RiCloseLine } from 'react-icons/ri'\nimport TextEditor from '../TextEditor'\n\n\nconst AddTaskList = ({ board, onBoardUpdated }) => {\n    const [newTaskList, setTaskList] = useState(null)\n    const wrapperRef = useRef(null)\n\n    const getEmptyTaskList = () => {\n        const emptyTaskList = boardService.getEmptyList()\n        setTaskList(emptyTaskList)\n    }\n    const handleChange = (ev) => {\n        setTaskList({ ...newTaskList, [ev.target.name]: ev.target.value })\n    }\n\n    const addTaskList = () => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.taskLists.push(newTaskList);\n        onBoardUpdated(boardCopy)\n        setTaskList(null)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        setTaskList(null)\n    });\n\n    return (\n        <div className=\"list-wrapper \">\n            {newTaskList ?\n                <div className=\"list add-list\" ref={wrapperRef}>\n                    <TextEditor\n                        isFocused={true}\n                        onChange={handleChange}\n                        onSubmit={addTaskList}\n                        name=\"title\"\n                        type=\"p\"\n                    />\n                    <div className=\"add-list-controls\">\n                        <button className=\"submit-btn\" onClick={addTaskList}>Add List</button>\n                        <button onClick={() => setTaskList(null)} className=\"clear-btn icon-lg\">\n                            <RiCloseLine />\n                        </button>\n                    </div>\n                </div>\n                :\n                <button className=\"modal-btn\" onClick={getEmptyTaskList}>Add another list </button>\n            }\n        </div>\n    )\n}\n\nexport default AddTaskList\n","import { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nfunction useAsyncAction(action, dependeces = []) {\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const asyncAction = useCallback((...args) => {\n        async function callback() {\n            setLoading(true);\n            try {\n                const res = await dispatch(action(...args));\n                setIsError(false);\n                setLoading(false);\n                return res;\n            } catch (e) {\n                setLoading(false);\n                setIsError(true);\n                return e;\n            }\n        }\n        callback();\n    },\n        [action, ...dependeces],\n    );\n    return [asyncAction, loading, isError];\n}\n\nexport default useAsyncAction;","import React, { useEffect, useRef, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getBoardById, saveBoard, setCurrBoard } from '../store/actions/boardActions'\n\nimport { Route, useRouteMatch, useParams, useHistory } from 'react-router-dom'\n\n\n// import { Container, Draggable } from 'react-smooth-dnd';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { utilService } from '../services/util.service'\n\n\nimport TaskList from '../components/task-cmps/TaskList'\nimport TaskDetails from './TaskDetails'\nimport AddTaskList from '../components/task-cmps/AddTaskList'\nimport useAsyncAction from '../hooks/useAsyncAction';\nimport ActivityLog from '../components/ActivityLog';\nimport { socketService } from '../services/socket.service';\nimport { BsLockFill } from 'react-icons/bs';\n\n\n// const { getBoardById, isLoading, updateTaskList, removeTaskList, board, saveBoard } = useContext(BoardContext)\nconst BoardDetails = () => {\n    const dispatch = useDispatch()\n    const board = useSelector(state => state.board.currBoard)\n    const [loadBoard, loading, isError] = useAsyncAction(() => getBoardById(boardId));\n    const initialRender = useRef(true)\n\n    const queryAttr = \"data-rbd-draggable-id\";\n    const [placeholderProps, setPlaceholderProps] = useState(null);\n\n    const { boardId } = useParams();\n    let { path } = useRouteMatch();\n    let history = useHistory();\n\n    useEffect(() => {\n        loadBoard()\n    }, [])\n\n    useEffect(() => {\n        if (initialRender.current && board) {\n            console.log('board.', board._id);\n            socketService.setup()\n            socketService.emit('board topic', board._id)\n            socketService.on('update board', updateCurrBoard);\n            initialRender.current = false\n        }\n\n    }, [board])\n\n\n    useEffect(() => {\n        return () => {\n            socketService.off('update board', updateCurrBoard);\n            socketService.terminate();  // clean up\n        };\n    }, [])\n\n    useEffect(() => {\n        if (isError) {\n            history.push('/boards')\n        }\n    }, [isError])\n\n\n    const updateList = async (taskList) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n        boardCopy.taskLists.splice(idx, 1, taskList)\n        await dispatch(saveBoard(boardCopy))\n        console.log('adterupdatelist');\n        // dispatch(setCurrBoard(boardCopy))\n    }\n\n    const updateBoard = async (updatedBoard) => {\n        await dispatch(saveBoard(updatedBoard))\n    }\n\n\n    const updateCurrBoard = (updatedBoard) => {\n        dispatch(setCurrBoard(updatedBoard))\n    }\n\n\n    const removeList = (taskListId) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n        boardCopy.taskLists.splice(idx, 1)\n        updateBoard(boardCopy)\n    }\n\n    const onDragEnd = (result) => {\n        if ((result.source.index === result.destination.index) &&\n            (result.source.droppableId === result.destination.droppableId)) { // Check if  update is required\n            return\n        }\n\n        setPlaceholderProps(null);\n        const { source, destination } = result;\n\n        // Dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        let tasklists = [...board.taskLists];\n        const newState = JSON.parse(JSON.stringify(board));\n\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\n            const items = utilService.reorder(tasklists, source.index, destination.index);\n            newState.taskLists = items;\n        } else {\n            const sIndex = +source.droppableId;\n            const dIndex = +destination.droppableId;\n            if (sIndex === dIndex) {\n                const items = utilService.reorder(tasklists[sIndex].tasks, source.index, destination.index);\n                newState.taskLists[sIndex].tasks = items;\n            }\n            else {\n                const result = utilService.move(tasklists[sIndex].tasks, tasklists[dIndex].tasks, source, destination);\n                newState.taskLists[sIndex].tasks = result[sIndex];\n                newState.taskLists[dIndex].tasks = result[dIndex];\n            }\n        }\n\n        updateBoard(newState)\n    }\n\n    const handleDragStart = ev => {\n        if (ev.type !== 'lists') {  //Only when dragging lists\n            return\n        }\n        const draggedDOM = getDraggedDom(ev.draggableId);\n        if (!draggedDOM) {\n            return;\n        }\n        const { clientHeight, clientWidth } = draggedDOM.children[0];\n        const sourceIndex = ev.source.index;\n        var clientX =\n\n            [...draggedDOM.parentNode.children]\n                .slice(0, sourceIndex)\n                .reduce((total, curr) => {\n                    const style = curr.currentStyle || window.getComputedStyle(curr);\n                    const marginLeft = parseFloat(style.marginLeft);\n                    const marginRight = parseFloat(style.marginRight);\n                    // console.log('right',marginRight,'left',marginLeft);\n                    return total + curr.clientWidth + marginLeft + marginLeft;\n                }, 0);\n\n        setPlaceholderProps({\n            clientHeight,\n            clientWidth,\n            clientX,\n        });\n    };\n\n    const handleDragUpdate = ev => {\n        if (ev.type !== 'lists') {  //Only when dragging lists\n            return\n        }\n        if (!ev.destination) {\n            return;\n        }\n\n        const draggedDOM = getDraggedDom(ev.draggableId);\n\n        if (!draggedDOM) {\n            return;\n        }\n\n        const { clientHeight, clientWidth } = draggedDOM.children[0];\n        const destinationIndex = ev.destination.index;\n        const sourceIndex = ev.source.index;\n        const childrenArray = [...draggedDOM.parentNode.children];\n        const movedItem = childrenArray[sourceIndex];\n        childrenArray.splice(sourceIndex, 1);\n        const updatedArray = [\n            ...childrenArray.slice(0, destinationIndex),\n            movedItem,\n            ...childrenArray.slice(destinationIndex + 1)\n        ];\n        var clientX =\n            updatedArray.slice(0, destinationIndex).reduce((total, curr) => {\n                const style = curr.currentStyle || window.getComputedStyle(curr);\n                const marginLeft = parseFloat(style.marginLeft);\n                return total + curr.clientWidth + marginLeft + marginLeft;\n            }, 0);\n\n        setPlaceholderProps({\n            clientHeight,\n            clientWidth,\n            clientX\n        });\n    };\n\n\n    const getDraggedDom = draggableId => {\n        const domQuery = `[${queryAttr}='${draggableId}']`;\n        const draggedDOM = document.querySelector(domQuery);\n\n        return draggedDOM;\n    };\n\n    if (loading) {\n        return (<div>Loading...</div>)\n    }\n    else return (\n        <section className=\"board-details\">\n            \n                {/* <div className=\"board-header\">\n                    <button>button1</button>\n                    <button>button2</button>\n                    <button>button3</button>\n                </div> */}\n            {board && <DragDropContext\n                onDragStart={handleDragStart}\n                onDragUpdate={handleDragUpdate}\n                onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"board\" type=\"lists\" direction='horizontal' >\n                    {(provided, snapshot) => (\n                        <div className=\"list-container\" ref={provided.innerRef} {...provided.droppableProps}>\n                            {board.taskLists && board.taskLists.map((taskList, index) => (\n                                <Draggable key={taskList.id} draggableId={taskList.id} index={index} type=\"lists\">\n                                    {(provided, snapshot) => (\n                                        <TaskList\n                                            taskListIdx={index}\n                                            taskList={taskList}\n                                            onRemoveList={removeList}\n                                            onListUpdated={updateList}\n                                            innerRef={provided.innerRef}\n                                            provided={provided}\n                                        />\n                                    )}\n\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                            {/* {placeholderProps && snapshot.isDraggingOver && (\n                                <div\n                                    className=\"placeholder\"\n                                    style={{\n                                        left: placeholderProps.clientX,\n                                        height: placeholderProps.clientHeight,\n                                        width: placeholderProps.clientWidth,\n                                    }}\n                                />\n\n                            )} */}\n                            <AddTaskList board={board} onBoardUpdated={updateBoard} />\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n            }\n\n\n\n\n            {board && <Route exact path={`${path}/:taskId`} component={TaskDetails} />}\n        </section >\n    )\n}\n\nexport default BoardDetails\n\n\n\n","import React, { useEffect } from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadBoards } from '../store/actions/boardActions'\n\nconst BoardsPage = () => {\n    // const { loadBoards, boards } = useContext(BoardContext)\n    const boards = useSelector(state => state.board.boards);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const getBoards = async () => {\n            await dispatch(loadBoards())\n            console.log('adsasd')\n        }\n        getBoards()\n    }, [])\n\n    return (\n        <div>\n            <h1>Boards new</h1>\n            {boards && boards.length && boards.map(board => (\n                <div key={board._id}>\n                    <NavLink to={`board/${board._id}`}>{board._id}</NavLink>\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\n\nexport default BoardsPage\n// export default connect(mapStateToProps, mapDispatchToProps)(BoardsPage);\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport HomePage from './pages/HomePage';\nimport MainNav from './components/MainNav';\nimport BoardDetails from './pages/BoardDetails';\n// import { BoardContextProvider } from './store/contexts/BoardContext';\nimport BoardsPage from './pages/BoardsPage';\n\nfunction App() {\n  return (\n    // <BoardContextProvider>\n      <main>\n        <Router basename={`${process.env.PUBLIC_URL}/`}>\n          <MainNav />\n          <Switch>\n            <Route  path=\"/board/:boardId\" component={BoardDetails} />\n            <Route  path=\"/boards\" component={BoardsPage} />\n            <Route  path=\"/\" component={HomePage} />\n          </Switch>\n        </Router>\n      </main>\n    // </BoardContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    boards: null,\n    currBoard: null,\n    currTask: null,\n    onRemove:false,\n    onAdd:false\n};\n\nexport const boardReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_BOARDS':\n            return {\n                ...state,\n                boards: JSON.parse(JSON.stringify(action.boards))\n            };\n        case 'SET_BOARD':\n            return {\n                ...state,\n                currBoard: JSON.parse(JSON.stringify(action.currBoard))\n            };\n        case 'SET_TASK':\n            let taskToUpdate;\n            state.currBoard.taskLists.forEach(taskList => {\n                taskList.tasks.find(task => {\n                    if (task.id === action.id) taskToUpdate = task\n                })\n            })\n            return {\n                ...state,\n                currTask: taskToUpdate ? { ...taskToUpdate } : null\n            };\n        case 'UPDATE_TASK':\n            return {\n                ...state,\n                currTask: { ...action.currTask }\n            }\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { boardReducer } from './reducers/boardReducer';\n\nconst store = createStore(combineReducers({\n    board: boardReducer,\n}), applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\n\nimport App from './App.jsx';\nimport './styles/global.scss'\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nReactDOM.render(\n  // <Router>\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  // </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
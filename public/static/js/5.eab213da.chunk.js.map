{"version":3,"sources":["selectors/boardSelector.js","components/task-cmps/task-actions/LabelList.jsx","components/task-cmps/TaskPreview.jsx","hooks/useKeypress.jsx","hooks/useOnClickOutSide.js","components/TextEditor.jsx","components/task-cmps/ListMenu.jsx","components/task-cmps/TaskList.jsx","components/task-cmps/task-actions/LabelPicker.jsx","components/task-cmps/task-actions/DatePicker.jsx","store/actions/generalAction.js","components/task-cmps/task-actions/checklist-cmps/ChecklistPicker.jsx","services/cloudinary.service.js","components/task-cmps/task-actions/CoverPicker.jsx","components/task-cmps/task-actions/TaskActions.jsx","components/task-cmps/task-actions/checklist-cmps/ChecklistItem.jsx","components/task-cmps/task-actions/checklist-cmps/TaskChecklist.jsx","pages/TaskDetails.jsx","components/task-cmps/AddTaskList.jsx","components/board-menu-cmps/BoardBgPicker.jsx","components/board-menu-cmps/BoardMenu.jsx","pages/BoardDetails.jsx","services/http.service.js","services/board.service.js","store/actions/boardActions.js","services/util.service.js","services/socket.service.js"],"names":["createSelector","state","board","currBoard","LabelList","labels","onLabelClicked","expandMode","dispatch","useDispatch","isExpanded","useSelector","handleClick","ev","preventDefault","toggleLabels","className","map","label","onClick","key","id","style","backgroundColor","color","title","Container","styled","div","props","cover","isFull","type","background","backgroundImage","minHeight","backgroundSize","display","fontSize","fontFamily","calendarStrings","lastDay","sameDay","nextDay","sameElse","TaskPreview","task","index","url","useRouteMatch","doneCount","useMemo","checklists","reduce","totalCount","checklist","listItems","length","acc","item","isDone","checklistItemsAmount","isDue","dueDate","console","log","date","Date","setHours","setDate","getDate","getTime","now","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","to","activeClassName","draggable","src","theme","dir","calendar","description","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","window","addEventListener","removeEventListener","useOnClickOutside","handler","exceptionalRef","listener","event","current","contains","target","document","TextEditor","text","name","onInputBlur","isWide","isFocused","onChange","onSubmit","onEscape","placeholder","isEditing","setIsEditing","initialText","setInitialText","inputEl","useRef","enter","esc","focus","value","ModuleText","React","createElement","updateText","autoFocus","rows","defaultValue","onBlur","inputVal","test","ListMenu","onCloseMenu","onRemoveList","onAddTask","TaskList","taskList","taskListIdx","onListUpdated","taskListCopy","setTaskListCopy","newTask","setNewTask","isMenuOpen","setIsMenuOpen","wrapperRef","getEmptyTask","emptyTask","boardService","handleTaskChange","updateList","updatedTaskList","newActivity","addTask","a","clickSource","JSON","parse","stringify","tasks","push","stopEditing","droppableId","LabelPicker","onCloseModal","onTaskUpdated","labelsUpdated","bounds","exceptionRef","selectedLabel","setSelectedLabel","handleChange","updateLabel","labelsCopy","labelIdx","findIndex","splice","taskCopy","taskLabelIdx","labelToEdit","find","idx","selectLabelToEdit","DatePicker","createActivity","timestamp","isRemoveActivity","moment","format","submitDate","toggleInitialAddition","isInitial","ChecklistPicker","sidebarRef","setChecklist","emptyChecklist","getEmptyCheckList","addChecklist","checklistCopy","uploadImg","UPLOAD_URL","formData","FormData","append","files","fetch","method","body","then","res","json","catch","err","error","HalfBgcWrapper","FullBgcWrapper","backgroundPosition","CoverPicker","selectedCover","setSelectedCover","loading","setLoading","handleSelected","handleLayout","handleThemeChange","handleUpload","cloudinaryService","img","utilService","makeId","isCover","images","htmlFor","height","width","TaskActions","onUpdateTask","onLabelsUpdated","onAddActivity","currAction","setCurrAction","setBounds","toggle","isActive","getBoundingClientRect","top","left","innerWidth","updateWidthAndHeight","useCallback","getElementById","right","closeModal","isEqual","require","memo","onRemoveItem","itemCopy","setItem","displayMsg","setDisplayMsg","unSavedTitle","setUnsavedTitle","editorRef","initialRender","prevState","updateItem","checked","handleClose","activity","prev","next","TaskChecklist","newItem","setNewItem","checklistTitle","setChecklistTitle","progress","setProgress","isInitialAddition","general","addItem","donePrecent","Math","round","emptyItem","getEmptyListItem","removeItem","itemId","updateTask","updateChecklist","currItem","updatedChecklist","currChecklist","filter","percent","TaskDetails","currTask","activeAction","setActiveAction","setTask","modalHeaderRef","taskId","useParams","history","useHistory","loadTask","_id","load","overflowX","updateBoard","boardCopy","activities","unshift","taskLists","forEach","saveBoard","updateBoardLabels","updatedLabels","editedLabel","currLabel","addActivity","handleActiveAction","action","class","txt","crossOrigin","data","stopPropagation","updatedTask","AddTaskList","onBoardUpdated","newTaskList","setTaskList","addTaskList","emptyTaskList","getEmptyList","override","css","BoardBgPicker","onGoBack","bgType","setBgType","handleStyle","size","BoardMenu","closeMenu","menuBtnRef","wrapperReff","selectedAction","setAction","selectAction","listen","location","classList","BoardDetails","boardId","path","getBoardById","loadBoard","socketService","setup","emit","on","updateCurrBoard","off","terminate","currList","updatedBoard","setCurrBoard","removeList","taskListId","toggleMenu","onDragEnd","result","source","destination","tasklists","newState","items","reorder","sIndex","dIndex","move","fromList","toList","direction","snapshot","droppableProps","exact","component","paddingTop","axios","Axios","create","withCredentials","endpoint","ajax","response","status","query","HttpService","getById","update","creatorId","membersId","comments","cardTxt","boardTxt","loadBoards","boards","warn","savedBoard","getState","possible","i","charAt","floor","random","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","itemToAdd","list","startIndex","endIndex","Array","from","removed","droppableSource","droppableDestination","sourceClone","destClone","socket","io","eventName","cb"],"mappings":"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","file":"static/js/5.eab213da.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\n\nconst currBoard = state => state.board.currBoard;\n\nexport const selectCurrBoard = createSelector(\n    currBoard,\n    board => board\n);\n","import React, { useState } from 'react';\nimport { IoMdAdd } from 'react-icons/io';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleLabels } from '../../../store/actions/boardActions';\n\n\nconst LabelList = ({ labels, onLabelClicked = null, expandMode }) => {\n    const dispatch = useDispatch()\n    const isExpanded = useSelector(state => state.board.isExpanded)\n\n    const handleClick = (ev) => {\n        ev.preventDefault();\n        if (onLabelClicked !== null) {\n            onLabelClicked(ev)\n        } else {\n            dispatch(toggleLabels()) // Using the store here to toggle all the labels in the board\n        }\n    }\n    return (\n\n        <div className=\"labels-list\">\n            {labels.map(label => (\n                <span\n                    onClick={handleClick}\n                    key={label.id}\n                    className={`label  ${isExpanded || expandMode ? 'label-expand' : ''}`}\n                    style={{ backgroundColor: label.color }}>\n                    <span className=\"label-title\">{label.title}</span>\n                </span>\n            ))}\n            {expandMode &&\n                <button className='modal-btn'  onClick={handleClick} >\n                    <IoMdAdd className=\"icon-md\" />\n                </button>}\n        </div>\n    )\n}\n\nexport default LabelList\n","import React, { useMemo } from 'react'\nimport { NavLink, useRouteMatch } from 'react-router-dom'\nimport LabelList from './task-actions/LabelList'\nimport Moment from 'react-moment';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components'\nimport { createSelector } from 'reselect'\nimport { IoMdCheckboxOutline } from \"react-icons/io\";\nimport { GrTextAlignFull } from \"react-icons/gr\";\nimport { RiTimeLine } from \"react-icons/ri\";\n\n\nconst Container = styled.div`\n    ${props => props.cover.isFull ?\n        (props.cover.type === 'color' ?\n            { backgroundColor: props.cover.isFull ? props.cover.background : '' } :\n            { backgroundImage: 'url(' + props.cover.background + ')', minHeight: 235, backgroundSize: 'cover' }) : ''}\n            font-size:${props => props.cover.isFull ? '16px' : ''};\n            font-family:${props => props.cover.isFull ? 'LatoBold' : ''};\n\n            ${props => props.cover.isFull ?\n        {\n            display: 'flex',\n            fontSize: '16px',\n            fontFamily: 'LatoBold'\n        } :\n        ''}\n    `;\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday]',\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    sameElse: 'MMMM D'\n};\n\nconst TaskPreview = ({ task, index }) => {\n    let { url } = useRouteMatch();\n\n    const doneCount = useMemo(\n        () =>\n            task.checklists.reduce((totalCount, checklist) => {\n                if (checklist.listItems.length > 0) {\n                    let checklistSum = checklist.listItems.reduce((acc, item) => {\n                        if (item.isDone) acc++\n                        return acc\n                    }, 0)\n                    totalCount += checklistSum\n                }\n                return totalCount\n            }, 0),\n        [task.checklists]\n    );\n    const checklistItemsAmount = useMemo(\n        () =>\n            task.checklists.reduce((acc, checklist) => {\n                if (checklist.listItems.length > 0) {\n                    acc += checklist.listItems.length\n                }\n                return acc\n            }, 0),\n        [task.checklists]\n    );\n\n    const isDue = useMemo(() => {\n        if (!task.dueDate) return;\n        console.log('is due')\n        let date = new Date()\n        date.setHours(0, 0, 0, 0)\n        date.setDate(date.getDate() + 1)\n        if (date.getTime() === task.dueDate) {\n            return 'due-soon'\n        } else if (task.dueDate <= Date.now()) {\n            return 'over-due'\n        } else return ''\n        // }\n    }, [task.dueDate]);\n\n    return (\n\n        <Draggable draggableId={task.id} index={index} type=\"task\">\n\n            {provided => (\n                <div\n                    className='task-preview'\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}>\n                    <NavLink to={`${url}/${task.id}`} className='task-link' activeClassName='active' draggable='false'>\n                        <Container cover={task.cover}>\n                            {(task.cover.background && !task.cover.isFull) &&\n                                <div>\n                                    {task.cover.type === 'color' ?\n                                        <div\n                                            className={task.cover.background ? 'task-cover' : ''}\n                                            style={{ backgroundColor: task.cover.background }}\n                                        ></div> :\n                                        <img src={task.cover.background} className='task-img-cover ratio-square ' />}\n                                </div>}\n                            <div className={`task-preview-content \n                                    ${(task.cover.type === 'img' && task.cover.isFull) ?\n                                    (task.cover.theme === 'dark' ? 'content-wrapper dark' : 'content-wrapper light') : ''}`}>\n\n                                {task.labels && <LabelList labels={task.labels} />}\n                                <div className='task-preview-title' dir='auto'>{task.title}</div>\n                                <div className='badges'>\n                                    {task.dueDate &&\n                                        <div className={'badge ' + isDue}>\n                                            <RiTimeLine className=\"icon-sm\" />\n                                            <Moment className='badge-text' calendar={calendarStrings} date={task.dueDate} />\n                                        </div>\n                                    }\n                                    {task.description &&\n                                        <div className=\"badge\">\n                                            <GrTextAlignFull className=\"icon-md\" />\n                                        </div>\n                                    }\n                                    {task.checklists.length > 0 && checklistItemsAmount > 0 &&\n                                        <div className={'badge checklist-items-badge ' + (doneCount === checklistItemsAmount ? 'task-complete' : '')}>\n\n                                            <IoMdCheckboxOutline className=\"icon-sm\" />\n                                            <span className='badge-text'>{doneCount}/{checklistItemsAmount}</span>\n                                        </div>}\n\n                                </div>\n\n                            </div>\n                        </Container>\n                    </NavLink>\n\n                </div>\n\n            )}\n\n        </Draggable>\n    )\n}\nexport default TaskPreview\n","import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","// hook from https://usehooks.com/useOnClickOutside/\nimport { useEffect } from \"react\";\n\n// Hook\nfunction useOnClickOutside(ref, handler, exceptionalRef = null) {\n\n  useEffect(\n    () => {\n      const listener = event => {\n        if (!ref) return;\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          // console.log('Refsdasd')\n          return;\n        }\n        // Do nothing if  ANOTHER clicking ref's element or descendent elements \n        if (exceptionalRef !== null) {\n          if (!exceptionalRef.current || exceptionalRef.current.contains(event.target)) {\n            console.log('exceptionalRef', exceptionalRef)\n            return\n          }\n        }\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, exceptionalRef, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import React, { useState, useEffect, useRef } from 'react'\nimport useKeyPress from '../hooks/useKeypress'\nimport useOnClickOutside from '../hooks/useOnClickOutSide'\n\nconst TextEditor = (props) => {\n    const {\n        type,\n        text,\n        name,\n        onInputBlur,\n        isWide,\n        isFocused,\n        onChange,\n        onSubmit,\n        onEscape,\n        placeholder = null,\n    } = props\n    // const [textCopy, setText] = useState(text)\n    const [isEditing, setIsEditing] = useState(false)\n    const [initialText, setInitialText] = useState('')\n    const inputEl = useRef(null)\n\n    const enter = useKeyPress(\"Enter\");\n    const esc = useKeyPress(\"Escape\");\n\n\n    useEffect(() => {\n        if (isEditing) {\n            inputEl.current.focus()\n        }\n    }, [isEditing])\n\n\n\n    useEffect(() => {\n        if (isFocused) {\n            setIsEditing(true)\n        }\n        // Check whether or not to change the isEditing state from the parent component (for bluring the input)\n        if (isFocused === false) {\n\n            setIsEditing(false)\n        }\n    }, [isFocused, isEditing]);\n\n    useEffect(() => {\n        if (isEditing) {\n            setInitialText(text)\n        }\n    }, [isEditing]) // when input is focused save the initial text\n\n\n    useEffect(() => {\n        if (isEditing && !isWide) { // if input is focused and not textarea\n            // if Enter is pressed, save the text and case the editor\n            if (enter) {\n                if (onInputBlur) {\n                    onInputBlur()\n                } else {\n                    onSubmit()\n                }\n                setIsEditing(false);\n            }\n            // if Escape is pressed, revert the text and close the editor\n            if (esc) {\n                const customEv = {\n                    target: {\n                        name: name,\n                        value: initialText\n                    },\n                }\n                onChange(customEv)\n                setIsEditing(false);\n                if (onEscape) {\n                    onEscape()\n                }\n            }\n        }\n    }, [enter, esc]); // watch the Enter and Escape key presses\n\n    const ModuleText = React.createElement(\n        type,\n        {\n            className: `module-text  ${text ? '' : 'placeholder'}`,\n            dir: 'auto',\n            onClick: () => { setIsEditing(true) }\n        },\n        text ? text : placeholder\n    );\n\n\n    const updateText = () => {\n        if (onInputBlur) {\n            console.log('blur');\n            setIsEditing(false)\n            onInputBlur()\n        }\n    }\n    const test = (ev) => {\n        const reg = /^\\s+$/; // check for whitespace \n        const inputVal = ev.target.value;\n        if (reg.test(inputVal) || inputVal === '') {\n            return\n        } else {\n            onChange(ev)\n        }\n    }\n    const handleTextareaChange = (ev) => {\n        onChange(ev)\n    }\n    const focusInput = () => {\n        if (!isEditing) {\n            setIsEditing(true)\n            setTimeout(() => {\n                inputEl.current.focus();\n            }, 0)\n\n        }\n    }\n    return (\n        <div className=\"text-editor-wrapper\">\n            {\n                isEditing ?\n                    (!isWide ?\n                        <input dir=\"auto\" type=\"text\" ref={inputEl} autoFocus className=\"focusClass\" name={name} defaultValue={text} onChange={test} onBlur={updateText} /> :\n                        <textarea ref={inputEl} className=\"focusClass\" autoFocus rows=\"5\" name={name} defaultValue={text} onChange={handleTextareaChange} onBlur={updateText} placeholder={placeholder} />) :\n                    ModuleText\n            }\n\n        </div>\n    )\n}\n\nexport default TextEditor\n","import React from 'react'\nimport { RiCloseLine } from \"react-icons/ri\";\n\nconst ListMenu = ({ onCloseMenu, onRemoveList,onAddTask }) => {\n    return (\n        <div className=\"pop-up list-menu\">\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn\" onClick={() => onCloseMenu()}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <div onClick={onAddTask} >Add card</div>\n            <div>Change list color</div>\n            <div>Sort list by</div>\n            <div onClick={onRemoveList}>Delete list</div>\n        </div>\n    )\n}\n\nexport default ListMenu\n","import React, { useEffect, useState, useRef, memo } from 'react'\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nimport TaskPreview from './TaskPreview'\nimport TextEditor from '../TextEditor'\nimport ListMenu from './ListMenu';\nimport { boardService } from '../../services/board.service';\nimport useOnClickOutside from '../../hooks/useOnClickOutSide';\nimport { RiCloseLine, RiAddLine } from 'react-icons/ri';\nimport { useRouteMatch } from 'react-router-dom';\n\n\n\n\nconst TaskList = ({ provided, innerRef, taskList, taskListIdx, onListUpdated, onRemoveList }) => {\n\n    const [taskListCopy, setTaskListCopy] = useState({ ...taskList })\n    const [newTask, setNewTask] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    let { url } = useRouteMatch();\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        setTaskListCopy({ ...taskList })\n    }, [taskList])\n\n    const getEmptyTask = () => {\n        setIsMenuOpen(false)\n        const emptyTask = boardService.getEmptyTask()\n        setNewTask(emptyTask)\n        setIsEditing(true)\n    }\n\n    const handleListChange = (ev) => {\n        setTaskListCopy({ ...taskListCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const handleTaskChange = (ev) => {\n        setNewTask({ ...newTask, [ev.target.name]: ev.target.value })\n\n    }\n    const handleListRemove = () => {\n        onRemoveList(taskList.id)\n    }\n    const updateList = (updatedTaskList, newActivity) => {\n        if (updatedTaskList) {\n            onListUpdated(updatedTaskList, newActivity)\n        } else {\n            if (taskListCopy.title === taskList.title) return;\n            onListUpdated(taskListCopy)\n        }\n        setIsEditing(false)\n        setNewTask(null)\n    }\n\n    const addTask = async (clickSource = null) => {\n        if (newTask && newTask.title) {\n            const updatedTaskList = JSON.parse(JSON.stringify(taskListCopy));\n            updatedTaskList.tasks.push(newTask)\n            const newActivity = boardService.newActivity(\n                `Added this card to ${updatedTaskList.title}`,\n                `Added  <a href=\"#${url}/${newTask.id}\">${newTask.title}</a> to ${updatedTaskList.title}`,\n                newTask.id\n            )\n            await updateList(updatedTaskList, newActivity)\n            if (clickSource === 'clickedOutside') return; // if click is outside the ref wrapper end editing\n            setNewTask(null)\n            getEmptyTask()\n        }\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing && newTask && newTask.title) {\n            addTask('clickedOutside') // passing this string to add the current task and end the editing\n        } else {\n            stopEditing()\n        }\n    });\n    const stopEditing = () => {\n        setNewTask(null)\n        setIsEditing(false)\n    }\n\n\n\n    return (\n        taskListCopy &&\n        <div className=\"list-wrapper\"\n            ref={innerRef}\n            {...provided.draggableProps}\n        >\n            <div className=\"list\">\n                <div className=\"list-header\" {...provided.dragHandleProps}>\n                    {taskListCopy.title &&\n                        <TextEditor\n                            name=\"title\"\n                            type=\"h3\"\n                            text={taskListCopy.title}\n                            onChange={handleListChange}\n                            onInputBlur={updateList}\n                        />}\n                    <button className=\"list-menu-btn clear-btn\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n                        <BsThreeDots />\n                    </button>\n                    {isMenuOpen && !isEditing && <ListMenu onRemoveList={handleListRemove} onAddTask={getEmptyTask} onCloseMenu={() => setIsMenuOpen(false)} />}\n                </div>\n                <div className=\"overs\">\n                    <Droppable type=\"task\" droppableId={`${taskListIdx}`}>\n                        {provided => (\n\n\n                            <div className=\"list-content custom-scrollbar\" ref={provided.innerRef} >\n                                {taskList.tasks.map((task, index) => (\n                                    <TaskPreview key={task.id} task={task} index={index} />\n                                ))}\n                                {(isEditing && newTask) && <div className=\"add-task-wrapper \" ref={wrapperRef}>\n                                    <TextEditor\n                                        name=\"title\"\n                                        type=\"p\"\n                                        text={newTask.title}\n                                        onChange={handleTaskChange}\n                                        isFocused={isEditing}\n                                        onSubmit={addTask}\n                                        onEscape={stopEditing}\n                                    />\n\n                                    <div className=\"add-task-controls\">\n                                        <button onClick={addTask} className=\"submit-btn\">Add task</button>\n                                        <button onClick={stopEditing} className=\"clear-btn icon-lg\">\n                                            <RiCloseLine />\n                                        </button>\n                                    </div>\n\n                                </div>}\n                                {/* </div> */}\n                                {provided.placeholder}\n\n                            </div>\n                        )}\n                    </Droppable>\n                </div>\n\n                <div className=\"list-footer\">\n                    {(!isEditing && !newTask) &&\n                        <a className=\"clear-btn list-footer-btn\" onClick={getEmptyTask}  >\n                            <span className=\"icon-lg add-icon\"><RiAddLine /></span> <span>Add new task</span>\n                        </a >\n                    }\n                </div>\n            </div>\n        </div >\n\n    )\n}\n\nexport default TaskList;\n","import React, { useRef, useState } from 'react'\n\nimport { RiCloseLine } from \"react-icons/ri\";\nimport { GoPencil } from \"react-icons/go\";\n\nimport TextEditor from '../../TextEditor';\nimport { useEffect } from 'react';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\n\nconst LabelPicker = ({ task, labels, onCloseModal, onTaskUpdated, labelsUpdated, bounds, exceptionRef }) => {\n    const [selectedLabel, setSelectedLabel] = useState(null)\n    const [isEditing, setIsEditing] = useState(false)\n    const wrapperRef = useRef(null)\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const selectLabelToEdit = (label) => {\n        if (selectedLabel !== null && selectedLabel.id === label.id) {\n            setIsEditing(false)\n        } else {\n            setSelectedLabel({ ...label })\n            setIsEditing(true)\n        }\n    }\n\n    const handleChange = (ev) => {\n        setSelectedLabel({ ...selectedLabel, [ev.target.name]: ev.target.value })\n    }\n    const updateLabel = () => {\n        const labelsCopy = [...labels];\n        const labelIdx = labelsCopy.findIndex(label => label.id === selectedLabel.id)\n        labelsCopy.splice(labelIdx, 1, selectedLabel)\n        labelsUpdated([...labelsCopy], selectedLabel)\n        setIsEditing(false);\n        setSelectedLabel(null)\n    }\n\n    useEffect(() => {\n        if (!isEditing && selectedLabel) {\n            const taskCopy = JSON.parse(JSON.stringify(task));\n            const taskLabelIdx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            if (taskLabelIdx !== -1) {\n                taskCopy.labels.splice(taskLabelIdx, 1, selectedLabel)\n                onTaskUpdated(taskCopy)\n            }\n        }\n\n    }, [isEditing])\n\n\n    const toggleLabels = (selectedLabel) => {\n        let labelExist;\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        labelExist = taskCopy.labels.find(label => label.id === selectedLabel.id)\n        if (!labelExist) {\n            taskCopy.labels.push(selectedLabel)\n        } else {\n            const idx = taskCopy.labels.findIndex(label => label.id === selectedLabel.id)\n            taskCopy.labels.splice(idx, 1)\n        }\n        onTaskUpdated(taskCopy)\n    }\n\n    const labelToEdit = (label) => {\n        if (selectedLabel) {\n            // console.log(label.id === selectedLabel.id)\n            return label.id === selectedLabel.id\n        }\n    }\n    return (\n\n        <div className=\"pop-up labels\" ref={wrapperRef} style={bounds}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Labels</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <ul>\n                {labels.map(label => (\n                    <li className=\"label-container\" key={label.id}>\n                        <span\n                            className=\"card-label\"\n                            style={{ backgroundColor: label.color }}\n                            onClick={() => toggleLabels(label)}\n                        >\n                            {!labelToEdit(label) && <span className=\"label-title\">{label.title}</span>}\n                            {labelToEdit(label) && isEditing && <TextEditor\n                                type=\"p\"\n                                name=\"title\"\n                                isFocused={isEditing}\n                                text={label.title}\n                                onChange={handleChange}\n                                onInputBlur={updateLabel}\n                            />}\n                            <span className=\"label-selected\">\n                            </span>\n                        </span>\n                        <button className=\"clear-btn\" onClick={() => selectLabelToEdit(label)}>\n                            <GoPencil />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LabelPicker\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport moment from 'moment'\nimport { RiCloseLine } from 'react-icons/ri'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n\nimport { boardService } from '../../../services/board.service';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\nconst DatePicker = ({ task, onTaskUpdated, onCloseModal, bounds, exceptionRef }) => {\n    const [value, setDate] = useState(new Date());\n    let { url } = useRouteMatch();\n    const wrapperRef = useRef(null)\n\n    useEffect(() => {\n        if (task.dueDate) {\n            const date = new Date(task.dueDate)\n            setDate(date)\n        }\n    }, [])\n\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const createActivity = (timestamp, isRemoveActivity = null) => {\n        const dueDate = moment(new Date(timestamp)).format(\"MMM Do\");\n        if (task.dueDate) {\n            return boardService.newActivity(\n                `Changed the due date of this card to  ${dueDate}`,\n                `Changed <a href=\"#${url}\">${task.title}</a> to be due at ${dueDate}`,\n                task.id\n            )\n        } else if (isRemoveActivity) {\n            return boardService.newActivity(\n                `Removed the due date from this card`,\n                `Removed <a href=\"${url}\">${task.title}</a> due date`,\n                task.id\n            )\n        } else {\n            return boardService.newActivity(\n                `Set this card to be due at ${dueDate}`,\n                `Set <a href=\"${url}\">${task.title}</a> to be due at ${dueDate} `,\n                task.id\n            )\n        }\n    }\n\n\n\n    const submitDate = async () => {\n        const timestamp = value.getTime();\n        if (timestamp === task.dueDate) return;\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        taskCopy.dueDate = timestamp\n        const newActivity = createActivity(timestamp)\n        await onTaskUpdated(taskCopy, newActivity)\n        onCloseModal()\n    }\n\n\n    const onChangeDate = (date) => {\n        setDate(date)\n    }\n    return (\n        <div className=\"pop-up\" style={bounds} ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Date</span>\n                <button onClick={onCloseModal} className=\"pop-up-close-btn clear-btn icon-lg\">\n                    <RiCloseLine />\n                </button>\n            </div>\n            <Calendar\n                onChange={onChangeDate}\n                value={value}\n            />\n            <button onClick={submitDate} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default DatePicker\n","\n\n// Dispatching this action to determine wether or not to start editing in TaskChecklist cmp on initial render\nexport function toggleInitialAddition(isInitial) {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_INITIAL_ADDITION', isInitial });\n    }\n}","import React, { useEffect, useState } from 'react'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide'\nimport { useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { toggleInitialAddition } from '../../../../store/actions/generalAction';\nimport { useRouteMatch } from 'react-router-dom'\nconst ChecklistPicker = ({ task, onTaskUpdated, onCloseModal, bounds, sidebarRef }) => {\n    const [checklist, setChecklist] = useState({})\n    const wrapperRef = useRef(null)\n    const { url } = useRouteMatch();\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const emptyChecklist = boardService.getEmptyCheckList();\n        setChecklist({ ...emptyChecklist })\n    }, [])\n\n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, sidebarRef);\n\n    const handleChange = (ev) => {\n        setChecklist({ ...checklist, [ev.target.name]: ev.target.value })\n    }\n    const addChecklist = () => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n        const checklistCopy = { ...checklist }\n        taskCopy.checklists.push(checklistCopy)\n        const newActivity = boardService.newActivity(\n            `Added ${checklist.title}  on this card`,\n            `Added ${checklist.title} on <a href=\"#${url}\">${task.title}</a>`,\n            task.id\n        )\n        onTaskUpdated(taskCopy, newActivity)\n        dispatch(toggleInitialAddition(true)) // Dispatching this action to start editing on TaskChecklist cmp \n        onCloseModal()\n    }\n    return (\n        <div className=\"pop-up\" style={bounds} ref={wrapperRef}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Add checklist</span>\n                <button className=\"pop-up-close-btn clear-btn\">\n                </button>\n            </div>\n            <TextEditor\n                isFocused={true}\n                onChange={handleChange}\n                onSubmit={addChecklist}\n                type=\"p\"\n                name=\"title\"\n            />\n            <button onClick={addChecklist} className=\"submit-btn add-date-btn\">Save</button>\n        </div>\n    )\n}\n\nexport default ChecklistPicker\n","export default {\r\n    uploadImg\r\n}\r\n\r\nfunction uploadImg(ev) {\r\n    console.log('yes');\r\n    const CLOUD_NAME = \"dhz1jk4k6\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0])\r\n    formData.append('upload_preset', 'jtim2mm3');\r\n\r\n    return fetch(UPLOAD_URL, {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n        .catch(err => console.error(err))\r\n}\r\n\r\n","import React, { useRef } from 'react'\nimport { RiCloseLine } from 'react-icons/ri'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport Color, { Palette } from \"color-thief-react\";\n\nimport cloudinaryService from '../../../services/cloudinary.service';\nimport { utilService } from '../../../services/util.service';\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide';\n\n\nconst HalfBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        { backgroundImage: \"url(\" + props.cover.background + \")\", backgroundSize: 'cover' }}\n`;\n\n\nconst FullBgcWrapper = styled.div`\n${props => props.cover.type === 'color' ?\n        { backgroundColor: props.cover.background } :\n        {\n            backgroundImage: props.cover.theme === 'light' ?\n                'linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(' + props.cover.background + ')'\n                : 'linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(' + props.cover.background + ')', backgroundSize: 'cover', backgroundPosition: '50%'\n        }\n\n    }\n`;\n\nconst CoverPicker = ({ task, onCloseModal, onTaskUpdated, bounds, exceptionRef }) => {\n    const [selectedCover, setSelectedCover] = useState(task.cover)\n    const [loading, setLoading] = useState(false);\n\n    const wrapperRef = useRef(null)\n    \n    useOnClickOutside(wrapperRef, () => {\n        onCloseModal()\n    }, exceptionRef);\n\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const handleSelected = (cover) => {\n        const taskCopy = { ...task }\n        if (cover.id) {\n            setSelectedCover({ ...selectedCover, background: cover.url, type: 'img' })\n            taskCopy.cover.type = 'img'\n            taskCopy.cover.background = cover.url\n        } else {\n            setSelectedCover({ ...selectedCover, background: cover, type: 'color' })\n            taskCopy.cover.type = 'color'\n            taskCopy.cover.background = cover\n        }\n        onTaskUpdated(taskCopy)\n    }\n    const handleLayout = (isFull) => {\n        if (!task.cover.background) return;\n        setSelectedCover({ ...selectedCover, isFull: isFull })\n        const taskCopy = { ...task }\n        taskCopy.cover.isFull = isFull\n        onTaskUpdated(taskCopy)\n    }\n    const handleThemeChange = (theme) => {\n        if (theme === selectedCover.theme) return;\n        setSelectedCover({ ...selectedCover, theme: theme })\n        const taskCopy = { ...task }\n        taskCopy.cover.theme = theme\n        onTaskUpdated(taskCopy)\n    }\n    const handleUpload = async (ev) => {\n        console.log('yes mame');\n        setLoading(true);\n        const res = await cloudinaryService.uploadImg(ev);\n        const { url } = res;\n        setSelectedCover({ ...selectedCover, background: url, type: 'img' })\n        const taskCopy = { ...task }\n        const img = { id: utilService.makeId(), url: url, isCover: true }\n        taskCopy.images.push(img)\n        taskCopy.cover.background = url\n        taskCopy.cover.type = 'img'\n        onTaskUpdated(taskCopy)\n        setLoading(false);\n    }\n    const handleRemove = () => {\n        setSelectedCover({ ...selectedCover, background: null, type: null, isFull: null, theme: null })\n        const taskCopy = { ...task }\n        taskCopy.cover = { ...taskCopy.cover, background: null, type: null, isFull: null, theme: null }\n        // console.log('task', taskCopy);\n        onTaskUpdated(taskCopy)\n        onCloseModal()\n    }\n    return (\n\n        <div className={`pop-up cover-picker ${bounds ? '' : 'absolute'}`} ref={wrapperRef} style={bounds}>\n            <div className=\"pop-up-header\">\n                <span className=\"pop-up-title\">Cover</span>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={onCloseModal}>\n                    <RiCloseLine />\n                </button>\n            </div>\n            <span className=\"pop-up-title\">Size</span>\n            <div className=\"cover-size-picker\">\n                <FullBgcWrapper\n                    cover={selectedCover}\n                    className={'cover-size ' + (task.cover.background ? (selectedCover.isFull ? 'selected' : '') : 'disabled')}\n                    onClick={() => handleLayout(true)}\n                >\n                    <div className={`line-wrapper ${task.cover.type === 'img' ? (task.cover.theme === 'dark' ? 'dark' : '') : ''}`}>\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </FullBgcWrapper>\n                <div\n                    className={'cover-size half ' + (task.cover.background ? (selectedCover.isFull ? '' : 'selected') : 'disabled')}\n                    onClick={() => handleLayout(false)}>\n                    <HalfBgcWrapper className=\"half\" cover={selectedCover}></HalfBgcWrapper>\n                    <div className=\"line-wrapper\">\n                        <div className=\"line line1\"></div>\n                        <div className=\"line line2\"></div>\n                        <div className=\"line line3\"></div>\n                    </div>\n                </div>\n            </div>\n            {task.cover.background && <button className=\"modal-btn\" onClick={handleRemove}>Remove Cover</button>}\n            {(selectedCover.type === 'img' && selectedCover.isFull) &&\n                <div className=\"cover-txt-color\">\n                    <span className=\"pop-up-title\">Text color</span>\n                    <div className=\"flex justify-center\">\n                        <div\n                            onClick={() => handleThemeChange('light')}\n                            className=\"cover-txt light\"\n                            style={{ backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{task.title}</h3>\n                        </div>\n                        <div\n                            onClick={() => handleThemeChange('dark')}\n                            className=\"cover-txt dark\"\n                            style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(${selectedCover.background})` }}>\n                            <h3>{task.title}</h3>\n                        </div>\n                    </div>\n                </div>}\n\n            <span className=\"pop-up-title\">Colors</span>\n            <div className=\"cover-palette\">\n                {coverColors.map((color, idx) => (\n                    <span\n                        className={'cover-color ' + (color === selectedCover.background ? 'selected' : '')}\n                        style={{ backgroundColor: color }}\n                        key={idx}\n                        onClick={() => handleSelected(color)}\n                    ></span>\n                ))}\n            </div>\n            {task.images.length > 0 && <span className=\"pop-up-title\">Images</span>}\n            {task.images.length > 0 &&\n                <div className=\"cover-img-wrapper\">\n                    {task.images.map(img => (\n                        <span\n                            // check id in case the same img has been uploaded\n                            className={'cover-img-preview ' + ((img.url + img.id) === (selectedCover.background + img.id) ? 'selected' : '')}\n                            style={{ backgroundImage: `url(${img.url})` }}\n                            onClick={() => handleSelected(img)}\n                            key={img.id}></span>\n                    ))}\n                </div>}\n            <div className=\"upload-img-container flex space-between align-center\">\n                <p>Upload image:</p>\n                <input onChange={handleUpload} id=\"file\" type=\"file\" title=\"Upload Image\" />\n                <label className=\"btn-3\" htmlFor=\"file\">\n                    {!loading ? <span>Upload</span> : <ScaleLoader height={9} width={5} color={\"#2c3e50\"} loading={loading} />}\n                </label>\n            </div>\n            <hr className=\"divider\" />\n        </div>\n    )\n}\n\nexport default CoverPicker\n","import React, { useRef } from 'react'\nimport { useState } from 'react'\nimport LabelPicker from './LabelPicker'\nimport DatePicker from './DatePicker'\nimport ChecklistPicker from './checklist-cmps/ChecklistPicker'\nimport useOnClickOutside from '../../../hooks/useOnClickOutSide'\nimport CoverPicker from './CoverPicker'\nimport { useEffect } from 'react'\nimport { BsLockFill } from 'react-icons/bs'\nimport { useCallback } from 'react'\n\nconst TaskActions = ({ task, labels, onUpdateTask, onLabelsUpdated, onAddActivity }) => {\n    const sidebarRef = useRef(null)\n    const [currAction, setCurrAction] = useState(null)\n\n    // useOnClickOutside(wrapperRef, () => {\n    //     console.log('yes');\n\n    //     if (currAction) {\n    //         closeModal()\n    //     }\n    // });\n\n    const [bounds, setBounds] = useState(null)\n    const ref = useRef(null)\n\n    const toggle = (ev, isActive) => {\n        ref.current = ev.target.id\n        const { top, left, height } = ev.target.getBoundingClientRect();\n        const res = window.innerWidth - left - 304\n\n        if (res < 50 && window.innerWidth > 770) {\n            setBounds({ top: top + height, left: left - 100 })\n        } else {\n            setBounds({ top: top + height, left: left - 50 })\n        }\n        if (isActive === currAction) {\n            setCurrAction(null)\n            setBounds(null)\n            ref.current = null\n        } else {\n            setCurrAction(isActive)\n        }\n    }\n    // console.log('taskactions')\n    const updateWidthAndHeight = useCallback(() => {\n        if (ref.current) {\n            const activeEl = document.getElementById(ref.current)\n            const { top, left, height } = activeEl.getBoundingClientRect();\n            const res = window.innerWidth - left - 304\n            if (res < 50) {\n                setBounds({ top: top + height, right: 0 })\n            }\n            else {\n                setBounds({ top: top + height, left: left })\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        if (currAction) {\n            window.addEventListener(\"resize\", updateWidthAndHeight);\n        } else {\n            window.removeEventListener(\"resize\", updateWidthAndHeight)\n        }\n    }, [currAction])\n\n\n\n    const closeModal = () => {\n        setCurrAction(null)\n        ref.current = null\n    }\n\n    return (\n        <div className=\"modal-sidebar\" ref={sidebarRef}>\n            <h3>Add to card</h3>\n            <button id=\"sidebar-labels\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isLabelActive')}>Labels</button>\n            {currAction === 'isLabelActive' &&\n                <LabelPicker\n                    bounds={bounds}\n                    task={task}\n                    labels={labels}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask}\n                    labelsUpdated={onLabelsUpdated}\n                    exceptionRef={sidebarRef}\n                />}\n            <button className=\"modal-btn\" >Members</button>\n            <button id=\"sidebar-checklist\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isChecklistActive')}>Checklist</button>\n            {currAction === 'isChecklistActive' &&\n                <ChecklistPicker\n                    task={task}\n                    bounds={bounds}\n                    onTaskUpdated={onUpdateTask}\n                    onCloseModal={closeModal}\n                    exceptionRef={sidebarRef}\n                />}\n            <button id=\"sidebar-date\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isDueDateActive')}>Due date</button>\n            {currAction === 'isDueDateActive' &&\n                <DatePicker\n                    bounds={bounds}\n                    task={task}\n                    onTaskUpdated={onUpdateTask}\n                    onAddActivity={onAddActivity}\n                    onCloseModal={closeModal}\n                    exceptionRef={sidebarRef}\n                />}\n            {/* Show the cover button only when cover is not set (displayed in header otherwise) */}\n            {!task.cover.background && <button id=\"sidebar-cover\" className=\"modal-btn\" onClick={(ev) => toggle(ev, 'isCoverActive')}>Cover</button>}\n            {currAction === 'isCoverActive' &&\n                <CoverPicker\n                    bounds={bounds}\n                    exceptionRef={sidebarRef}\n                    task={task}\n                    onCloseModal={closeModal}\n                    onTaskUpdated={onUpdateTask}\n                     />}\n        </div>\n    )\n}\n\nexport default TaskActions\n","import React, { useState, useEffect, memo } from 'react'\nimport TextEditor from '../../../TextEditor';\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport { useRef } from 'react';\nimport { BsTrash } from \"react-icons/bs\";\nimport { RiCloseLine } from 'react-icons/ri';\nimport { useRouteMatch } from 'react-router-dom';\n\nconst isEqual = require(\"react-fast-compare\");\n\nfunction compareProps(prev, next) {\n    // console.log(isEqual(prev.item, next.item))\n    return isEqual(prev.item, next.item)\n}\n\nconst ChecklistItem = ({ item, onSubmit, onRemoveItem }) => {\n    const [itemCopy, setItem] = useState({ ...item });\n    const [isEditing, setIsEditing] = useState(false);\n    const [displayMsg, setDisplayMsg] = useState(false);\n    const [unSavedTitle, setUnsavedTitle] = useState('');\n    const editorRef = useRef(null)\n    const initialRender = useRef(true)\n    const { url } = useRouteMatch();\n\n    useOnClickOutside(editorRef, () => {\n        if (isEditing) {\n            if (item.title !== itemCopy.title) {\n                setUnsavedTitle(itemCopy.title)\n                setItem(prevState => ({\n                    ...prevState,\n                    title: item.title,\n                }));\n                setDisplayMsg(true)\n            }\n            setIsEditing(false)\n            // setNewItem(null)\n        }\n    });\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            // const newActivity = boardService.newActivity(\n            //     `${itemCopy.isDone ? `Completed  ${item.title} on this card` : `Marked ${item.title} incomplete on this card`}`,\n            //     `${itemCopy.isDone ? `Completed  ${item.title} on <a href=\"#${url}\">${task.title}</a>` : `Marked ${item.title} incomplete on <a href=\"#${url}\">${task.title}</a>`}`,\n            //     task.id\n            // )\n            updateItem()\n        } else {\n            initialRender.current = false\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [itemCopy.isDone])\n\n    const handleChange = (ev) => {\n        const target = ev.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name; setItem({ ...itemCopy, [name]: value });\n    }\n    const handleClose = () => {\n        // when escape is pressed on 'TextEditor.jsx'\n        setIsEditing(false)\n    }\n\n    const updateItem = (activity) => {\n        if (!itemCopy.title) {\n            setIsEditing(true)\n            return;\n        }\n        setIsEditing(false)\n        setDisplayMsg(false)\n        onSubmit({ ...itemCopy }, activity)\n    }\n\n    const handleRemove = () => {\n        onRemoveItem(itemCopy.id)\n    }\n    const startEditing = () => {\n        setItem(prevState => ({\n            ...prevState,\n            title: unSavedTitle,\n        }));\n        setIsEditing(true)\n    }\n\n    const discardUnsaved = () => {\n        setDisplayMsg(false)\n    }\n    // console.log('item', item.title)\n\n    return (\n        <div className=\"checklist-item\" >\n            <div className={'checklist-item-editor  ' + (item.isDone ? 'done' : '')}>\n                {itemCopy && !isEditing &&\n                    // <label for=\"checkbox-1\">\n                    <input type=\"checkbox\" name=\"isDone\" checked={itemCopy.isDone} onChange={handleChange} />\n                    // </label>\n                }\n                <div className=\"item-title\" onClick={() => setIsEditing(true)} ref={editorRef}>\n                    <TextEditor\n                        text={item.title}\n                        onChange={handleChange}\n                        onSubmit={updateItem}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n                    {isEditing &&\n                        <div className=\"add-item-controls\">\n                            <button className=\"submit-btn\">Save</button>\n                            <button className=\"clear-btn icon-lg\" onClick={handleClose}>\n                                <RiCloseLine />\n                            </button>\n                            <div className=\"spacer\" onClick={handleClose}></div>\n                        </div>}\n                </div>\n                {!isEditing &&\n                    <button className=\"remove-item-btn clear-btn\" onClick={handleRemove}>\n                        <BsTrash />\n                    </button>}\n            </div>\n            {displayMsg && !isEditing &&\n                <p className=\"checklist-user-msg\">\n                    <span>You have unsaved edits on this field.</span>\n                    <button className=\"clear-btn\" onClick={startEditing}>View edits</button>\n                    <button className=\"clear-btn\" onClick={discardUnsaved}>Discard</button>\n                </p>}\n\n        </div>\n    )\n}\n\nexport default memo(ChecklistItem, compareProps)\n// export default ChecklistItem\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextEditor from '../../../TextEditor'\nimport { boardService } from '../../../../services/board.service'\nimport useOnClickOutside from '../../../../hooks/useOnClickOutSide';\nimport ChecklistItem from './ChecklistItem';\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\nimport { toggleInitialAddition } from '../../../../store/actions/generalAction';\nimport { RiCloseLine } from 'react-icons/ri';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useMemo } from 'react';\n\n\nconst TaskChecklist = ({ task, checklist, onUpdateTask }) => {\n    const [newItem, setNewItem] = useState(null);\n    const [checklistTitle, setChecklistTitle] = useState(checklist.title);\n    const [progress, setProgress] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const wrapperRef = useRef(null)\n    const { url } = useRouteMatch();\n    const dispatch = useDispatch()\n    const isInitialAddition = useSelector(state => state.general.isInitialAddition)\n\n    useEffect(() => {\n        // Checking wether or not to start editing in TaskChecklist cmp on initial render\n        if (isInitialAddition) {\n            addItem()\n        }\n    }, [])\n\n    useMemo(() => {\n        const doneCount = checklist.listItems.reduce((acc, item) => {\n            if (item.isDone) acc++\n            return acc\n        }, 0)\n        let donePrecent = Math.round((doneCount * 100) / checklist.listItems.length)\n        setProgress(donePrecent)\n    }, [checklist])\n\n    const addItem = () => {\n        const emptyItem = boardService.getEmptyListItem();\n        setNewItem(emptyItem)\n        setIsEditing(true);\n        if (isInitialAddition) {\n            dispatch(toggleInitialAddition(false))\n        }\n    }\n\n    const handleClose = () => {\n        setIsEditing(false);\n        setNewItem(null);\n    }\n\n    const handleChange = (ev) => {\n        setNewItem({ ...newItem, [ev.target.name]: ev.target.value });\n    }\n    const handleChecklistChange = (ev) => {\n        setChecklistTitle(ev.target.value);\n    }\n\n    const updateChecklistTitle = () => {\n        const checklistCopy = { ...checklist };\n        checklistCopy.title = checklistTitle\n        const newActivity = boardService.newActivity(\n            `Renamed ${checklistCopy.title} from (${checklist.title})`,\n            `Renamed ${checklistCopy.title} from (${checklist.title}) on <a href=\"#${url}\">${task.title}</a>`,\n            task.id\n        )\n        updateTask(checklistCopy, newActivity);\n    }\n\n\n    useOnClickOutside(wrapperRef, () => {\n        if (isEditing) {\n            setIsEditing(false)\n            setNewItem(null)\n        }\n    });\n\n    const removeItem = (itemId) => {\n        const checklistCopy = { ...checklist };\n        const idx = checklistCopy.listItems.findIndex(item => item.id === itemId)\n        if (idx !== -1) {\n            checklistCopy.listItems.splice(idx, 1)\n        }\n        updateTask(checklistCopy)\n    }\n\n    const updateChecklist = async (item, activity) => {\n        const checklistCopy = { ...checklist };\n        if (item) {\n            const idx = checklistCopy.listItems.findIndex(currItem => currItem.id === item.id)\n            if (idx !== -1) {\n                checklistCopy.listItems.splice(idx, 1, item) // update an item \n                await updateTask(checklistCopy, activity);\n            }\n        } else { // Add  item\n            if (!newItem.title) {\n                handleClose()\n                return;\n            }\n            checklistCopy.listItems.push(newItem)\n            await updateTask(checklistCopy);\n            addItem()\n        }\n    }\n\n    const updateTask = (updatedChecklist, activity) => {\n        const taskCopy = JSON.parse(JSON.stringify(task));\n\n        if (updatedChecklist) {\n            const idx = taskCopy.checklists.findIndex(currChecklist => currChecklist.id === updatedChecklist.id)\n            taskCopy.checklists.splice(idx, 1, updatedChecklist)\n        } else {\n            taskCopy.checklists = taskCopy.checklists.filter(currChecklist => currChecklist.id !== checklist.id) // Delete checklist\n            activity = boardService.newActivity(\n                `Removed ${checklist.title}  on this card`,\n                `Removed ${checklist.title} on <a href=\"#${url}\">${task.title}</a>`,\n                task.id\n            )\n        }\n        onUpdateTask(taskCopy, activity)\n        setIsEditing(false);\n        setNewItem(null);\n    }\n    // console.log('yes darling', checklist.title)\n    return (\n        <div className=\"task-checklist\">\n            <div className=\"section-title flex align-center\">\n                <TextEditor\n                    text={checklistTitle}\n                    onChange={handleChecklistChange}\n                    onInputBlur={updateChecklistTitle}\n                    type=\"h3\"\n                />\n                <button className=\"modal-btn\" onClick={() => updateTask()}>Delete</button>\n            </div>\n\n            {checklist.listItems.length > 0 &&\n                <Progress\n                    percent={progress}\n                />}\n            {checklist && checklist.listItems.map(item => (\n                <ChecklistItem\n                    key={item.id}\n                    onSubmit={updateChecklist}\n                    onRemoveItem={removeItem}\n                    item={item}\n                    task={task}\n                />\n            ))\n            }\n            {newItem && isEditing &&\n                <div className=\"add-item\" ref={wrapperRef}>\n                    <TextEditor\n                        onChange={handleChange}\n                        onSubmit={updateChecklist}\n                        onEscape={handleClose}\n                        isFocused={isEditing}\n                        type=\"p\"\n                        name=\"title\"\n                    />\n\n                    <div className=\"add-item-controls\" >\n                        <button className=\"submit-btn\" onClick={() => updateChecklist()}>Save</button>\n                        <button className=\"clear-btn icon-lg\" onClick={handleClose}>\n                            <RiCloseLine />\n                        </button>\n                        <div className=\"spacer\" onClick={handleClose}></div>\n                    </div>\n                </div>\n\n            }\n            {!isEditing && <button className=\"modal-btn\" onClick={addItem} >Add an item</button>}\n        </div>\n    )\n}\n\nexport default TaskChecklist\n","import React, { useState, useEffect, useRef, useMemo, memo } from 'react'\nimport { useParams, useHistory, useRouteMatch } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'\nimport { loadTask, saveBoard, updateTask } from '../store/actions/boardActions';\nimport Color from 'color-thief-react';\nimport { boardService } from '../services/board.service';\nimport Moment from 'react-moment';\n\nimport TextEditor from '../components/TextEditor';\nimport TaskActions from '../components/task-cmps/task-actions/TaskActions';\nimport TaskChecklist from '../components/task-cmps/task-actions/checklist-cmps/TaskChecklist';\nimport LabelList from '../components/task-cmps/task-actions/LabelList';\nimport ActivityLog from '../components/ActivityLog';\nimport useOnClickOutside from '../hooks/useOnClickOutSide';\nimport { RiArrowDownSLine, RiCloseLine } from 'react-icons/ri';\n\nimport CoverPicker from '../components/task-cmps/task-actions/CoverPicker';\nimport LabelPicker from '../components/task-cmps/task-actions/LabelPicker';\nimport DatePicker from '../components/task-cmps/task-actions/DatePicker';\nimport { useCallback } from 'react';\n\n\nconst calendarStrings = {\n    lastDay: '[Yesterday]',\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    sameElse: 'MMMM D'\n};\n\n\nconst TaskDetails = () => {\n    const dispatch = useDispatch()\n    const currTask = useSelector(state => state.board.currTask)\n    const board = useSelector(state => state.board.currBoard)\n\n    const [activeAction, setActiveAction] = useState(null)\n    const [taskCopy, setTask] = useState(null)\n\n    const wrapperRef = useRef(null)\n    const modalHeaderRef = useRef(null)\n    const exceptionRef = useRef(null)\n\n    const { taskId } = useParams();\n    const history = useHistory();\n    const { url } = useRouteMatch();\n\n    useEffect(() => {\n        const load = async () => {\n            const res = await dispatch(loadTask(taskId))\n            if (!res) {\n                history.push(`/board/${board._id}`)\n            }\n        }\n        load()\n    }, [])\n\n    useEffect(() => {\n\n        document.body.style.overflowX = 'hidden'\n        return () => {\n            // document.body.style.overflowX = 'unset'\n            document.body.style.overflowX = 'unset'\n\n        }\n    }, [])\n\n\n    useEffect(() => {\n        const setTaskCopy = () => {\n            if (currTask) {\n                setTask({ ...currTask })\n            }\n        }\n        setTaskCopy()\n    }, [currTask])\n\n    const closeModal = () => {\n        history.push(`/board/${board._id}`)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        closeModal()\n    });\n\n    useOnClickOutside(modalHeaderRef, () => {\n        setActiveAction(null)\n    });\n\n    const handleChange = (ev) => {\n        setTask({ ...taskCopy, [ev.target.name]: ev.target.value })\n    }\n\n    const onUpdateTask = (task, activity = null) => {\n        task ? updateBoard({ ...task }, activity) : updateBoard({ ...taskCopy })\n    }\n\n    // const updateBoard = (task, activity) => {\n    //     dispatch(updateTask(task))\n    //     const boardCopy = JSON.parse(JSON.stringify(board))\n    //     if (activity) {\n    //         boardCopy.activities.unshift(activity)\n    //         // boardCopy.activities = []\n    //     }\n    //     boardCopy.taskLists.forEach(taskList => {\n    //         let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //         if (idx !== -1) {\n    //             taskList.tasks.splice(idx, 1, task)\n    //         }\n    //     })\n    //     saveBoard(boardCopy)\n    // }\n\n\n    const updateBoard = useCallback((task, activity) => {\n        dispatch(updateTask(task))\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        if (activity) {\n            boardCopy.activities.unshift(activity)\n            // boardCopy.activities = []\n        }\n        boardCopy.taskLists.forEach(taskList => {\n            let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n            if (idx !== -1) {\n                taskList.tasks.splice(idx, 1, task)\n            }\n        })\n        dispatch(saveBoard(boardCopy))\n    }, [dispatch]);\n\n\n    const updateBoardLabels = (updatedLabels, editedLabel) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.labels = updatedLabels\n        boardCopy.taskLists.forEach(taskList => {\n            taskList.tasks.forEach(task => {\n                let currLabel = task.labels.find(label => label.id === editedLabel.id)\n                if (currLabel) {\n                    currLabel.title = editedLabel.title\n                }\n            })\n        })\n        dispatch(saveBoard(boardCopy))\n    }\n\n    const addActivity = async (activity) => {\n        const boardCopy = JSON.parse(JSON.stringify(board))\n        boardCopy.activities.unshift(activity)\n        await dispatch(saveBoard(boardCopy))\n    }\n\n    const handleIsDone = (ev) => {\n        ev.stopPropagation()\n        ev.preventDefault()\n        const { checked } = ev.target\n        const updatedTask = { ...taskCopy }\n        updatedTask.isDone = checked\n        const newActivity = boardService.newActivity(\n            `Marked the due date ${updatedTask.isDone ? 'complete' : 'incomplete'}`,\n            `Marked the due date ${updatedTask.isDone ? 'complete' : 'incomplete'} on <a href='#${url}'>${updatedTask.title}</a>`,\n            updatedTask.id\n        )\n        updateBoard(updatedTask, newActivity)\n    }\n\n    const handleActiveAction = (ev, action) => {\n        const { target } = ev\n        exceptionRef.current = target\n        if (action === activeAction) {\n            setActiveAction(null)\n            return\n        } else {\n            setActiveAction(action)\n        }\n    }\n\n\n    const isDue = useMemo(() => {\n        if (currTask) {\n            let date = new Date()\n            date.setHours(0, 0, 0, 0)\n            date.setDate(date.getDate() + 1)\n            if (currTask.isDone) {\n                return { class: 'task-complete', txt: 'Complete' }\n            }\n            if (date.getTime() === currTask.dueDate) {\n                return { class: 'due-soon', txt: 'Due soon' }\n            } if (currTask.dueDate <= Date.now()) {\n                return { class: 'over-due', txt: 'Over due' }\n            } else return ''\n\n        }\n    }, [currTask]);\n    \n\n    return (\n        <div className='task-details'>\n            <div className={'cover'} ></div>\n            {currTask &&\n                <div className='task-modal' ref={wrapperRef}>\n                    {currTask.cover.background &&\n                        <Color src={currTask.cover.background} crossOrigin='anonymous' format='hex'>\n                            {({ data }) => {\n                                return (\n                                    <div\n                                        className='modal-header '\n                                        style={{ backgroundImage: `url(${currTask.cover.background})`, backgroundColor: data ? data : currTask.cover.background }}\n                                    >\n                                        {currTask.cover.background &&\n                                            <button className='modal-btn' onClick={(ev) => handleActiveAction(ev, 'coverPicker')}>\n                                                Cover</button>}\n\n                                        {activeAction === 'coverPicker' &&\n                                            <CoverPicker // outside TaskActions\n                                                task={currTask}\n                                                onTaskUpdated={onUpdateTask}\n                                                onCloseModal={() => handleActiveAction('coverPicker')}\n                                                wrapperRef={modalHeaderRef}\n                                                exceptionRef={exceptionRef}\n                                            />}\n                                    </div>\n                                )\n                            }}\n                        </Color>\n                    }\n                    <a onClick={closeModal} className='modal-close-btn icon-lg' >\n                        <RiCloseLine />\n                    </a>\n                    <div className='modal-module'>\n                        <div className='task-title'>\n                            <TextEditor type='h3' name='title' text={currTask.title} onChange={handleChange} onInputBlur={onUpdateTask} />\n                        </div>\n                    </div>\n                    <div className='task-content'>\n                        <div className='left-side'>\n                            <div className='modal-module'>\n                                <div className='task-labels-date'>\n                                    {currTask.labels.length > 0 &&\n                                        <div className=\"task-labels\">\n                                            <h3 className='task-item-title'>Labels</h3>\n                                            <div className='task-labels-list' >\n                                                <LabelList\n                                                    expandMode={true}\n                                                    onLabelClicked={(ev) => handleActiveAction(ev, 'labelPicker')}\n                                                    labels={currTask.labels} />\n                                            </div>\n                                            {activeAction === 'labelPicker' &&\n                                                <LabelPicker // outside TaskActions\n                                                    task={currTask}\n                                                    onTaskUpdated={onUpdateTask}\n                                                    labelsUpdated={updateBoardLabels}\n                                                    onCloseModal={() => handleActiveAction('labelPicker')}\n                                                    labels={board.labels}\n                                                    exceptionRef={exceptionRef}\n                                                />}\n                                        </div>}\n                                    {currTask.dueDate &&\n                                        <div className='task-due-date'>\n                                            <h3 className='task-item-title'>Due date</h3>\n                                            <div className='modal-btn' onClick={(ev) => handleActiveAction(ev, 'datePicker')}>\n                                                <label>\n                                                    <input className='css-checkbox' type='checkbox' name='isDone' checked={currTask.isDone} onChange={handleIsDone} />\n                                                    <i></i>\n                                                </label>\n                                                <Moment calendar={calendarStrings} date={currTask.dueDate} />\n                                                <span className={'task-badge ' + (isDue ? isDue.class : '')}>{isDue.txt}</span>\n                                                <RiArrowDownSLine className=\"icon-lg\" />\n\n                                            </div>\n\n                                            {activeAction === 'datePicker' &&\n                                                <DatePicker\n                                                    task={currTask}\n                                                    onTaskUpdated={onUpdateTask}\n                                                    exceptionRef={exceptionRef}\n                                                    onCloseModal={() => handleActiveAction('datePicker')}\n                                                />}\n                                        </div>}\n                                </div>\n                            </div>\n                            <div className='modal-module'>\n                                <div className='task-description'>\n                                    <h3 className='section-title'>Description</h3>\n                                    <TextEditor type='p' name='description' text={currTask.description} onChange={handleChange} onInputBlur={onUpdateTask} isWide={true} placeholder='Add a more detailed description…' />\n                                </div>\n                            </div>\n                            {currTask.checklists.length > 0 && <div className='modal-module'>\n                                {currTask.checklists.map(checklist => (\n                                    <TaskChecklist\n                                        checklist={checklist}\n                                        key={checklist.id}\n                                        task={currTask}\n                                        onUpdateTask={onUpdateTask}\n                                    />\n\n                                ))}\n                            </div>}\n                            <div className='modal-module'>\n                                <h3 className='section-title'>Activity</h3>\n                                {/* <ActivityLog taskId={taskCopy.id} /> */}\n                            </div>\n                        </div>\n                        <div className='right-side'>\n                            {board && <TaskActions\n                                task={currTask}\n                                labels={board.labels}\n                                onUpdateTask={onUpdateTask}\n                                onLabelsUpdated={updateBoardLabels}\n                                onAddActivity={addActivity}\n                            />}\n                        </div>\n                    </div>\n                </div>\n            }\n        </div >\n        // </section>\n    )\n}\n\nexport default TaskDetails\n","import React, { useState, useRef } from 'react'\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\n\nimport { boardService } from '../../services/board.service'\n\nimport { RiCloseLine } from 'react-icons/ri'\nimport TextEditor from '../TextEditor'\n\n\nconst AddTaskList = ({ board, onBoardUpdated }) => {\n    const [newTaskList, setTaskList] = useState(null)\n    const wrapperRef = useRef(null)\n\n    const getEmptyTaskList = () => {\n        const emptyTaskList = boardService.getEmptyList()\n        setTaskList(emptyTaskList)\n    }\n    const handleChange = (ev) => {\n        setTaskList({ ...newTaskList, [ev.target.name]: ev.target.value })\n    }\n\n    const addTaskList = () => {\n        if (!newTaskList.title) return\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.taskLists.push(newTaskList);\n        onBoardUpdated(boardCopy)\n        setTaskList(null)\n    }\n\n    useOnClickOutside(wrapperRef, () => {\n        setTaskList(null)\n    });\n\n    return (\n        <div className=\"list-wrapper \">\n            {newTaskList ?\n                <div className=\"list add-list\" ref={wrapperRef}>\n                    <TextEditor\n                        isFocused={true}\n                        onChange={handleChange}\n                        onSubmit={addTaskList}\n                        name=\"title\"\n                        type=\"p\"\n                    />\n                    <div className=\"add-list-controls\">\n                        <button className=\"submit-btn\" onClick={addTaskList}>Add List</button>\n                        <button onClick={() => setTaskList(null)} className=\"clear-btn icon-lg\">\n                            <RiCloseLine />\n                        </button>\n                    </div>\n                </div>\n                :\n                <button className=\"modal-btn\" onClick={getEmptyTaskList}>Add another list </button>\n            }\n        </div>\n    )\n}\n\nexport default AddTaskList\n","import React, { useCallback, useEffect, useMemo } from 'react'\nimport { useState } from 'react'\nimport { RiArrowLeftSLine } from 'react-icons/ri'\nimport RiseLoader from \"react-spinners/RiseLoader\";\nimport { css } from \"@emotion/core\";\nconst override = css`\n  position: fixed;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n`;\n\nconst BoardBgPicker = ({ onGoBack, board, onBoardUpdated }) => {\n    const coverColors = [\n        '#61bd4f',\n        '#f2d600',\n        '#ff9f1a',\n        '#c377e0',\n        '#eb5a46',\n        '#055a8c',\n        '#705cc1',\n        '#00c2e0',\n        '#ff78cb',\n    ]\n    const imgs = [\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389449/Taskflow%20backgrounds/cacjncpn6qp4qivznyaj.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389449/Taskflow%20backgrounds/jukyghlsvncbyovcqvce.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389422/Taskflow%20backgrounds/2.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389420/Taskflow%20backgrounds/itjhqv6u26jigvxmzwsi.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389420/Taskflow%20backgrounds/sltgv2lrkmcbivdxxmb3.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389410/Taskflow%20backgrounds/yeozivyoaywjmj4hciwp.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389409/Taskflow%20backgrounds/idhd2wg760g7xa8vsze2.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389400/Taskflow%20backgrounds/t9jpmstlb7oaijmbynmw.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389394/Taskflow%20backgrounds/ponbl1heu65x22wus4ui.jpg',\n        'https://res.cloudinary.com/dhz1jk4k6/image/upload/v1601389391/Taskflow%20backgrounds/nnobztxqgr82swa61ne4.jpg'\n    ]\n    const [bgType, setBgType] = useState(null)\n\n    const handleGoBack = () => {\n        if (bgType) {\n            setBgType(null)\n        } else {\n            onGoBack()\n        }\n    }\n    const [loading, setLoading] = useState(false);\n\n\n    const handleStyle = (background, type) => {\n        if (background === board.style.background) return;\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        boardCopy.style = { background: background, type: type }\n        // // setLoading(true)\n        onBoardUpdated(boardCopy)\n    }\n\n    return (\n        <div className=\"board-menu-bg-picker\">\n            {console.log('rednered')}\n\n            <button className=\"pop-up-back-btn clear-btn icon-lg\" onClick={handleGoBack} >\n                <RiArrowLeftSLine />\n            </button>\n            {!bgType && <div className=\"bg-picker-controls\">\n                <div className=\"bg-picker-btn\" onClick={() => setBgType('photos')}>\n                    <span className=\"photos image\"></span>\n                    <span className=\"bg-btn-title\">Photos</span>\n                </div>\n                <div className=\"bg-picker-btn\" onClick={() => setBgType('colors')}>\n                    <span className=\"colors image\"></span>\n                    <span className=\"bg-btn-title\">Colors</span>\n                </div>\n                {/* <button className=\"clear-btn bg-picker-btn photos\" onClick={() => setBgType('photos')}><span className=\"bg-btn-title\">Photos</span></button>\n                <button className=\"clear-btn bg-picker-btn colors\" onClick={() => setBgType('colors')}><span className=\"bg-btn-title\">Colors</span></button> */}\n            </div>}\n            <RiseLoader\n                css={override}\n                size={15} color={\"#2c3e50\"} loading={loading} />\n\n            { bgType === 'photos' &&\n                <div className=\"bg-section-wrapper\">\n                    {imgs.map((img, index) => (\n                        <span\n                            style={{ backgroundImage: `url(${img})` }}\n                            className={'bg-item'}\n                            key={index}\n                            onClick={() => handleStyle(img, 'img')}\n                        >\n                        </span>\n                    ))}\n                </div>}\n            {bgType === 'colors' &&\n                <div className=\"bg-section-wrapper\">\n                    {coverColors.map((color, idx) => (\n                        <span\n                            className={'bg-item'}\n                            style={{ backgroundColor: color }}\n                            key={idx}\n                            onClick={() => handleStyle(color, 'color')}\n                        >\n                        </span>\n                    ))}\n                </div>}\n            {/* {loading && <div className=\"loading\">         */}\n\n            {/* </div>} */}\n        </div >\n    )\n}\n\nexport default BoardBgPicker\n","import React, { useEffect, useState } from 'react'\nimport { useRef } from 'react'\nimport { RiArrowLeftSLine, RiCloseLine } from 'react-icons/ri'\nimport { FaListUl } from \"react-icons/fa\";\nimport useOnClickOutside from '../../hooks/useOnClickOutSide'\nimport ActivityLog from '../ActivityLog'\nimport BoardBgPicker from './BoardBgPicker'\nimport { useHistory, } from 'react-router-dom';\n\nconst BoardMenu = ({ isMenuOpen, closeMenu, menuBtnRef, board, onBoardUpdated }) => {\n    const history = useHistory();\n    const wrapperReff = useRef(null)\n    const [selectedAction, setAction] = useState(null)\n\n    const selectAction = (action) => {\n        switch (action) {\n            case 'backgroundPicker':\n                setAction({ ...selectedAction, type: action, title: 'Background' })\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleGoBack = () => {\n        setAction(null)\n    }\n    useOnClickOutside(wrapperReff, () => {\n        if (isMenuOpen) {\n            closeMenu()\n        }\n    }, menuBtnRef);\n\n    useEffect(() => {\n        if (isMenuOpen) {\n            setAction(null)\n        }\n    }, [isMenuOpen])\n\n    useEffect(() => {\n        return history.listen((location) => {\n            if (wrapperReff.current.classList.contains('menu-open')) {\n                closeMenu()\n            }\n        })\n    }, [history])\n\n\n\n    return (\n        <div className={`board-menu ${isMenuOpen ? 'menu-open' : '  '}`} ref={wrapperReff}>\n            <div className=\"pop-up-header\">\n                <h3>{selectedAction ? selectedAction.title : 'Menu'}</h3>\n                <button className=\"pop-up-close-btn clear-btn icon-lg\" onClick={closeMenu}>\n                    <RiCloseLine />\n                </button>\n\n            </div>\n            { !selectedAction ?\n                <div className=\"board-menu-content\">\n                    <div className=\"board-menu-nav\">\n                        <button className=\"clear-btn board-menu-nav-btn\" onClick={() => selectAction('backgroundPicker')}>Change background</button>\n                        <button className=\"clear-btn board-menu-nav-btn\" onClick={() => selectAction('boardName')}>Change board name</button>\n                        <button className=\"clear-btn board-menu-nav-btn\">Delete board</button>\n                    </div>\n                    <div>\n                        <div className=\"section-title\">\n                            <FaListUl className=\"icon-sm\" />\n                            {/* <GrList className=\"icon-sm\"/> */}\n                            <h4 className=\"\">Activity</h4>\n                        </div>\n\n                        {/* <ActivityLog /> */}\n                    </div>\n                </div> :\n                <div className=\"board-menu-content\">\n                    {selectedAction.type === 'backgroundPicker' && <BoardBgPicker onGoBack={handleGoBack} board={board} onBoardUpdated={onBoardUpdated} />}\n                    {/* {selectedAction === 'boardName' && <div>name</div>} */}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default BoardMenu\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { selectCurrBoard } from '../selectors/boardSelector'\nimport { getBoardById, saveBoard, setCurrBoard } from '../store/actions/boardActions'\nimport { Route, useRouteMatch, useParams, useHistory } from 'react-router-dom'\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { BsThreeDots } from \"react-icons/bs\";\nimport { utilService } from '../services/util.service'\nimport { socketService } from '../services/socket.service';\n\n\nimport TaskList from '../components/task-cmps/TaskList'\nimport TaskDetails from './TaskDetails'\nimport AddTaskList from '../components/task-cmps/AddTaskList'\nimport { RiCloseLine } from 'react-icons/ri';\nimport BoardMenu from '../components/board-menu-cmps/BoardMenu';\nimport { boardService } from '../services/board.service';\n\nconst BoardDetails = () => {\n    const { boardId } = useParams();\n    let { path } = useRouteMatch();\n    let history = useHistory();\n    let { url } = useRouteMatch();\n\n    const dispatch = useDispatch()\n    const board = useSelector(state => state.board.currBoard)\n\n    const initialRender = useRef(true)\n    const menuBtnRef = useRef(null)\n\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n    useEffect(() => {\n        const loadBoard = async () => {\n            try {\n                await dispatch(getBoardById(boardId))\n                // setLoading(false);\n            } catch (e) {\n                // setLoading(false);\n                history.push('/boards')\n            }\n        }\n        loadBoard()\n    }, [])\n\n    useEffect(() => {\n        if (initialRender.current && board) {\n            console.log('board.', board._id);\n            socketService.setup()\n            socketService.emit('board topic', board._id)\n            socketService.on('update board', updateCurrBoard);\n            initialRender.current = false\n        }\n\n    }, [board])\n\n    useEffect(() => {\n        return () => {\n            socketService.off('update board', updateCurrBoard);\n            socketService.terminate();  // clean up\n        };\n    }, [])\n\n    const updateList = async (taskList, activity = null) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        if (activity) {\n            boardCopy.activities.unshift(activity)\n        }\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n        boardCopy.taskLists.splice(idx, 1, taskList)\n        await dispatch(saveBoard(boardCopy))\n    }\n\n    const updateBoard = useCallback((updatedBoard) => {\n        dispatch(saveBoard(updatedBoard))\n    }, [dispatch]);\n\n    const updateCurrBoard = (updatedBoard) => {\n        dispatch(setCurrBoard(updatedBoard))\n    }\n\n    const removeList = (taskListId) => {\n        const boardCopy = JSON.parse(JSON.stringify(board));\n        const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n        boardCopy.taskLists.splice(idx, 1)\n        updateBoard(boardCopy)\n    }\n    const onDragEnd = (result) => {\n        // Dropped outside the list\n\n        const { source, destination } = result;\n\n        if (!destination) {\n            return;\n        }\n        if ((source.index === destination.index) &&\n            (source.droppableId === destination.droppableId)) { // Check if  update is required\n            return\n        }\n\n        let tasklists = [...board.taskLists];\n        const newState = JSON.parse(JSON.stringify(board));\n\n        if ((source.droppableId === destination.droppableId) && source.droppableId === 'board') {\n            const items = utilService.reorder(tasklists, source.index, destination.index);\n            newState.taskLists = items;\n        } else {\n            const sIndex = +source.droppableId;\n            const dIndex = +destination.droppableId;\n            if (sIndex === dIndex) {\n                const items = utilService.reorder(tasklists[sIndex].tasks, source.index, destination.index);\n                newState.taskLists[sIndex].tasks = items;\n            }\n            else {\n                const res = utilService.move(tasklists[sIndex].tasks, tasklists[dIndex].tasks, source, destination);\n                newState.taskLists[sIndex].tasks = res[sIndex];\n                newState.taskLists[dIndex].tasks = res[dIndex];\n\n                const { fromList, toList, task } = { fromList: tasklists[sIndex].title, toList: tasklists[dIndex].title, task: tasklists[sIndex].tasks[source.index] }\n                const newActivity = boardService.newActivity(\n                    `Moved this card from ${fromList} to ${toList}`,\n                    `Moved  <a href=\"#${url}/${task.id}\">${task.title}</a> from ${fromList} to ${toList}`,\n                    task.id\n                )\n                newState.activities.unshift(newActivity)\n            }\n        }\n        updateBoard(newState)\n    }\n\n    const toggleMenu = () => {\n        setIsMenuOpen(prevState => (!prevState));\n    }\n\n    if (!board) {\n        return (<div style={{ paddingTop: '50px' }}>baba\n        </div>)\n    }\n\n    else return (\n        <section className=\"board-details\" style={board.style.type === 'color' ? { backgroundColor: `${board.style.background}` } : { backgroundImage: `url(${board.style.background})` }}>\n            <div className=\"board-header\">\n                <button>button2</button>\n                <button className=\"clear-btn open-menu-btn\" onClick={toggleMenu} ref={menuBtnRef}>\n                    <span className=\"icon-sm\"><BsThreeDots /></span><span>Menu</span>\n                </button>\n            </div>\n            <BoardMenu isMenuOpen={isMenuOpen} closeMenu={toggleMenu} menuBtnRef={menuBtnRef} board={board} onBoardUpdated={updateBoard} />\n            {\n                board &&\n                <DragDropContext\n                    onDragEnd={onDragEnd}>\n                    <Droppable droppableId=\"board\" type=\"lists\" direction='horizontal' >\n                        {(provided, snapshot) => (\n                            <div className=\"list-container\" ref={provided.innerRef} {...provided.droppableProps}>\n                                {board.taskLists && board.taskLists.map((taskList, index) => (\n                                    <Draggable key={taskList.id} draggableId={taskList.id} index={index} type=\"lists\">\n                                        {(provided, snapshot) => (\n\n                                            <TaskList\n                                                taskListIdx={index}\n                                                taskList={taskList}\n                                                onRemoveList={removeList}\n                                                onListUpdated={updateList}\n                                                innerRef={provided.innerRef}\n                                                provided={provided}\n                                            />\n                                        )}\n\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                                {/* {placeholderProps && snapshot.isDraggingOver && (\n                                <div\n                                    className=\"placeholder\"\n                                    style={{\n                                        left: placeholderProps.clientX,\n                                        height: placeholderProps.clientHeight,\n                                        width: placeholderProps.clientWidth,\n                                    }}\n                                />\n\n                            )} */}\n                                <AddTaskList board={board} onBoardUpdated={updateBoard} />\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            }\n            { board && <Route exact path={`${path}/:taskId`} component={TaskDetails} />}\n        </section >\n    )\n}\n\nexport default BoardDetails\n\n\n\n\n","\r\nimport Axios from 'axios';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        if (err.response.status === 401) {\r\n            console.log('ERROR: cannot find boards')\r\n            throw err;     \r\n        }\r\n        throw err;     \r\n    }\r\n}\r\n\r\n","import HttpService from './http.service.js'\nimport { utilService } from './util.service.js'\n\nexport const boardService = {\n    query,\n    getById,\n    update,\n    getEmptyList,\n    getEmptyTask,\n    getEmptyCheckList,\n    getEmptyListItem,\n    newActivity,\n    // save\n}\n\n\n// let board = {\n\n//     theme: 'white',\n//     id: 'board1',\n//     userId: '',\n//     users: [],\n//     activities: [\n//     ],\n\n//     labels: [\n//         {\n//             id: 'label1xa',\n//             title: 'a',\n//             color: '#61bd4f',\n//         },\n//         {\n//             id: 'label2xe',\n//             title: '',\n//             color: '#f2d600',\n//         },\n//         {\n//             id: 'label3qza',\n//             title: 'hii',\n//             color: '#ff9f1a',\n//         },\n//         {\n//             id: 'label4qpa',\n//             title: '',\n//             color: '#c377e0',\n//         },\n//         {\n//             id: 'label5uxa',\n//             title: '',\n//             color: '#eb5a46',\n//         },\n//         {\n//             id: 'label6wwe',\n//             title: '',\n//             color: '#055a8c',\n//         },\n//         {\n//             id: 'label7qioia',\n//             title: '',\n//             color: '#344563',\n//         },\n//         {\n//             id: 'label8aaza',\n//             title: '',\n//             color: '#00c2e0',\n//         },\n//         {\n//             id: 'label9wlza',\n//             title: '',\n//             color: '#ff78cb',\n//         },\n//     ],\n//     taskLists: [\n//         {\n//             id: 'list1',\n//             title: 'This is the list title',\n//             theme: 'white',\n//             tasks: [\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task1',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task2',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task3',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//                 {\n//                     taskListId: 'list1',\n//                     id: 'task4',\n//                     title: 'This is the task title',\n//                     description: 'This is the task description',\n//                     creatorId: '',\n//                     membersId: [],\n//                     comments: [],\n//                     dueDate: '',\n//                     labels: [],\n//                     isDone: false,\n//                     attachment: '',\n//                     checklists: []\n//                 },\n\n//             ]\n//         },\n//     ]\n\n// }\n\nfunction query() {\n    return HttpService.get('board')\n}\n\nasync function stall(stallTime = 3000) {\n    await new Promise(resolve => setTimeout(resolve, stallTime));\n  }\n\nasync function getById(id) {\n    const currBoard = await HttpService.get(`board/${id}`)\n    return currBoard\n}\n// function save(newBoard) {\n//     board = newBoard\n//     return JSON.parse(JSON.stringify(board))\n// }\n\n\nasync function update(board) {\n    // console.log('board');\n    // await stall(3000)\n    return HttpService.put(`board/${board._id}`, board)\n}\n\n\n\nfunction getEmptyList() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        theme: 'white',\n        tasks: []\n    }\n}\n\nfunction getEmptyTask() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        description: '',\n        creatorId: '',\n        membersId: [],\n        comments: [],\n        dueDate: '',\n        labels: [],\n        isDone: false,\n        images: [],\n        checklists: [],\n        cover: {\n            background: '',\n            isFull: null,\n            type: null\n        }\n    }\n}\nfunction getEmptyCheckList(title = 'Checklist') {\n    return {\n        id: utilService.makeId(),\n        title,\n        listItems: [],\n    }\n}\nfunction getEmptyListItem() {\n    return {\n        id: utilService.makeId(),\n        title: '',\n        isDone: false\n    }\n}\n\nfunction newActivity(cardTxt, boardTxt, taskId) {\n    return {\n        id: utilService.makeId(),\n        cardTxt, // text to display without link to the card\n        boardTxt, // text to display with link to the card\n        taskId,\n        date: Date.now()\n    }\n}\n\n// function getTaskById(taskId) {\n//     for (let i = 0; i < board.taskLists.length; i++) {\n//         var task = board.taskLists[i].tasks.find(task => task.id === taskId)\n//         if (task) {\n//             return task\n//         }\n//     }\n// }\n","\nimport { boardService } from '../../services/board.service.js';\nimport { socketService } from '../../services/socket.service.js';\n\n\nexport function loadBoards() {\n    return async dispatch => {\n        const boards = await boardService.query()\n        if (boards) {\n            dispatch({ type: 'SET_BOARDS', boards })\n        }\n    }\n}\n\nexport function getBoardById(id) {\n    return async dispatch => {\n        try {\n            const currBoard = await boardService.getById(id)\n            dispatch({ type: 'SET_BOARD', currBoard })\n        } catch (err) {\n            console.warn('cannot save board', err)\n            throw err\n        }\n\n    }\n\n}\n\nexport function saveBoard(updatedBoard) {\n    return async dispatch => {\n        const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n         boardCopy.activities = []\n        dispatch({ type: 'SET_BOARD', currBoard: boardCopy })\n        const savedBoard = await boardService.update(boardCopy)\n        socketService.emit('update board', savedBoard);\n        // console.log('afte boarrd saved', savedBoard);\n        // dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n    }\n}\nexport function setCurrBoard(updatedBoard) {\n    return dispatch => {\n        dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n    }\n}\n\nexport function loadTask(id) {\n    return async (dispatch, getState) => {\n        await dispatch({ type: 'SET_TASK', id });\n        return getState().board.currTask\n    }\n}\n\nexport function updateTask(task) {\n    return dispatch => {\n        dispatch({ type: 'UPDATE_TASK', currTask: task });\n    }\n}\n\nexport function toggleLabels() {\n    return dispatch => {\n        dispatch({ type: 'TOGGLE_LABELS' });\n    }\n}\n\n\n\n\n\n// export function saveBoard(updatedBoard) {\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: updatedBoard })\n\n//         await boardService.update(updatedBoard)\n//     }\n// }\n// export function saveBoard(updatedBoard) {\n//     console.log('saveeborad', updatedBoard);\n//     const boardCopy = JSON.parse(JSON.stringify(updatedBoard));\n//     const savedBoard = boardService.save(boardCopy)\n//     return async dispatch => {\n//         dispatch({ type: 'SET_BOARD', currBoard: savedBoard })\n//     }\n// }\n\n\n    // export function loadTask(taskId) {\n    //     state.board.taskLists.forEach(taskList => {\n    //         const task = taskList.tasks.find(task => task.id === taskId)\n    //         if (task) {\n    //             dispatch({ type: 'SET_TASK', currTask: task })\n    //         }\n    //     })\n\n    // }\n\n\n    //   function updateTaskList(taskList) {\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskList.id)\n    //     boardCopy.taskLists.splice(idx, 1, taskList)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function removeTaskList(taskListId) {\n\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board));\n    //     const idx = boardCopy.taskLists.findIndex(currList => currList.id === taskListId)\n    //     boardCopy.taskLists.splice(idx, 1)\n    //     saveBoard(boardCopy)\n    //   }\n\n    //   function updateTask(task) {\n    //     dispatch({ type: 'SET_TASK', currTask: task })\n    //     const boardCopy = JSON.parse(JSON.stringify(state.board))\n    //     boardCopy.taskLists.forEach(taskList => {\n    //       let idx = taskList.tasks.findIndex(currTask => currTask.id === task.id)\n    //       if (idx !== -1) {\n    //         taskList.tasks.splice(idx, 1, task)\n    //       }\n    //     })\n    //     saveBoard(boardCopy)\n    //   }\n\n\n    // console.log('state board after', state.board);\n\n\n\n","export const utilService = {\n    makeId,\n    applyDrag,\n    reorder,\n    move\n}\n\nfunction applyDrag(arr, dragResult) {\n    const { removedIndex, addedIndex, payload } = dragResult\n    if (removedIndex === null && addedIndex === null) {\n        console.log('apply drag null');\n        return arr\n    }\n    const result = [...arr]\n\n    let itemToAdd = payload\n\n    if (removedIndex !== null) {\n        itemToAdd = result.splice(removedIndex, 1)[0]\n    }\n\n    if (addedIndex !== null) {\n        result.splice(addedIndex, 0, itemToAdd)\n    }\n    // console.log('handleDrop', result);\n    return result\n}\n\nfunction makeId(length = 5) {\n    var txt = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return txt;\n}\n\n function reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\n// a little function to help us with moving an item between droppables\n\n function move (source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};","import io from 'socket.io-client';\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/'\r\n    : '//localhost:3030'\r\nvar socket;\r\n\r\nexport const socketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit\r\n}\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n\r\n    socket.on(eventName, cb)\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    if (socket) {\r\n        socket.off(eventName, cb)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    if (socket) {\r\n        socket.emit(eventName, data);\r\n    }\r\n}"],"sourceRoot":""}